const e=JSON.parse('{"key":"v-5a18127b","path":"/toBeBetterJavaer/thread/jmm.html","title":"Java的内存模型（JMM）","lang":"zh-CN","frontmatter":{"title":"Java的内存模型（JMM）","shortTitle":"Java的内存模型（JMM）","description":"Java 内存模型（Java Memory Model，JMM）定义了 Java 程序中的变量、线程如何和主存以及工作内存进行交互的规则。它主要涉及到多线程环境下的共享变量可见性、指令重排等问题，是理解并发编程中的关键概念。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,内存模型,JMM"}]]},"headers":[{"level":2,"title":"Java 内存模型","slug":"java-内存模型","link":"#java-内存模型","children":[{"level":3,"title":"什么是共享变量？","slug":"什么是共享变量","link":"#什么是共享变量","children":[]},{"level":3,"title":"内存可见性问题是如何发生的？","slug":"内存可见性问题是如何发生的","link":"#内存可见性问题是如何发生的","children":[]},{"level":3,"title":"如何保证内存可见性？","slug":"如何保证内存可见性","link":"#如何保证内存可见性","children":[]},{"level":3,"title":"JMM 与 Java 运行时内存区域的区别","slug":"jmm-与-java-运行时内存区域的区别","link":"#jmm-与-java-运行时内存区域的区别","children":[]}]},{"level":2,"title":"JMM 与重排序","slug":"jmm-与重排序","link":"#jmm-与重排序","children":[{"level":3,"title":"为什么指令重排可以提高性能？","slug":"为什么指令重排可以提高性能","link":"#为什么指令重排可以提高性能","children":[]},{"level":3,"title":"重排序有哪几种？","slug":"重排序有哪几种","link":"#重排序有哪几种","children":[]}]},{"level":2,"title":"JMM 与顺序一致性模型","slug":"jmm-与顺序一致性模型","link":"#jmm-与顺序一致性模型","children":[{"level":3,"title":"什么是顺序一致性模型？","slug":"什么是顺序一致性模型","link":"#什么是顺序一致性模型","children":[]},{"level":3,"title":"JMM 为什么不保证顺序一致性？","slug":"jmm-为什么不保证顺序一致性","link":"#jmm-为什么不保证顺序一致性","children":[]}]},{"level":2,"title":"JMM 与 happens-before","slug":"jmm-与-happens-before","link":"#jmm-与-happens-before","children":[{"level":3,"title":"happens-before 关系有哪些？","slug":"happens-before-关系有哪些","link":"#happens-before-关系有哪些","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"filePathRelative":"toBeBetterJavaer/thread/jmm.md"}');export{e as data};
