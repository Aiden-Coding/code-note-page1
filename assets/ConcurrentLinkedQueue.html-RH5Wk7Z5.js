const e=JSON.parse('{"key":"v-378f7d44","path":"/toBeBetterJavaer/thread/ConcurrentLinkedQueue.html","title":"ConcurrentLinkedQueue","lang":"zh-CN","frontmatter":{"title":"ConcurrentLinkedQueue","shortTitle":"ConcurrentLinkedQueue","description":"ConcurrentLinkedQueue 是 Java 的 java.util.concurrent 包中的一种线程安全的队列实现。它使用非阻塞算法来确保多线程环境下的高并发性能。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ConcurrentLinkedQueue"}]]},"headers":[{"level":2,"title":"节点类Node","slug":"节点类node","link":"#节点类node","children":[]},{"level":2,"title":"offer方法","slug":"offer方法","link":"#offer方法","children":[{"level":3,"title":"单线程执行角度分析","slug":"单线程执行角度分析","link":"#单线程执行角度分析","children":[]},{"level":3,"title":"多线程执行角度分析","slug":"多线程执行角度分析","link":"#多线程执行角度分析","children":[]}]},{"level":2,"title":"poll方法","slug":"poll方法","link":"#poll方法","children":[{"level":3,"title":"单线程执行角度分析","slug":"单线程执行角度分析-1","link":"#单线程执行角度分析-1","children":[]},{"level":3,"title":"多线程执行情况分析","slug":"多线程执行情况分析","link":"#多线程执行情况分析","children":[]}]},{"level":2,"title":"部分线程 offer 部分线程 poll","slug":"部分线程-offer-部分线程-poll","link":"#部分线程-offer-部分线程-poll","children":[]},{"level":2,"title":"延迟更新策略","slug":"延迟更新策略","link":"#延迟更新策略","children":[]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"filePathRelative":"toBeBetterJavaer/thread/ConcurrentLinkedQueue.md"}');export{e as data};
