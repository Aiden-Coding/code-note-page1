const e=JSON.parse('{"key":"v-70480ad9","path":"/toBeBetterJavaer/thread/synchronized.html","title":"synchronized的四种锁状态","lang":"zh-CN","frontmatter":{"title":"synchronized的四种锁状态","shortTitle":"synchronized的四种锁状态","description":"Java中的每一个对象都可以作为一个锁，这是synchronized实现同步的基础。当我们调用一个用synchronized关键字修饰的方法时，我们需要获取这个方法所在对象的锁。只有获取了这个锁，才可以执行这个方法。如果锁已经被其他线程获取，那么就会进入阻塞状态，直到锁被释放。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,synchronized,偏向锁,轻量级锁,重量级锁,锁"}]]},"headers":[{"level":2,"title":"锁的基本用法","slug":"锁的基本用法","link":"#锁的基本用法","children":[]},{"level":2,"title":"锁的四种状态及锁降级","slug":"锁的四种状态及锁降级","link":"#锁的四种状态及锁降级","children":[]},{"level":2,"title":"对象的锁放在什么地方","slug":"对象的锁放在什么地方","link":"#对象的锁放在什么地方","children":[]},{"level":2,"title":"偏向锁","slug":"偏向锁","link":"#偏向锁","children":[{"level":3,"title":"偏向锁的实现原理","slug":"偏向锁的实现原理","link":"#偏向锁的实现原理","children":[]},{"level":3,"title":"撤销偏向锁","slug":"撤销偏向锁","link":"#撤销偏向锁","children":[]}]},{"level":2,"title":"轻量级锁","slug":"轻量级锁","link":"#轻量级锁","children":[{"level":3,"title":"轻量级锁的释放","slug":"轻量级锁的释放","link":"#轻量级锁的释放","children":[]}]},{"level":2,"title":"重量级锁","slug":"重量级锁","link":"#重量级锁","children":[]},{"level":2,"title":"锁的升级流程","slug":"锁的升级流程","link":"#锁的升级流程","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"filePathRelative":"toBeBetterJavaer/thread/synchronized.md"}');export{e as data};
