const e=JSON.parse('{"key":"v-7df5f027","path":"/JavaYouth/design_patterns/shejimoshi-03.02-chuangjianxing-gongchang_jianzaozhe_yuanxing.html","title":"设计模式-03.02-创建型-工厂&建造者&原型","lang":"zh-CN","frontmatter":{"title":"设计模式-03.02-创建型-工厂&建造者&原型","tags":["设计模式","工厂","建造者","原型"],"categories":["设计模式","03.创建型"],"keywords":"设计模式，工厂，建造者，原型","description":"详解常用的工厂模式和建造者模式，以及不常用的原型模式","cover":"https://npm.elemecdn.com/lql_static@latest/logo/design_patterns.jpg","abbrlink":"ba432704","date":"2021-06-27T00:51:58.000Z"},"headers":[{"level":2,"title":"简单工厂（Simple Factory）","slug":"简单工厂-simple-factory","link":"#简单工厂-simple-factory","children":[]},{"level":2,"title":"工厂方法（Factory Method）","slug":"工厂方法-factory-method","link":"#工厂方法-factory-method","children":[{"level":3,"title":"那什么时候该用工厂方法模式，而非简单工厂模式呢？","slug":"那什么时候该用工厂方法模式-而非简单工厂模式呢","link":"#那什么时候该用工厂方法模式-而非简单工厂模式呢","children":[]}]},{"level":2,"title":"抽象工厂（Abstract Factory）","slug":"抽象工厂-abstract-factory","link":"#抽象工厂-abstract-factory","children":[]},{"level":2,"title":"如何设计实现一个Dependency Injection框架？","slug":"如何设计实现一个dependency-injection框架","link":"#如何设计实现一个dependency-injection框架","children":[{"level":3,"title":"工厂模式和 DI 容器有何区别？","slug":"工厂模式和-di-容器有何区别","link":"#工厂模式和-di-容器有何区别","children":[]},{"level":3,"title":"DI 容器的核心功能有哪些？","slug":"di-容器的核心功能有哪些","link":"#di-容器的核心功能有哪些","children":[]}]},{"level":2,"title":"如何实现一个简单的 DI 容器？","slug":"如何实现一个简单的-di-容器","link":"#如何实现一个简单的-di-容器","children":[{"level":3,"title":"最小原型设计","slug":"最小原型设计","link":"#最小原型设计","children":[]},{"level":3,"title":"提供执行入口","slug":"提供执行入口","link":"#提供执行入口","children":[]},{"level":3,"title":"配置文件解析","slug":"配置文件解析","link":"#配置文件解析","children":[]},{"level":3,"title":"核心工厂类设计","slug":"核心工厂类设计","link":"#核心工厂类设计","children":[]}]},{"level":2,"title":"为什么需要建造者模式？","slug":"为什么需要建造者模式","link":"#为什么需要建造者模式","children":[]},{"level":2,"title":"与工厂模式有何区别？","slug":"与工厂模式有何区别","link":"#与工厂模式有何区别","children":[]},{"level":2,"title":"原型模式的原理与应用","slug":"原型模式的原理与应用","link":"#原型模式的原理与应用","children":[]},{"level":2,"title":"原型模式的实现方式：深拷贝和浅拷贝","slug":"原型模式的实现方式-深拷贝和浅拷贝","link":"#原型模式的实现方式-深拷贝和浅拷贝","children":[]}],"git":{},"filePathRelative":"JavaYouth/design_patterns/设计模式-03.02-创建型-工厂&建造者&原型.md"}');export{e as data};
