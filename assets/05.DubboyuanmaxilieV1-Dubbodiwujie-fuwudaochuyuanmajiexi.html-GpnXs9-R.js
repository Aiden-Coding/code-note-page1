import{_ as e,r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-GjP6hEVt.js";const l="/code-note-page1/assets/image-17-yHwv6Tth.png",u="/code-note-page1/assets/image-18-4D0T8MOA.png",r="/code-note-page1/assets/image-19-Gnoh0Ro-.png",k="/code-note-page1/assets/image-20-hjMcpScr.png",d="/code-note-page1/assets/image-21-VmglUEVu.png",v="/code-note-page1/assets/image-22-j9VyEDym.png",m={},b=n("h2",{id:"第五节-dubbo服务注册-导出-源码解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第五节-dubbo服务注册-导出-源码解析","aria-hidden":"true"},"#"),s(" 第五节: Dubbo服务注册(导出)源码解析")],-1),g=n("h3",{id:"笔记更新地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#笔记更新地址","aria-hidden":"true"},"#"),s(" 笔记更新地址：")],-1),f={href:"https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497?#",target:"_blank",rel:"noopener noreferrer"},y=p('<h3 id="服务导出原理概述" tabindex="-1"><a class="header-anchor" href="#服务导出原理概述" aria-hidden="true">#</a> 服务导出原理概述</h3><ol><li>服务导出的入口为ServiceBean中的export()方法，当Spring启动完之后，通过接收Spring的ContextRefreshedEvent事件来触发export()方法的执行。</li><li>一个ServiceBean对象就表示一个Dubbo服务，ServiceBean对象中的参数就表示服务的参数，比如timeout，该对象的参数值来至@Service注解中所定义的。</li><li>服务导出主要得做两件事情： <ol><li>根据服务的参数信息，启动对应的网络服务器（netty、tomcat、jetty等），用来接收网络请求</li><li>将服务的信息注册到注册中心</li></ol></li><li>但是在做这两件事情之前得先把服务的参数确定好，因为一个Dubbo服务的参数，除开可以在@Service注解中去配置，还会继承Dubbo服务所属应用（Application）上的配置，还可以在配置中心或JVM环境变量中去配置某个服务的参数，所以首先要做的是确定好当前服务最终的（优先级最高）的参数值。</li><li>确定好服务参数之后，就根据所配置的协议启动对应的网络服务器。在启动网络服务器时，并且在网络服务器接收请求的过程中，都可以从服务参数中获取信息，比如最大连接数，线程数，socket超时时间等等。</li><li>启动完网络服务器之后，就将服务信息注册到注册中心。同时还有向注册中心注册监听器，监听Dubbo的中的动态配置信息变更。</li></ol><blockquote><p>服务导出就是服务注册的意思</p></blockquote><p><img src="'+l+'" alt="Alt text"></p><h3 id="服务概念的演化" tabindex="-1"><a class="header-anchor" href="#服务概念的演化" aria-hidden="true">#</a> 服务概念的演化</h3>',5),h=n("li",null,"DemoService接口表示一个服务，此时的服务表示服务定义",-1),w=n("li",null,"DemoServiceImpl表示DemoService服务的具体实现，此时的服务表示服务的具体实现",-1),C=n("li",null,"DemoService+group+version表示一个服务，此时的服务增加了分组和版本概念",-1),x={href:"http://192.168.1.112:80/com.luban.DemoService",target:"_blank",rel:"noopener noreferrer"},S={href:"http://192.168.1.112:80/com.luban.DemoService",target:"_blank",rel:"noopener noreferrer"},U=p(`<p>在dubbo中就是用的最后一种方式来表示服务的。</p><h3 id="服务导出思想" tabindex="-1"><a class="header-anchor" href="#服务导出思想" aria-hidden="true">#</a> 服务导出思想</h3><p>服务导出要做的几件事情：</p><ol><li>确定服务的参数 2. 确定服务支持的协议 2. 构造服务最终的URL</li><li>根据服务支持的不同协议，启动不同的Server，用来接收和处理请求</li><li>将服务URL注册到注册中心去</li><li>因为Dubbo支持动态配置服务参数，所以服务导出时还需要绑定一个监听器Listener来监听服务的参数是否有修改，如果发现有修改，则需要重新进行导出</li></ol><h3 id="确定服务的参数" tabindex="-1"><a class="header-anchor" href="#确定服务的参数" aria-hidden="true">#</a> 确定服务的参数</h3><h4 id="确定服务的参数概述" tabindex="-1"><a class="header-anchor" href="#确定服务的参数概述" aria-hidden="true">#</a> 确定服务的参数概述</h4><ul><li><p>在执行ServiceConfig.export()时，此时ServiceConfig对象就代表一个服务(也可以说ServiceBena代表一个服务，因为本来就是继承关系)，我们已经知道了这个服务的名字（就是服务提供者接口的名字），并且此时这个服务可能已经有一些参数了，就是**@Service注解上所定义的参数**。</p></li><li><p>但是在Dubbo中，除开可以在@Service注解中给服务配置参数，还有很多地方也可以给服务配置参数，比如：</p><ul><li>dubbo.properties文件，你可以建立这个文件，dubbo会去读取这个文件的内容作为服务的参数，Dubob的源码中叫做<strong>PropertiesConfiguration</strong></li><li>配置中心，dubbo在2.7版本后就支持了分布式配置中心，你可以在Dubbo-Admin中去操作配置中心，分布式配置中心就相当于一个远程的dubbo.properties文件，你可以在Dubbo-Admin中去修改这个dubbo.properties文件，当然配置中心支持按应用进行配置，也可以按全局进行配置两种，在Dubbo的源码中<strong>AppExternalConfiguration</strong>表示应用配置，<strong>ExternalConfiguration</strong>表示全局配置。</li><li>系统环境变量，你可以在启动应用程序时，通过-D的方式来指定参数，在Dubbo的源码中叫<strong>SystemConfiguration</strong></li><li>再加上通过@Service注解所配置的参数，在Dubbo的源码中叫<strong>AbstractConfig</strong></li></ul></li><li><p>服务的参数可以从这四个位置来，这四个位置上如果配了同一个参数的话，优先级从高到低有两种情况：</p><ul><li>SystemConfiguration -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; AbstractConfig -&gt; PropertiesConfiguration</li><li>SystemConfiguration -&gt; AbstractConfig -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; PropertiesConfiguration</li></ul></li><li><p>在服务导出时，首先得确定服务的参数。当然，服务的参数除开来自于服务的自身配置外，还可以来自其<strong>上级</strong>。比如如果服务本身没有配置timeout参数，但是如果服务所属的应用的配置了timeout，那么这个应用下的服务都会继承这个timeout配置。<strong>所以在确定服务参数时，需要先从上级获取参数，获取之后，如果服务本身配置了相同的参数，那么则进行覆盖。</strong></p></li></ul><h4 id="确定服务的参数源码" tabindex="-1"><a class="header-anchor" href="#确定服务的参数源码" aria-hidden="true">#</a> 确定服务的参数源码</h4><h5 id="servicebean" tabindex="-1"><a class="header-anchor" href="#servicebean" aria-hidden="true">#</a> ServiceBean</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">//当Spring启动完之后，通过接收Spring的ContextRefreshedEvent事件来触发export()方法的执行。</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当前服务没有被导出并且没有卸载，才导出服务</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isUnexported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The service ready on spring started. service: &quot;</span> <span class="token operator">+</span> <span class="token function">getInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 服务导出（服务注册）</span>
          <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//调用ServiceConfig#export()</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Publish ServiceBeanExportedEvent</span>
      <span class="token comment">// Spring启动完发布ContextRefreshedEvent事件---&gt;服务导出---&gt;发布ServiceBeanExportedEvent</span>
      <span class="token comment">// 程序员可以通过Spring中的ApplicationListener来监听服务导出是否完成</span>
      <span class="token function">publishExportEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">publishExportEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//监听这个事件就可以知道Dubbo的服务有没有注册完成</span>
      <span class="token class-name">ServiceBeanExportedEvent</span> exportEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceBeanExportedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>exportEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="serviceconfig" tabindex="-1"><a class="header-anchor" href="#serviceconfig" aria-hidden="true">#</a> ServiceConfig</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//读取服务配置</span>
        <span class="token function">checkAndUpdateSubConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 检查服务是否需要导出</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>   
        <span class="token punctuation">}</span>

        <span class="token comment">// 检查是否需要延迟发布</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">DELAY_EXPORT_EXECUTOR</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doExport</span><span class="token punctuation">,</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 导出服务</span>
            <span class="token function">doExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkAndUpdateSubConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Use default configs defined explicitly on global configs</span>
        <span class="token comment">// ServiceConfig中的某些属性如果是空的，那么就从ProviderConfig、ModuleConfig、ApplicationConfig中获取</span>
        <span class="token comment">// 补全ServiceConfig中的属性</span>
        <span class="token function">completeCompoundConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Config Center should always being started first.</span>
        <span class="token comment">// 从配置中心获取配置，包括应用配置和全局配置</span>
        <span class="token comment">// 把获取到的配置放入到Environment中的externalConfigurationMap和appExternalConfigurationMap中</span>
        <span class="token comment">// 并刷新所有的XxConfig的属性（除开ServiceConfig），刷新的意思就是将配置中心的配置覆盖调用XxConfig中的属性</span>
        <span class="token comment">// 调用AbstractInterfaceConfig#startConfigCenter()</span>
        <span class="token function">startConfigCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">checkDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">checkProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">checkApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// if protocol is not injvm checkRegistry</span>
        <span class="token comment">// 如果protocol不是只有injvm协议，表示服务调用不是只在本机jvm里面调用，那就需要用到注册中心</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnlyInJvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">checkRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 刷新ServiceConfig，调用AbstractConfig#refresh()</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果配了metadataReportConfig，那么就刷新配置</span>
        <span class="token function">checkMetadataReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>interfaceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;dubbo:service interface=\\&quot;\\&quot; /&gt; interface not allow null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 当前服务对应的实现类是一个GenericService，表示没有特定的接口</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">GenericService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            interfaceClass <span class="token operator">=</span> <span class="token class-name">GenericService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>generic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                generic <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 加载接口</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                interfaceClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>interfaceName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 刷新MethodConfig，并判断MethodConfig中对应的方法在接口中是否存在</span>
            <span class="token function">checkInterfaceAndMethods</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> methods<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 实现类是不是该接口类型</span>
            <span class="token function">checkRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            generic <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// local和stub一样，不建议使用了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>local <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果本地存根为true，则存根类为interfaceName + &quot;Local&quot;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                local <span class="token operator">=</span> interfaceName <span class="token operator">+</span> <span class="token string">&quot;Local&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 加载本地存根类</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> localClass<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                localClass <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forNameWithThreadContextClassLoader</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interfaceClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>localClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;The local implementation class &quot;</span> <span class="token operator">+</span> localClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; not implement interface &quot;</span> <span class="token operator">+</span> interfaceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 本地存根</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stub <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果本地存根为true，则存根类为interfaceName + &quot;Stub&quot;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stub <span class="token operator">=</span> interfaceName <span class="token operator">+</span> <span class="token string">&quot;Stub&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> stubClass<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                stubClass <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forNameWithThreadContextClassLoader</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interfaceClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>stubClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;The stub implementation class &quot;</span> <span class="token operator">+</span> stubClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; not implement interface &quot;</span> <span class="token operator">+</span> interfaceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 检查local和stub</span>
        <span class="token function">checkStubAndLocal</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 检查mock</span>
        <span class="token function">checkMock</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	
	<span class="token doc-comment comment">/**
     * 1.上节课我们在启动类上写了这个配置
     * @PropertySource(&quot;classpath:/spring/dubbo-provider.properties&quot;)
     * 2.那么Spring启动的时候就会加载里面的配置到一些xxxConfig里面【Spring整合Dubbo的时候讲过】
     * 3.@Service注解里配置的参数被首先读取到了ServiceBean里
     * 4.接着会调用这个方法进行补全ServiceBean的配置，从哪里补全呢？就是从上面我们配置的
     * dubbo-provider.properties  进行补全
     * 5.ServcieBean继承了ServiceConfig，所以它两是一个意思，这里强调一下
     * 免得后续看不明白
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">completeCompoundConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果配置了provider，那么则从provider中获取信息赋值其他属性，在这些属性为空的情况下</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setApplication</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">module</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setModule</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>registries <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setRegistries</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getRegistries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>monitor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setMonitor</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>protocols <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setProtocols</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getProtocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>configCenter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setConfigCenter</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getConfigCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果配置了module，那么则从module中获取信息赋值其他属性，在这些属性为空的情况下</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">module</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>registries <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setRegistries</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">getRegistries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>monitor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setMonitor</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果配置了application，那么则从application中获取信息赋值其他属性，在这些属性为空的情况下</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>application <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>registries <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setRegistries</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getRegistries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>monitor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">setMonitor</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="abstractinterfaceconfig" tabindex="-1"><a class="header-anchor" href="#abstractinterfaceconfig" aria-hidden="true">#</a> AbstractInterfaceConfig</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">void</span> <span class="token function">startConfigCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configCenter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ConfigManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>cc <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configCenter <span class="token operator">=</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果配置了ConfigCenter</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configCenter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 从其他位置获取配置中心的相关属性信息，比如配置中心地址</span>
            <span class="token comment">// TODO there may have duplicate refresh</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>configCenter<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 属性更新后，从远程配置中心获取数据(应用配置，全局配置)</span>
            <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 从配置中心取到配置数据后，刷新所有的XxConfig中的属性，除开ServiceConfig</span>
        <span class="token class-name">ConfigManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configCenter<span class="token punctuation">.</span><span class="token function">checkOrUpdateInited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 动态配置中心，管理台上的配置中心</span>
            <span class="token class-name">DynamicConfiguration</span> dynamicConfiguration <span class="token operator">=</span> <span class="token function">getDynamicConfiguration</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">toUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 如果是zookeeper，获取的就是/dubbo/config/dubbo/dubbo.properties节点中的内容</span>
            <span class="token class-name">String</span> configContent <span class="token operator">=</span> dynamicConfiguration<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configCenter<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> appGroup <span class="token operator">=</span> application <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> application<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> appConfigContent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>appGroup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取的就是/dubbo/config/dubbo-demo-consumer-application/dubbo.properties节点中的内容</span>
                <span class="token comment">// 这里有bug</span>
                appConfigContent <span class="token operator">=</span> dynamicConfiguration<span class="token punctuation">.</span>getProperties
                        <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">getAppConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> configCenter<span class="token punctuation">.</span><span class="token function">getAppConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> configCenter<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                         appGroup
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConfigCenterFirst</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">isHighestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//这个就是全局的，就是在网页上那个配置管理里的global</span>
                <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateExternalConfigurationMap</span><span class="token punctuation">(</span><span class="token function">parseProperties</span><span class="token punctuation">(</span>configContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//这个就是某个应用的配置</span>
                <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateAppExternalConfigurationMap</span><span class="token punctuation">(</span><span class="token function">parseProperties</span><span class="token punctuation">(</span>appConfigContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to parse configurations from Config Center.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="configmanager" tabindex="-1"><a class="header-anchor" href="#configmanager" aria-hidden="true">#</a> ConfigManager</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// refresh all configs here,</span>
        <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">MonitorConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">ModuleConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">getProtocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getRegistries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ProviderConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getConsumers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="abstractconfig" tabindex="-1"><a class="header-anchor" href="#abstractconfig" aria-hidden="true">#</a> AbstractConfig</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 1.刷新XxConfig
     * 2.一个XxConfig对象的属性可能是有值的，也可能是没有值的，这时需要从其他位置获取属性值,来进行属性的覆盖
     * 覆盖的优先级，从大到小为系统变量-&gt;配置中心应用配置-&gt;配置中心全局配置-&gt;注解或xml中定义-&gt;dubbo.properties文件
     * 3.以ServiceConfig为例，ServiceConfig中包括很多属性，比如timeout
     * 但是在定义一个Service时，如果在注解上没有配置timeout，那么就会其他地方获取timeout的配置
     * 比如可以从系统变量-&gt;配置中心应用配置-&gt;配置中心全局配置-&gt;注解或xml中定义-&gt;dubbo.properties文件
     * refresh是刷新，将当前ServiceConfig上的set方法所对应的属性更新为优先级最高的值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 1.这里确定的配置优先级从高到低是这样的
             * 系统环境变量【JVM环境变量-&gt;操作系统环境变量】-&gt;配置中心应用配置-&gt;配置中心全局配置-&gt;dubbo.properties文件
             * 2.调用的是Environment#getConfiguration()
             */</span>
            <span class="token class-name">CompositeConfiguration</span> compositeConfiguration <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 表示XxConfig对象本身- AbstractConfig</span>
            <span class="token class-name">Configuration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigConfigurationAdapter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ServiceConfig</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConfigCenterFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//这个是默认的</span>
                <span class="token comment">// 优先级顺序: SystemConfiguration -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; AbstractConfig -&gt; PropertiesConfiguration</span>
                compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// The sequence would be: SystemConfiguration -&gt; AbstractConfig -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; PropertiesConfiguration</span>
                compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// loop methods, get override value and set the new value back to method</span>
            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//ServiceBean</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 是不是setXX()方法</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MethodUtils</span><span class="token punctuation">.</span><span class="token function">isSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 获取xx配置项的value</span>
                    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>compositeConfiguration<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token function">extractPropertyName</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// isTypeMatch() is called to avoid duplicate and incorrect update, for example, we have two &#39;setGeneric&#39; methods in ReferenceConfig.</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">convertPrimitive</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                  <span class="token comment">// 是不是setParameters()方法</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isParametersSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 获取parameter配置项的value</span>
                    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>compositeConfiguration<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token function">extractPropertyName</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token function">invokeGetParameters</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        map <span class="token operator">=</span> map <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> map<span class="token punctuation">;</span>
                        map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">parseParameters</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">invokeSetParameters</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to override &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="environment" tabindex="-1"><a class="header-anchor" href="#environment" aria-hidden="true">#</a> Environment</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">CompositeConfiguration</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CompositeConfiguration</span> compositeConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Config center has the highest priority</span>

        <span class="token comment">// JVM环境变量</span>
        compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSystemConfig</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 操作系统环境变量</span>
        compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironmentConfig</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 配置中心APP配置</span>
        compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAppExternalConfig</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 配置中心Global配置</span>
        compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getExternalConfig</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// dubbo.properties中的配置</span>
        compositeConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPropertiesConfig</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> compositeConfiguration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="确定服务支持的协议" tabindex="-1"><a class="header-anchor" href="#确定服务支持的协议" aria-hidden="true">#</a> 确定服务支持的协议</h4><p>确定服务所支持的协议还是比较简单的，就是看用户配了多少个Protocol。和服务参数意义，Protocol也是可以在各个配置点进行配置的。</p><ol><li>首先在SpringBoot的application.properties文件中就可能配置了协议</li><li>也可能在dubbo.properties文件中配置了协议</li><li>也可能在配置中心中也配置了协议</li><li>也可能通过-D的方式也配置了协议</li></ol><p>所以在服务导出时，需要从以上几个地方获取协议，结果可能是一个协议，也可能是多个协议，从而确定出协议。</p><h4 id="url作用" tabindex="-1"><a class="header-anchor" href="#url作用" aria-hidden="true">#</a> URL作用</h4><ol><li><p>资源</p><ol><li>注册中心URL：zookeeper://ip+port?dynamic=true</li><li>服务：dubbo://ip+port/接口名?timeout=3000</li><li>服务：http://ip+port/接口名?timeout=3000</li></ol></li><li><p>方便扩展</p></li></ol><h4 id="构造服务最终的url" tabindex="-1"><a class="header-anchor" href="#构造服务最终的url" aria-hidden="true">#</a> 构造服务最终的URL</h4><p>有了确定的协议，服务名，服务参数后，自然就可以组装成服务的URL了。</p><p>但是还有一点是非常重要的，在Dubbo中支持服务动态配置，注意，这个和配置中心不是同一概念，动态配置是可以在服务导出后动态的去修改服务配置的，而配置中心则不能达到这一的效果（这个我要在确定一下）。</p><p>动态配置，其实就是继续给服务增加了一些参数，所以在把服务的URL注册到注册中心去之前，得先按照动态配置中所添加的配置重写一下URL，也就是应用上动态配置中的参数。</p><p>只有这样作完之后得到的URL才是<strong>真正准确</strong>的服务提供者URL。</p><h3 id="开始服务注册相关过程" tabindex="-1"><a class="header-anchor" href="#开始服务注册相关过程" aria-hidden="true">#</a> 开始服务注册相关过程</h3><blockquote><ol><li>根据服务支持的不同协议，启动不同的Server，用来接收和处理请求</li><li>将服务URL注册到注册中心去</li><li>因为Dubbo支持动态配置服务参数，所以服务导出时还需要绑定一个监听器Listener来监听服务的参数是否有修改，如果发现有修改，则需要重新进行导出</li></ol><p>这三个步骤都会在<code>ServiceConfig#export()#doExport()</code> 这个方法里做，流程比较复杂，就直接看代码吧</p></blockquote><h4 id="公用源码" tabindex="-1"><a class="header-anchor" href="#公用源码" aria-hidden="true">#</a> 公用源码</h4><blockquote><p>这个部分的源码是前面三个步骤公用的</p></blockquote><h5 id="serviceconfig-1" tabindex="-1"><a class="header-anchor" href="#serviceconfig-1" aria-hidden="true">#</a> ServiceConfig</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//读取服务配置</span>
        <span class="token function">checkAndUpdateSubConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 检查服务是否需要导出，@Service里可以配置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 检查是否需要延迟发布，@Service里可以配置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">DELAY_EXPORT_EXECUTOR</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doExport</span><span class="token punctuation">,</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 导出服务</span>
            <span class="token function">doExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>unexported<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;The service &quot;</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; has already unexported!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 已经导出了，就不再导出了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exported<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        exported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path <span class="token operator">=</span> interfaceName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">doExportUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doExportUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// registryURL 表示一个注册中心</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> registryURLs <span class="token operator">=</span> <span class="token function">loadRegistries</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//配置的每一个protocol都会产生一个dubbo服务，所以这里是循环配置的协议，</span>
        <span class="token comment">// 我们这里假设配置了dubbo,但是配了两个端口，这样也算两个protocol</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolConfig</span> protocolConfig <span class="token operator">:</span> protocols<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// pathKey = group/contextpath/path:version</span>
            <span class="token comment">// 例子：myGroup/user/org.apache.dubbo.demo.DemoService:1.0.1</span>
            <span class="token class-name">String</span> pathKey <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span><span class="token function">getContextPath</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> p <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// ProviderModel中存在服务提供者访问路径，实现类，接口，以及接口中的各个方法对应的ProviderMethodModel</span>
            <span class="token comment">// ProviderMethodModel表示某一个方法，方法名，所属的服务的，</span>
            <span class="token class-name">ProviderModel</span> providerModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProviderModel</span><span class="token punctuation">(</span>pathKey<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// ApplicationModel表示应用中有哪些服务提供者和引用了哪些服务</span>
            <span class="token class-name">ApplicationModel</span><span class="token punctuation">.</span><span class="token function">initProviderModel</span><span class="token punctuation">(</span>pathKey<span class="token punctuation">,</span> providerModel<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 重点，每一个协议都会注册一个服务</span>
            <span class="token function">doExportUrlsFor1Protocol</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> registryURLs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doExportUrlsFor1Protocol</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConfig</span> protocolConfig<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> registryURLs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// protocolConfig表示某个协议，registryURLs表示所有的注册中心</span>

        <span class="token comment">// 如果配置的某个协议，没有配置name，那么默认为dubbo</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> protocolConfig<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token constant">DUBBO</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 这个map表示服务url的参数</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">SIDE_KEY</span><span class="token punctuation">,</span> <span class="token constant">PROVIDER_SIDE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">appendRuntimeParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 监控中心参数</span>
        <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> metrics<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 应用相关参数</span>
        <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模块相关参数</span>
        <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// remove &#39;default.&#39; prefix for configs from ProviderConfig</span>
        <span class="token comment">// appendParameters(map, provider, Constants.DEFAULT_KEY);</span>

        <span class="token comment">// 提供者相关参数</span>
        <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 协议相关参数</span>
        <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> protocolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 服务本身相关参数</span>
        <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 服务中某些方法参数，@Service里可以针对某些方法配置某些参数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodConfig</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 某个方法的配置参数，注意有prefix</span>
                <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> method<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> retryKey <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.retry&quot;</span><span class="token punctuation">;</span>

                <span class="token comment">// 如果某个方法配置存在xx.retry=false，则改成xx.retry=0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>retryKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> retryValue <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>retryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>retryValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.retries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArgumentConfig</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 遍历当前方法配置中的参数配置</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ArgumentConfig</span> argument <span class="token operator">:</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                        <span class="token comment">// 如果配置了type，则遍历当前接口的所有方法，然后找到方法名和当前方法名相等的方法，可能存在多个</span>
                        <span class="token comment">// 如果配置了index,则看index对应位置的参数类型是否等于type,如果相等，则向map中存入argument对象中的参数</span>
                        <span class="token comment">// 如果没有配置index，那么则遍历方法所有的参数类型，等于type则向map中存入argument对象中的参数</span>
                        <span class="token comment">// 如果没有配置type,但配置了index,则把对应位置的argument放入map</span>
                        <span class="token comment">// convert argument type</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> argument<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment">// visit all methods</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> methods<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> methods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token class-name">String</span> methodName <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token comment">// target the method, and get its signature</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> argtypes <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                        <span class="token comment">// one callback in the method</span>
                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                            <span class="token keyword">if</span> <span class="token punctuation">(</span>argtypes<span class="token punctuation">[</span>argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                                <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Argument config error : the index attribute and type attribute not match :index :&quot;</span> <span class="token operator">+</span> argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, type:&quot;</span> <span class="token operator">+</span> argument<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                            <span class="token punctuation">}</span>
                                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                            <span class="token comment">// multiple callbacks in the method</span>
                                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> argtypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> argclazz <span class="token operator">=</span> argtypes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                                                <span class="token keyword">if</span> <span class="token punctuation">(</span>argclazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                                    <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Argument config error : the index attribute and type attribute not match :index :&quot;</span> <span class="token operator">+</span> argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, type:&quot;</span> <span class="token operator">+</span> argument<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                                    <span class="token punctuation">}</span>
                                                <span class="token punctuation">}</span>
                                            <span class="token punctuation">}</span>
                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> argument<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Argument config must set index or type attribute.eg: &lt;dubbo:argument index=&#39;0&#39; .../&gt; or &lt;dubbo:argument type=xxx .../&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token comment">// end of methods for</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolUtils</span><span class="token punctuation">.</span><span class="token function">isGeneric</span><span class="token punctuation">(</span>generic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">GENERIC_KEY</span><span class="token punctuation">,</span> generic<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">METHODS_KEY</span><span class="token punctuation">,</span> <span class="token constant">ANY_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> revision <span class="token operator">=</span> <span class="token class-name">Version</span><span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>revision <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> revision<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">REVISION_KEY</span><span class="token punctuation">,</span> revision<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 通过接口对应的Wrapper，拿到接口中所有的方法名字</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">Wrapper</span><span class="token punctuation">.</span><span class="token function">getWrapper</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No method found in service interface &quot;</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">METHODS_KEY</span><span class="token punctuation">,</span> <span class="token constant">ANY_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">METHODS_KEY</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Token是为了防止服务被消费者直接调用（伪造http请求）,可以在@Service里配置</span>
        <span class="token comment">// 这里防止的是某些消费者不是从注册中心拿到的URL调用提供者，而是消费者自己拼出的URL进行调用</span>
        <span class="token comment">// 服务调用的是会有个Tokenfilter过滤器进行拦截(后面讲)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">TOKEN_KEY</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">TOKEN_KEY</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// export service</span>
        <span class="token comment">// 通过该host和port访问该服务</span>
        <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findConfigedHosts</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> registryURLs<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> port <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findConfigedPorts</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> name<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 服务url</span>
        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> p <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * url：http://192.168.40.17:80/org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=
         * dubbo-demo-annotation-provider&amp;bean.name=ServiceBean:org.apache.dubbo.demo.DemoService
         * &amp;bind.ip=192.168.40.17&amp;bind.port=80&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=true&amp;
         * generic=false&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=285072
         * &amp;release=&amp;side=provider&amp;timestamp=1585206500409
         *
         * 1.可以通过ConfiguratorFactory，对服务url再次进行配置
         * 2.意思就是可以自己实现一个ConfiguratorFactory的实现类，实现对应方法对URL进行自定义修改
         * 3.这个实现类是通过SPI进行加载的
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">ConfiguratorFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">hasExtension</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            url <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">ConfiguratorFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigurator</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> scope <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">SCOPE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scope可能为null，remote, local,none</span>
        <span class="token comment">// don&#39;t export when none is configured</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">SCOPE_NONE</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果scope为none,则不会进行任何的服务导出，既不会远程，也不会本地</span>

            <span class="token comment">// export to local if the config is not remote (export to remote only when config is remote)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">SCOPE_REMOTE</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果scope不是remote,则会进行本地导出，会把当前url的protocol改为injvm，然后进行导出</span>
                <span class="token comment">// 这样的话就只有本地的JVM才能调用</span>
                <span class="token function">exportLocal</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// export to remote if the config is not local (export to local only when config is local)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">SCOPE_LOCAL</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>scope<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果scope不是local,则会进行远程导出</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>registryURLs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果有注册中心，则将服务注册到注册中心</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token constant">URL</span> registryURL <span class="token operator">:</span> registryURLs<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                        <span class="token comment">//if protocol is only injvm ,not register</span>
                        <span class="token comment">// 如果是injvm，则不需要进行注册中心注册</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOCAL_PROTOCOL</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token comment">// 该服务是否是动态，对应zookeeper上表示是否是临时节点，对应dubbo中的功能就是静态服务</span>
                        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">addParameterIfAbsent</span><span class="token punctuation">(</span><span class="token constant">DYNAMIC_KEY</span><span class="token punctuation">,</span> registryURL<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">DYNAMIC_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 拿到监控中心地址</span>
                        <span class="token class-name">URL</span> monitorUrl <span class="token operator">=</span> <span class="token function">loadMonitor</span><span class="token punctuation">(</span>registryURL<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 当前服务连接哪个监控中心</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>monitorUrl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span><span class="token constant">MONITOR_KEY</span><span class="token punctuation">,</span> monitorUrl<span class="token punctuation">.</span><span class="token function">toFullString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token comment">// 服务的register参数，如果为true，则表示要注册到注册中心</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">REGISTER_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Register dubbo service &quot;</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; url &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; to registry &quot;</span> <span class="token operator">+</span> registryURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Export dubbo service &quot;</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; to url &quot;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>

                        <span class="token comment">// For providers, this is used to enable custom proxy to generate invoker</span>
                        <span class="token comment">// 服务使用的动态代理机制，如果为空则使用javassit</span>
                        <span class="token class-name">String</span> proxy <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">PROXY_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            registryURL <span class="token operator">=</span> registryURL<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span><span class="token constant">PROXY_KEY</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>


                        <span class="token doc-comment comment">/**
                         * 1.生成一个当前服务接口的代理对象
                         * 2.使用代理生成一个Invoker，Invoker表示服务提供者的代理，可以使用Invoker的invoke方法执行服务
                         * 就是把注册中心的URL和服务的URL拼起来，registryURL + &quot;export&quot; + url,对应的url为:
                         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>
                         registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?
                         application=dubbo-demo-annotation-provider&amp;dubbo=2.0.2&amp;export=
                         http://192.168.40.17:80/org.apache.dubbo.demo.DemoService?
                         anyhost=true&amp;application=dubbo-demo-annotation-provider&amp;bean.name=
                         ServiceBean:org.apache.dubbo.demo.DemoService&amp;bind.ip=192.168.40.17&amp;
                         bind.port=80&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=true&amp;generic=
                         false&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello&amp;
                         pid=19472&amp;release=&amp;side=provider&amp;timestamp=1585207994860&amp;pid=19472&amp;
                         registry=zookeeper&amp;timestamp=1585207994828
                         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">/&gt;</span></span>
                         * 3.这个Invoker中包括了服务的实现者、服务接口类、服务的注册地址（针对当前服务的，参数export
                         指定了当前服务）
                         * 4.此invoker表示一个可执行的服务，调用invoker的invoke()方法即可执行服务,同时此invoker也可用来导出
                         * 在服务导出(注册)的时候，invoker只是存在某一个地方，等消费者调用服务的时候才会执行
                         * 5.ref就是之前讲过的服务具体实现类
                         * 6.这里第二个参数传的是URL(具体就是registryURL)，后面exporter马上会用
                         */</span>
                        <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker <span class="token operator">=</span> <span class="token constant">PROXY_FACTORY</span><span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> interfaceClass<span class="token punctuation">,</span> registryURL<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span><span class="token constant">EXPORT_KEY</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">toFullString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// invoker.invoke(Invocation)</span>

                        <span class="token comment">// DelegateProviderMetaDataInvoker也表示服务提供者，包括了Invoker和服务的配置</span>
                        <span class="token comment">//把this(也就是serviceconfig服务参数)和invoker  服务实现类等 再包装一下</span>
                        <span class="token class-name">DelegateProviderMetaDataInvoker</span> wrapperInvoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegateProviderMetaDataInvoker</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token doc-comment comment">/**
                         * 使用特定的协议来对服务进行导出，这里的协议为RegistryProtocol，导出成功后得到一个Exporter
                         * 1.exporter导出器怎么确定用哪个实现类的export方法呢？SPI机制会判断哪个invoker里面有getURL这个方法
                         * 【这里不知道怎么调哪个类的哪个方法的请看前面讲的SPI】
                         * 2.因为前面invoker传的是registryURL，所以我们这里就会使用RegistryProtocol进行服务注册
                         * registryURL可以理解为注册中心的注册协议吧，debug这里，就会看到是这样的registry://127.0.0.1:2181......
                         * 3.注册完了之后，使用DubboProtocol进行导出
                         * 4.到此为止做了哪些事情？ ServiceBean.export()--&gt;刷新ServiceBean的参数--&gt;得到注册中心URL和协议URL--&gt;
                         * 遍历每个协议URL--&gt;组成服务URL--&gt;生成可执行服务Invoker--&gt;导出服务
                         * 5.这里就会调用RegistryProtocol#export(Invoker)
                         */</span>
                        <span class="token class-name">Exporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exporter <span class="token operator">=</span> protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>wrapperInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        exporters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exporter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 没有配置注册中心时，也会导出服务</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Export dubbo service &quot;</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; to url &quot;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>


                    <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker <span class="token operator">=</span> <span class="token constant">PROXY_FACTORY</span><span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> interfaceClass<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">DelegateProviderMetaDataInvoker</span> wrapperInvoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegateProviderMetaDataInvoker</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token class-name">Exporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exporter <span class="token operator">=</span> protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>wrapperInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    exporters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exporter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>


                <span class="token doc-comment comment">/**
                 * <span class="token keyword">@since</span> 2.7.0
                 * ServiceData Store
                 */</span>
                <span class="token comment">// 根据服务url，讲服务的元信息存入元数据中心</span>
                <span class="token class-name">MetadataReportService</span> metadataReportService <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>metadataReportService <span class="token operator">=</span> <span class="token function">getMetadataReportService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    metadataReportService<span class="token punctuation">.</span><span class="token function">publishProvider</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动netty-tomcat等server源码" tabindex="-1"><a class="header-anchor" href="#启动netty-tomcat等server源码" aria-hidden="true">#</a> 启动Netty,Tomcat等Server源码</h4><h5 id="registryprotocol" tabindex="-1"><a class="header-anchor" href="#registryprotocol" aria-hidden="true">#</a> RegistryProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">doLocalExport</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> originInvoker<span class="token punctuation">,</span> <span class="token class-name">URL</span> providerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> bounds<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invokerDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerDelegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * 1.这里又是SPI的知识。protocol属性的值是哪来的，是在SPI中注入进来的，是一个代理类
             * 2.InvokerDelegate的父类InvokerWrapper有getURL方法,所以最终SPI决定调哪个扩展点
             * 是通过providerUrl决定的，而providerUrl这里基本就是DubboProtocol或HttpProtocol去export
             * 3.我们这里用的是dubbo协议，所以会调用DubboProtocol
             * 4.为什么需要ExporterChangeableWrapper？方便注销已经被导出的服务
             */</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Exporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>invokerDelegate<span class="token punctuation">)</span><span class="token punctuation">,</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="dubboprotocol" tabindex="-1"><a class="header-anchor" href="#dubboprotocol" aria-hidden="true">#</a> DubboProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Exporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
        <span class="token class-name">URL</span> url <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 唯一标识一个服务的key</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">serviceKey</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构造一个Exporter进行服务导出</span>
        <span class="token class-name">DubboExporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> exporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboExporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> key<span class="token punctuation">,</span> exporterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        exporterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> exporter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//export an stub service for dispatching event</span>
        <span class="token class-name">Boolean</span> isStubSupportEvent <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">STUB_EVENT_KEY</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_STUB_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Boolean</span> isCallbackservice <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">IS_CALLBACK_SERVICE</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isStubSupportEvent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isCallbackservice<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> stubServiceMethods <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">STUB_EVENT_METHODS_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stubServiceMethods <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> stubServiceMethods<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;consumer [&quot;</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">INTERFACE_KEY</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                            <span class="token string">&quot;], has set stubproxy support event ,but no stub methods founded.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 服务的stub方法</span>
                stubServiceMethodsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stubServiceMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 开启NettyServer</span>
        <span class="token comment">// 请求---&gt;invocation---&gt;服务key---&gt;exporterMap.get(key)---&gt;exporter---&gt;invoker---&gt;invoker.invoke(invocation)--&gt;执行服务</span>
        <span class="token function">openServer</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 特殊的一些序列化机制，比如kryo提供了注册机制来注册类，提高序列化和反序列化的速度</span>
        <span class="token function">optimizeSerialization</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> exporter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	
	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">openServer</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// find server.</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得ip地址和port， 192.168.40.17:20880</span>

        <span class="token comment">// NettyClient, NettyServer</span>
        <span class="token comment">//client can export a service which&#39;s only for server to invoke</span>
        <span class="token keyword">boolean</span> isServer <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">IS_SERVER_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 缓存Server对象</span>
            <span class="token class-name">ExchangeServer</span> server <span class="token operator">=</span> serverMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// DCL，Double Check Lock</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    server <span class="token operator">=</span> serverMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 创建Server，并进行缓存</span>
                        serverMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">createServer</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// server supports reset, use together with override</span>
                <span class="token comment">// 服务重新导出时，就会走这里  这里会调用HeaderExchangeServer#reset</span>
                server<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="abstractprotocol" tabindex="-1"><a class="header-anchor" href="#abstractprotocol" aria-hidden="true">#</a> AbstractProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  	<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">serviceKey</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> port <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">BIND_PORT_KEY</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// path就是@Service注解配的，path配了就用，不配就不用。这四个参数作用就是生成唯一标识一个服务的key</span>
        <span class="token comment">// 从这里就可以看出，协议相同的只要端口号不一样，依然算不同的服务</span>
        <span class="token keyword">return</span> <span class="token function">serviceKey</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">VERSION_KEY</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">GROUP_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="启动server总结" tabindex="-1"><a class="header-anchor" href="#启动server总结" aria-hidden="true">#</a> 启动Server总结</h5><blockquote><p>这里不是dubbo的核心，就不贴源码了</p></blockquote><p>在服务URL中指定了协议，比如Http协议、Dubbo协议。根据不同的协议启动对应的Server。</p><p>比如Http协议就启动Tomcat、Jetty。</p><p>比如Dubbo协议就启动Netty。</p><p>不能只启动Server，还需要绑定一个RequestHandler，用来处理请求。</p><p>比如，Http协议对应的就是InternalHandler。Dubbo协议对应的就是ExchangeHandler。</p><p>这里来详细分析一下Dubbo协议所启动的Server。</p><ol><li>调用DubboProtocol的openServer(URL url)方法开启启动Server</li><li>调用DubboProtocol的createServer(url)方法，在createServer()方法中调用**Exchangers.bind(url, requestHandler)**得到一个ExchangeServer</li><li>其中requestHandler表示请求处理器，用来处理请求</li><li>在**Exchangers.bind(url, requestHandler)**中，先会根据URL得到一个Exchanger，默认为HeaderExchanger</li><li>HeaderExchanger中包括HeaderExchangeClient、HeaderExchangeServer</li><li>HeaderExchangeClient负责发送心跳，HeaderExchangeServer负责接收心跳，如果超时则会关闭channel</li><li>在构造HeaderExchangeServer之前，会通过调用Transporters.<em>bind</em>(url, <strong>new</strong> DecodeHandler(<strong>new</strong> HeaderExchangeHandler(handler)))方法的到一个Server</li><li>默认会使用getTransporter去bind(URL url, ChannelHandler listener)从而得到一个Servlet，此时的listener就是外部传进来的DecodeHandler</li><li>在NettyTransporter的bind方法中会去<strong>new</strong> NettyServer(url, listener)，所以上面返回的Server默认就是NettyServer</li><li>在构造NettyServer时，会调用ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME))再构造一个ChannelHandler。</li><li>wrap中的handler就是上面的listener</li><li>在wrap方法中会调用new MultiMessageHandler(new HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher.class).getAdaptiveExtension().dispatch(handler, url)));构造一个ChannelHandler。</li><li>构造完ChannelHandler后，就是真正的去开启Server了，会调用AbstractServer抽象类的doOpen方法。</li><li>在NettyServer中，会实现doOpen方法，会调用<strong>new</strong> NettyServerHandler(getUrl(), <strong>this</strong>)构造一个NettyServerHandler，并bind地址</li><li>至此，DubboProtocol协议的启动Server流程就结束。</li></ol><p>总结一下DubboProtocol协议的RequestHandler链路：</p><p><img src="`+u+`" alt="Alt text"></p><ol><li><p>NettyServerHandler：与NettyServer直接绑定的请求处理器，负责从Netty接收到请求，channelRead()方法获取到请求，然后调用下一层的Handler（NettyServer）的received()方法将请求传递下去，此时的请求还是Object msg</p></li><li><p>NettyServer：NettyServer的父类AbstractPeer中存在received()，该方法没有做什么，直接把msg传递给下一层Handler（MultiMessageHandler）</p></li><li><p>MultiMessageHandler：此Handler会判断msg是否是一个MultiMessage，如果是，则对MultiMessage进行拆分，则把拆分出来的msg传递给下层Handler（HeartbeatHandler），如果不是，则直接把msg传递给下层Handler（HeartbeatHandler）</p></li><li><p>HeartbeatHandler：此Handler通过received()方法接收到msg，然后判断该msg是不是一个心跳请求或心跳响应，如果是心跳请求，则此Handler返回一个Response对象（很简单的一个对象），如果是心跳响应，则打印一个日志，不会有其他逻辑，如果都不是，则把msg传递给下层Handler（AllChannelHandler）。</p></li><li><p>AllChannelHandler：此Handler通过received()方法接收到msg，然后把msg封装为一个ChannelEventRunnable对象，并把ChannelEventRunnable扔到线程池中去，异步去处理该msg。在ChannelEventRunnable中会把msg交给下一个Handler（DecodeHandler）</p></li><li><p>DecodeHandler：此Handler通过received()方法接收到msg，会对msg解析decode解码，然后交给下一个Handler(HeaderExchangeHandler)</p></li><li><p>HeaderExchangeHandler：此Handler通过received()方法接收到msg，会判断msg的类型</p><ol><li>如果Request是TwoWay，则会调用下一个Handler(DubboProtocol中的<strong>requestHandler</strong>)的reply方法得到一个结果，然后返回</li><li>如果Request不是TwoWay，则会调用下一个Handler(DubboProtocol中的<strong>requestHandler</strong>)的received方法处理该请求，不会返回结果</li></ol></li><li><p>requestHandler：此Handler是真正的处理请求逻辑，在received()方法中，如果msg是Invocation，则会调用reply方法，但不会返回reply方法所返回的结果，在reply方法中把msg强制转换为Invocation类型 inv，然后根据inv得到对应的服务Invoker，然后调用invoke(inv)方法，得到结果。</p></li></ol><h4 id="服务注册源码" tabindex="-1"><a class="header-anchor" href="#服务注册源码" aria-hidden="true">#</a> 服务注册源码</h4><h5 id="registryprotocol-1" tabindex="-1"><a class="header-anchor" href="#registryprotocol-1" aria-hidden="true">#</a> RegistryProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">URL</span> registryUrl<span class="token punctuation">,</span> <span class="token class-name">URL</span> registeredProviderUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里最终也是通过SPI机制，判断传过来的是什么，我们这里在前面把registry转成了zookeeper的URL</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 所以这里会调用ZookeeperRegistry的register方法，实际上是先调用ZookeeperRegistry的父类FailbackRegistry</span>
        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="failbackregistry-java" tabindex="-1"><a class="header-anchor" href="#failbackregistry-java" aria-hidden="true">#</a> FailbackRegistry.java</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">removeFailedRegistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">removeFailedUnregistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 然后在这里调用ZookeeperRegistry#doRegister,这个URL参数很明显又是一个SPI的提现</span>
            <span class="token function">doRegister</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Throwable</span> t <span class="token operator">=</span> e<span class="token punctuation">;</span>

            <span class="token comment">// If the startup detection is opened, the Exception is thrown directly.</span>
            <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CHECK_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CHECK_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">CONSUMER_PROTOCOL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> skipFailback <span class="token operator">=</span> t <span class="token keyword">instanceof</span> <span class="token class-name">SkipFailbackWrapperException</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">||</span> skipFailback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>skipFailback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; to registry &quot;</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, cause: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot;, waiting for retry, cause: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Record a failed registration request to a failed list, retry regularly</span>
            <span class="token function">addFailedRegistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="zookeeperregistry" tabindex="-1"><a class="header-anchor" href="#zookeeperregistry" aria-hidden="true">#</a> ZookeeperRegistry</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">toUrlPath</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">DYNAMIC_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; to zookeeper &quot;</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务监听器原理" tabindex="-1"><a class="header-anchor" href="#服务监听器原理" aria-hidden="true">#</a> 服务监听器原理</h3><blockquote><p>动态配置不能改端口</p></blockquote><h4 id="服务监听器原理总结" tabindex="-1"><a class="header-anchor" href="#服务监听器原理总结" aria-hidden="true">#</a> 服务监听器原理总结</h4><ol><li><p>服务在导出的过程中需要向动态配置中心的数据进行订阅，以便当管理人员修改了动态配置中心中对应服务的参数后，服务提供者能及时做出变化。此功能涉及到版本兼容，因为在Dubbo2.7之前也存在此功能，Dubbo2.7开始对此功能进行了调整。</p></li><li><p>在Dubbo2.7之前，仅支持多某个服务的动态配置</p></li><li><p>在Dubbo2.7之后，不仅支持对单个服务的动态配置，也支持对某个应用的动态配置（相当于对这个应用下的所有服务生效）</p></li><li><p>为了达到这个功能，需要利用Zookeeper的Watcher机制，所以对于服务提供者而言，我到底监听哪个Zookeeper节点的数据变化呢？</p></li><li><p>这个节点是有规则的，并且在Dubbo2.7前后也不一样：</p><ol><li>Dubbo2.7之前：监听的zk路径是：<code>/dubbo/org.apache.dubbo.demo.DemoService/configurators/override://0.0.0.0/org.apache.dubbo.demo.DemoService?category=configurators&amp;compatible_config=true&amp;dynamic=false&amp;enabled=true&amp;timeout=6000</code>注意，注意监听的是节点名字的变化，而不是节点内容</li><li>Dubbo2.7之后，监听的zk路径是： <ol><li>服务： <code>/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService.configurators</code>节点的内容</li><li>应用： <code>/dubbo/config/dubbo/dubbo-demo-provider-application.configurators</code>节点的内容</li></ol></li></ol></li><li><p>注意，要和配置中心的路径区分开来，配置中心的路径是：</p><ol><li>应用：/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService/dubbo.properties节点的内容</li><li>全局：/dubbo/config/dubbo/dubbo.properties节点的内容</li></ol></li></ol><p><img src="`+r+`" alt="Alt text"></p><blockquote><p>所以在一个服务进行导出时，需要在服务提供者端给当前服务生成一个对应的监听器实例，这个监听器实例为OverrideListener，它负责监听对应服务的动态配置变化，并且根据动态配置中心的参数重写服务URL。</p></blockquote><p>除开有OverrideListener之外，在Dubbo2.7之后增加了另外两个：</p><ol><li>ProviderConfigurationListener：监听的是应用的动态配置数据修改，所以它是在RegistryProtocol类中的一个属性，并且是随着RegistryProtocol实例化而实例化好的，一个应用中只有一个</li><li>ServiceConfigurationListener：监听的是服务的动态配置数据修改，和OverrideListener类似，也是对应一个服务的，所以在每个服务进行导出时都会生成一个，实际上ServiceConfigurationListener的内部有一个属性就是OverrideListener，所以当ServiceConfigurationListener监听数据发生了变化时，就会把配置中心的最新数据交给OverrideListener去重写服务URL。</li><li>同时在RegistryProtocol类中保存了所有服务所对应的OverrideListener，所以实际上当ProviderConfigurationListener监听到数据发生了变化时，也会把它所得到的最新数据依次调用每个OverrideListener去重写服务对应的服务URL。</li><li>ProviderConfigurationListener会监听/dubbo/config/dubbo/dubbo-demo-provider-application.configurators节点</li><li>ServiceConfigurationListener会监听/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService.configurators节点</li></ol><p><strong>整理修改动态配置触发流程：</strong></p><ol><li><p>修改服务动态配置，底层会修改Zookeeper中的数据，</p><ol><li>/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService.configurators节点的内容</li></ol></li><li><p>ServiceConfigurationListener会监听到节点内容的变化，会触发ServiceConfigurationListener的父类AbstractConfiguratorListener的process(ConfigChangeEvent event)方法</p></li><li><p>ConfigChangeEvent表示一个事件，事件中有事件类型，还有事件内容（节点内容），还有触发这个事件的节点名字，事件类型有三个：</p><ol><li>ADDED</li><li>MODIFIED</li><li>DELETED</li></ol></li><li><p>当接收到一个ConfigChangeEvent事件后，会根据事件类型做对应的处理</p><ol><li>ADDED、MODIFIED：会根据节点内容去生成override://协议的URL，然后根据URL去生成Configurator， Configurator对象很重要，表示一个配置器，根据配置器可以去重写URL</li><li>DELETED：删除ServiceConfigurationListener内的所有的Configurator</li></ol></li><li><p>生成了Configurator后，调用notifyOverrides()方法对服务URL进行重写</p></li><li><p>注意，每次重写并不仅仅只是用到上面所生成的Configurator，每次重写要用到所有的Configurator，包括本服务的Configurator，也包括本应用的Configurator，也包括老版本管理台的Configurator，重写URL的逻辑如下：</p><ol><li><p>从exporter中获取目前已经导出了的服务URL-currentUrl</p></li><li><p>根据老版本管理台的Configurator重写服务URL</p></li><li><p>根据providerConfigurationListener中的Configurator重写服务URL</p></li><li><p>根据serviceConfigurationListeners中对应的服务的Configurator重写服务URL</p></li><li><p>如果重写之后newUrl和currentUrl相等，那么不需要做什么了</p></li><li><p>如果重写之后newUrl和currentUrl不相等，则需要进行<strong>服务重新导出</strong>：</p><ol><li>根据newUrl进行导出，注意，这里只是就是调用DubboProtocol的export，再次去启动NettyServer</li><li>对newUrl进行简化，简化为registeredProviderUrl</li><li>调用RegistryProtocol的unregister()方法，把当前服务之前的服务提供URL从注册中心删掉</li><li>调用RegistryProtocol的register()方法，把新的registeredProviderUrl注册到注册中心</li></ol></li></ol></li></ol><h4 id="服务监听器绑定源码" tabindex="-1"><a class="header-anchor" href="#服务监听器绑定源码" aria-hidden="true">#</a> 服务监听器绑定源码</h4><h5 id="registryprotocol-2" tabindex="-1"><a class="header-anchor" href="#registryprotocol-2" aria-hidden="true">#</a> RegistryProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Exporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> originInvoker<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 导出服务</span>
        <span class="token comment">// registry://   ---&gt; RegistryProtocol</span>
        <span class="token comment">// zookeeper://  ---&gt; ZookeeperRegistry</span>
        <span class="token comment">// dubbo://      ---&gt; DubboProtocol</span>


        <span class="token doc-comment comment">/**
         * 1.registry://xxx?xx=xx&amp;registry=zookeeper ---&gt; zookeeper://xxx?xx=xx     表示注册中心
         * 这里就是把registry替换成zookeeper
         * 2.示例：zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=
         * dubbo-demo-provider-application&amp;dubbo=2.0.2&amp;export=dubbo://192.168.40.17:20880/
         * org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=
         * dubbo-demo-provider-application&amp;bean.name=ServiceBean:org.apache.dubbo.demo.DemoService
         * &amp;bind.ip=192.168.40.17&amp;bind.port=20880&amp;deprecated=false&amp;dubbo=2.0.2&amp;
         * dynamic=true&amp;generic=false&amp;interface=org.apache.dubbo.demo.DemoService&amp;
         * logger=log4j&amp;methods=sayHello&amp;pid=27656&amp;release=2.7.0&amp;side=provider&amp;timeout=3000&amp;
         * timestamp=1590735956489&amp;logger=log4j&amp;pid=27656&amp;release=2.7.0&amp;timestamp=1590735956479
         */</span>
        <span class="token class-name">URL</span> registryUrl <span class="token operator">=</span> <span class="token function">getRegistryUrl</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 得到服务提供者url，表示服务提供者</span>
        <span class="token doc-comment comment">/**
         * 1.这里就是把之前export后面拼的dubbo服务url拿出来
         * 2.示例：dubbo://192.168.40.17:20880/org.apache.dubbo.demo.DemoService?anyhost=true&amp;application=
         * dubbo-demo-provider-application&amp;bean.name=ServiceBean:org.apache.dubbo.demo.DemoService&amp;
         * bind.ip=192.168.40.17&amp;bind.port=20880&amp;deprecated=false&amp;dubbo=2.0.2&amp;dynamic=true&amp;
         * generic=false&amp;interface=org.apache.dubbo.demo.DemoService&amp;logger=log4j&amp;methods=sayHello
         * &amp;pid=27656&amp;release=2.7.0&amp;side=provider&amp;timeout=3000&amp;timestamp=1590735956489
         * 3.服务导出最终的目的就是要把providerUrl存到注册中心上，只不过中间有一些其他操作
         */</span>
        <span class="token class-name">URL</span> providerUrl <span class="token operator">=</span> <span class="token function">getProviderUrl</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Subscribe the override data</span>
        <span class="token comment">// FIXME When the provider subscribes, it will affect the scene : a certain JVM exposes the service and call</span>
        <span class="token comment">//  the same service. Because the subscribed is cached key with the name of the service, it causes the</span>
        <span class="token comment">//  subscription information to cover.</span>

        <span class="token comment">// overrideSubscribeUrl是老版本的动态配置监听url，表示了需要监听的服务以及监听的类型（configurators， 这是老版本上的动态配置）</span>
        <span class="token comment">// 在服务提供者url的基础上，生成一个overrideSubscribeUrl，协议为provider://，增加参数category=configurators&amp;check=false</span>
        <span class="token keyword">final</span> <span class="token class-name">URL</span> overrideSubscribeUrl <span class="token operator">=</span> <span class="token function">getSubscribedOverrideUrl</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 一个overrideSubscribeUrl对应一个OverrideListener，用来监听变化事件，监听到overrideSubscribeUrl的变化后，</span>
        <span class="token comment">// OverrideListener就会根据变化进行相应处理，具体处理逻辑看OverrideListener的实现</span>
        <span class="token keyword">final</span> <span class="token class-name">OverrideListener</span> overrideSubscribeListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverrideListener</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">,</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        overrideListeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">,</span> overrideSubscribeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 在这个方法里会利用providerConfigurationListener和serviceConfigurationListener去重写providerUrl
         * providerConfigurationListener表示应用级别的动态配置监听器，providerConfigurationListener是RegistyProtocol的一个属性
         * serviceConfigurationListener表示服务级别的动态配置监听器，serviceConfigurationListener是在每暴露一个服务时就会生成一个
         * 这两个监听器都是新版本中的监听器
         * 新版本监听的zk路径是：
         * 服务： /dubbo/config/dubbo/org.apache.dubbo.demo.DemoService.configurators节点的内容
         * 应用： /dubbo/config/dubbo/dubbo-demo-provider-application.configurators节点的内容
         * 注意，要和配置中心的路径区分开来，配置中心的路径是：
         * 应用：/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService/dubbo.properties节点的内容
         * 全局：/dubbo/config/dubbo/dubbo.properties节点的内容
         */</span>
        providerUrl <span class="token operator">=</span> <span class="token function">overrideUrlWithConfig</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">,</span> overrideSubscribeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// export invoker</span>
        <span class="token comment">// 根据动态配置重写了providerUrl之后，就会调用DubboProtocol或HttpProtocol去进行导出服务了,</span>
        <span class="token comment">// 这里会启动netty，启动tomcat这些</span>
        <span class="token keyword">final</span> <span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> exporter <span class="token operator">=</span> <span class="token function">doLocalExport</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// url to registry</span>
        <span class="token comment">// 得到注册中心-ZookeeperRegistry</span>
        <span class="token keyword">final</span> <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 得到存入到注册中心去的providerUrl,会对服务提供者url中的参数进行简化，</span>
        <span class="token comment">// 因为有些参数存到注册中心是没有用的</span>
        <span class="token keyword">final</span> <span class="token class-name">URL</span> registeredProviderUrl <span class="token operator">=</span> <span class="token function">getRegisteredProviderUrl</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">,</span> registryUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将当前服务提供者Invoker，以及该服务对应的注册中心地址，以及简化后的服务url存入ProviderConsumerRegTable</span>
        <span class="token class-name">ProviderInvokerWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> providerInvokerWrapper <span class="token operator">=</span> <span class="token class-name">ProviderConsumerRegTable</span><span class="token punctuation">.</span><span class="token function">registerProvider</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span>
                registryUrl<span class="token punctuation">,</span> registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//to judge if we need to delay publish</span>
        <span class="token comment">//是否需要注册到注册中心</span>
        <span class="token keyword">boolean</span> register <span class="token operator">=</span> providerUrl<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">REGISTER_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>register<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 注册服务，把简化后的服务提供者url注册到registryUrl中去</span>
            <span class="token function">register</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">,</span> registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            providerInvokerWrapper<span class="token punctuation">.</span><span class="token function">setReg</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token doc-comment comment">/**
         * 针对老版本的动态配置，需要把overrideSubscribeListener绑定到overrideSubscribeUrl上去进行监听
         * 兼容老版本的配置修改，利用overrideSubscribeListener去监听旧版本的动态配置变化
         * 监听overrideSubscribeUrl   provider://192.168.40.17:20880/org.apache.dubbo.demo.DemoService?anyhost=true&amp;
         * application=dubbo-demo-annotation-provider&amp;bean.name=ServiceBean:org.apache.dubbo.demo.DemoService&amp;
         * bind.ip=192.168.40.17&amp;bind.port=20880&amp;category=configurators&amp;check=false&amp;deprecated=false&amp;dubbo=2.0.2&amp;
         * dynamic=true&amp;generic=false&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=416332&amp;
         * release=&amp;side=provider&amp;timestamp=1585318241955
         * 那么新版本的providerConfigurationListener和serviceConfigurationListener是在什么时候进行订阅的呢？在这两个类构造的时候
         * Deprecated! Subscribe to override rules in 2.6.x or before.
         * 老版本监听的zk路径是：/dubbo/org.apache.dubbo.demo.DemoService/configurators/override://0.0.0.0/org.apache.dubbo.demo.DemoService?category=configurators&amp;compatible_config=true&amp;dynamic=false&amp;enabled=true&amp;timeout=6000
         * 监听的是路径的内容，不是节点的内容
         */</span>
        registry<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">,</span> overrideSubscribeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>


        exporter<span class="token punctuation">.</span><span class="token function">setRegisterUrl</span><span class="token punctuation">(</span>registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        exporter<span class="token punctuation">.</span><span class="token function">setSubscribeUrl</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Ensure that a new exporter instance is returned every time export</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DestroyableExporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>exporter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token class-name">URL</span> <span class="token function">overrideUrlWithConfig</span><span class="token punctuation">(</span><span class="token class-name">URL</span> providerUrl<span class="token punctuation">,</span> <span class="token class-name">OverrideListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         <span class="token doc-comment comment">/**
         * 1.应用配置，providerConfigurationListener是在属性那里直接初始化好的，
         *  providerConfigurationListener会监听配置中心的应用配置信息变动
         * 这个是每一个应用只有一个providerConfigurationListener
         * 2.首先这里流程是：
         *   1.ProviderConfigurationListener通过构造函数调用父类AbstractConfiguratorListener
         *   #initWith方法
         *   2.在initWith方法中通过传进来的路径key,监听注册中心(常用的是zookeeper)
         *   key路径下的节点，会先从注册中心拿到当前配置然后转换成configurators
         * 3.接着这里调用overrideUrl，用前面的configurators生成新的providerUrl
         * 4.这里因为之前的providerUrl是经过@Service注解,配置中心文件(yml或properties)
         * 还有-D这种启动参数里的配置，组合成的一个URL。但是这个providerUrl还没有经过
         * 网页端的动态配置，所以这里需要重写下URL
         * 5.ServiceConfigurationListener同理，而且ServiceConfigurationListener代码顺序在后面
         * 所以很明显&#39;服务配置&#39;会覆盖&#39;应用配置&#39;
         */</span>
        providerUrl <span class="token operator">=</span> providerConfigurationListener<span class="token punctuation">.</span><span class="token function">overrideUrl</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 服务配置，new ServiceConfigurationListener的时候回初始化，ServiceConfigurationListener会监听配置中心的服务信息配置信息变动</span>
        <span class="token comment">// 这个是每个服务都会重新new一个ServiceConfigurationListener</span>
        <span class="token class-name">ServiceConfigurationListener</span> serviceConfigurationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConfigurationListener</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        serviceConfigurationListeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceConfigurationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceConfigurationListener<span class="token punctuation">.</span><span class="token function">overrideUrl</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token comment">//RegistryProtocol内部类</span>
     <span class="token keyword">public</span> <span class="token class-name">ProviderConfigurationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//订阅 应用名+&quot;.configurators&quot;  这里就是新版本ProviderConfigurationListener的监听路径</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWith</span><span class="token punctuation">(</span><span class="token class-name">ApplicationModel</span><span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">CONFIGURATORS_SUFFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="abstractconfiguratorlistener" tabindex="-1"><a class="header-anchor" href="#abstractconfiguratorlistener" aria-hidden="true">#</a> AbstractConfiguratorListener</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 在构造ProviderConfigurationListener和ServiceConfigurationListener都会调用到这个方法</span>
    <span class="token comment">// 完成Listener自身订阅到对应的应用和服务</span>
    <span class="token comment">// 订阅关系绑定完了之后，主动从动态配置中心获取一下对应的配置数据生成configurators，后面需要重写providerUrl</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这里拿到的就是注册中心，我们大部分情况用的是zookeeper</span>
        <span class="token class-name">DynamicConfiguration</span> dynamicConfiguration <span class="token operator">=</span> <span class="token class-name">DynamicConfiguration</span><span class="token punctuation">.</span><span class="token function">getDynamicConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加Listener,进行了订阅</span>
        dynamicConfiguration<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 从配置中心ConfigCenter获取属于当前应用的动态配置数据，从zk中拿到原始数据(主动从配置中心获取数据)</span>
        <span class="token class-name">String</span> rawConfig <span class="token operator">=</span> dynamicConfiguration<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">DynamicConfiguration</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_GROUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果存在应用配置信息则根据配置信息生成Configurator</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rawConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">genConfiguratorsFromRawRule</span><span class="token punctuation">(</span>rawConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">genConfiguratorsFromRawRule</span><span class="token punctuation">(</span><span class="token class-name">String</span> rawConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> parseSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// parseConfigurators will recognize app/service config automatically.</span>
            <span class="token comment">// 先把应用或服务配置转成url，再根据url生成对应的Configurator</span>
            configurators <span class="token operator">=</span> <span class="token class-name">Configurator</span><span class="token punctuation">.</span><span class="token function">toConfigurators</span><span class="token punctuation">(</span><span class="token class-name">ConfigParser</span><span class="token punctuation">.</span><span class="token function">parseConfigurators</span><span class="token punctuation">(</span>rawConfig<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>configurators<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to parse raw dynamic config and it will not take effect, the raw config is: &quot;</span> <span class="token operator">+</span>
                    rawConfig<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            parseSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> parseSuccess<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务监听器监听源码" tabindex="-1"><a class="header-anchor" href="#服务监听器监听源码" aria-hidden="true">#</a> 服务监听器监听源码</h4><h5 id="registryprotocol-3" tabindex="-1"><a class="header-anchor" href="#registryprotocol-3" aria-hidden="true">#</a> RegistryProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ProviderConfigurationListener</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfiguratorListener</span> <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token class-name">ProviderConfigurationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//订阅 应用名+&quot;.configurators&quot;  这里就是新版本ProviderConfigurationListener的监听路径</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWith</span><span class="token punctuation">(</span><span class="token class-name">ApplicationModel</span><span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">CONFIGURATORS_SUFFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Get existing configuration rule and override provider url before exporting.
         *
         * <span class="token keyword">@param</span> <span class="token parameter">providerUrl</span>
         * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>
         * <span class="token keyword">@return</span>
         */</span>
        <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">URL</span> <span class="token function">overrideUrl</span><span class="token punctuation">(</span><span class="token class-name">URL</span> providerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 通过configurators去修改/装配providerUrl</span>
            <span class="token keyword">return</span> <span class="token class-name">RegistryProtocol</span><span class="token punctuation">.</span><span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>configurators<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		
        
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">notifyOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            overrideListeners<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">OverrideListener</span><span class="token punctuation">)</span> listener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOverrideIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfigurationListener</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfiguratorListener</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">URL</span> providerUrl<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">OverrideListener</span> notifyListener<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ServiceConfigurationListener</span><span class="token punctuation">(</span><span class="token class-name">URL</span> providerUrl<span class="token punctuation">,</span> <span class="token class-name">OverrideListener</span> notifyListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>providerUrl <span class="token operator">=</span> providerUrl<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>notifyListener <span class="token operator">=</span> notifyListener<span class="token punctuation">;</span>
            <span class="token comment">// 订阅 服务接口名+group+version+&quot;.configurators&quot;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWith</span><span class="token punctuation">(</span><span class="token class-name">DynamicConfiguration</span><span class="token punctuation">.</span><span class="token function">getRuleKey</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">CONFIGURATORS_SUFFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">URL</span> <span class="token function">overrideUrl</span><span class="token punctuation">(</span><span class="token class-name">URL</span> providerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">RegistryProtocol</span><span class="token punctuation">.</span><span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>configurators<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		
        <span class="token comment">//这里是监听入口</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">notifyOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            notifyListener<span class="token punctuation">.</span><span class="token function">doOverrideIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doOverrideIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>originInvoker <span class="token keyword">instanceof</span> <span class="token class-name">InvokerDelegate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                invoker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InvokerDelegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                invoker <span class="token operator">=</span> originInvoker<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//The origin invoker 当前服务的原始服务提供者url，没有经过任何动态配置改变的URL</span>
            <span class="token class-name">URL</span> originUrl <span class="token operator">=</span> <span class="token class-name">RegistryProtocol</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProviderUrl</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> exporter <span class="token operator">=</span> bounds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>exporter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;error state, exporter should not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//The current, may have been merged many times，事件触发之前，当前服务被导出的url</span>
            <span class="token class-name">URL</span> currentUrl <span class="token operator">=</span> exporter<span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//根据configurators修改url，configurators是全量的，并不是某个新增的或删除的，</span>
            <span class="token comment">// 所以是基于原始的url进行修改，并不是基于currentUrl，这里是老版本的configurators</span>
            <span class="token comment">//Merged with this configuration</span>
            <span class="token class-name">URL</span> newUrl <span class="token operator">=</span> <span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>configurators<span class="token punctuation">,</span> originUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 这是新版本的configurators</span>
            newUrl <span class="token operator">=</span> <span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>providerConfigurationListener<span class="token punctuation">.</span><span class="token function">getConfigurators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newUrl <span class="token operator">=</span> <span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>serviceConfigurationListeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>originUrl<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getConfigurators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 修改过的url如果和目前的url不相同，则重新按newUrl导出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentUrl<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RegistryProtocol</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reExport</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;exported provider url changed, origin url: &quot;</span> <span class="token operator">+</span> originUrl <span class="token operator">+</span>
                        <span class="token string">&quot;, old export url: &quot;</span> <span class="token operator">+</span> currentUrl <span class="token operator">+</span> <span class="token string">&quot;, new export url: &quot;</span> <span class="token operator">+</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

		<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">reExport</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> originInvoker<span class="token punctuation">,</span> <span class="token class-name">URL</span> newInvokerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 根据newInvokerUrl进行导出</span>
        <span class="token comment">// update local exporter</span>
        <span class="token class-name">ExporterChangeableWrapper</span> exporter <span class="token operator">=</span> <span class="token function">doChangeLocalExport</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> newInvokerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取准确的ProviderUrl</span>
        <span class="token comment">// update registry</span>
        <span class="token class-name">URL</span> registryUrl <span class="token operator">=</span> <span class="token function">getRegistryUrl</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 对于一个服务提供者url，在注册到注册中心时，会先进行简化</span>
        <span class="token keyword">final</span> <span class="token class-name">URL</span> registeredProviderUrl <span class="token operator">=</span> <span class="token function">getRegisteredProviderUrl</span><span class="token punctuation">(</span>newInvokerUrl<span class="token punctuation">,</span> registryUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//decide if we need to re-publish</span>
        <span class="token comment">// 根据getServiceKey获取ProviderInvokerWrapper</span>
        <span class="token class-name">ProviderInvokerWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> providerInvokerWrapper <span class="token operator">=</span> <span class="token class-name">ProviderConsumerRegTable</span><span class="token punctuation">.</span><span class="token function">getProviderWrapper</span><span class="token punctuation">(</span>registeredProviderUrl<span class="token punctuation">,</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成一个新的ProviderInvokerWrapper</span>
        <span class="token class-name">ProviderInvokerWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> newProviderInvokerWrapper <span class="token operator">=</span> <span class="token class-name">ProviderConsumerRegTable</span><span class="token punctuation">.</span><span class="token function">registerProvider</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> registryUrl<span class="token punctuation">,</span> registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * Only if the new url going to Registry is different with the previous one should we do unregister and register.
         * 如果新的服务提供者url简化后的url和这个服务之前的服务提供者url简化后的url不相等，则需要把新的简化后的服务提供者url注册到注册中心去
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>providerInvokerWrapper<span class="token punctuation">.</span><span class="token function">isReg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registeredProviderUrl<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>providerInvokerWrapper<span class="token punctuation">.</span><span class="token function">getProviderUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unregister</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">,</span> providerInvokerWrapper<span class="token punctuation">.</span><span class="token function">getProviderUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">register</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">,</span> registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newProviderInvokerWrapper<span class="token punctuation">.</span><span class="token function">setReg</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        exporter<span class="token punctuation">.</span><span class="token function">setRegisterUrl</span><span class="token punctuation">(</span>registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ExporterChangeableWrapper</span> <span class="token function">doChangeLocalExport</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> originInvoker<span class="token punctuation">,</span> <span class="token class-name">URL</span> newInvokerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> exporter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ExporterChangeableWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> bounds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exporter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;error state, exporter should not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 到这里才能真正明白，为什么需要InvokerDelegate</span>
            <span class="token comment">// InvokerDelegate表示一个调用者，由invoker+url构成，invoker不变，url可变</span>
            <span class="token keyword">final</span> <span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> invokerDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerDelegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> newInvokerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里最后又会走到DubboProtocol#export 那里的逻辑,服务重新导出前面见过了</span>
            exporter<span class="token punctuation">.</span><span class="token function">setExporter</span><span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>invokerDelegate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> exporter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Q:这里引出一个问题，配置改变之后Netty，tomcat需要重启吗？</p><p>A:不需要，为什么？前面的DubboProtocol#export 那里的reset逻辑讲过</p><h4 id="服务重新导出源码" tabindex="-1"><a class="header-anchor" href="#服务重新导出源码" aria-hidden="true">#</a> 服务重新导出源码</h4><h5 id="dubboprotocol-1" tabindex="-1"><a class="header-anchor" href="#dubboprotocol-1" aria-hidden="true">#</a> DubboProtocol</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Exporter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token class-name">Invoker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> invoker<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RpcException</span> <span class="token punctuation">{</span>
	   <span class="token comment">// ....省略</span>

        <span class="token comment">// 开启NettyServer</span>
        <span class="token comment">// 请求---&gt;invocation---&gt;服务key---&gt;exporterMap.get(key)---&gt;exporter---&gt;invoker---&gt;invoker.invoke(invocation)--&gt;执行服务</span>
        <span class="token function">openServer</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 特殊的一些序列化机制，比如kryo提供了注册机制来注册类，提高序列化和反序列化的速度</span>
        <span class="token function">optimizeSerialization</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> exporter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	
	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">openServer</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// find server.</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得ip地址和port， 192.168.40.17:20880</span>

        <span class="token comment">// NettyClient, NettyServer</span>
        <span class="token comment">//client can export a service which&#39;s only for server to invoke</span>
        <span class="token keyword">boolean</span> isServer <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">IS_SERVER_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 缓存Server对象</span>
            <span class="token class-name">ExchangeServer</span> server <span class="token operator">=</span> serverMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// DCL，Double Check Lock</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    server <span class="token operator">=</span> serverMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 创建Server，并进行缓存</span>
                        serverMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">createServer</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// server supports reset, use together with override</span>
                <span class="token comment">// 服务重新导出时，就会走这里  这里会调用HeaderExchangeServer#reset</span>
                server<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="headerexchangeserver" tabindex="-1"><a class="header-anchor" href="#headerexchangeserver" aria-hidden="true">#</a> HeaderExchangeServer</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//启动netty的时候会调用这个</span>
    <span class="token keyword">public</span> <span class="token class-name">HeaderExchangeServer</span><span class="token punctuation">(</span><span class="token class-name">Server</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> <span class="token string">&quot;server == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>server <span class="token operator">=</span> server<span class="token punctuation">;</span>
        <span class="token comment">// 启动定义关闭Channel(socket)的Task</span>
        <span class="token function">startIdleCheckTask</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startIdleCheckTask</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>server<span class="token punctuation">.</span><span class="token function">canHandleIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 底层NettyServer自己有心跳机制，那么上层的ExchangeServer就不用开启心跳任务了</span>
            <span class="token class-name">AbstractTimerTask<span class="token punctuation">.</span>ChannelProvider</span> cp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span><span class="token class-name">HeaderExchangeServer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getChannels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> idleTimeout <span class="token operator">=</span> <span class="token function">getIdleTimeout</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> idleTimeoutTick <span class="token operator">=</span> <span class="token function">calculateLeastDuration</span><span class="token punctuation">(</span>idleTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 定义关闭Channel的Task</span>
            <span class="token class-name">CloseTimerTask</span> closeTimerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloseTimerTask</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> idleTimeoutTick<span class="token punctuation">,</span> idleTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>closeTimerTask <span class="token operator">=</span> closeTimerTask<span class="token punctuation">;</span>

            <span class="token comment">// init task and start timer.</span>
            <span class="token comment">// 定时运行closeTimerTask</span>
            <span class="token constant">IDLE_CHECK_TIMER</span><span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span>closeTimerTask<span class="token punctuation">,</span> idleTimeoutTick<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        server<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> currHeartbeat <span class="token operator">=</span> <span class="token function">getHeartbeat</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> currIdleTimeout <span class="token operator">=</span> <span class="token function">getIdleTimeout</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> heartbeat <span class="token operator">=</span> <span class="token function">getHeartbeat</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> idleTimeout <span class="token operator">=</span> <span class="token function">getIdleTimeout</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * 1.动态改配置，重新导出服务时不需要重新启动netty,tomcat等等
             * 2.这里直接关闭那个服务的channel任务，然后根据新的url重启一个任务就行了
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currHeartbeat <span class="token operator">!=</span> heartbeat <span class="token operator">||</span> currIdleTimeout <span class="token operator">!=</span> idleTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">cancelCloseTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">startIdleCheckTask</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="closetimertask" tabindex="-1"><a class="header-anchor" href="#closetimertask" aria-hidden="true">#</a> CloseTimerTask</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Long</span> lastRead <span class="token operator">=</span> <span class="token function">lastRead</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> lastWrite <span class="token operator">=</span> <span class="token function">lastWrite</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> now <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// check ping &amp; pong at server</span>
            <span class="token comment">// 表示Server端有多长时间没有读到过数据或写出过数据了，说白就是超时了</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lastRead <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> lastRead <span class="token operator">&gt;</span> idleTimeout<span class="token punctuation">)</span>
                    <span class="token operator">||</span> <span class="token punctuation">(</span>lastWrite <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> now <span class="token operator">-</span> lastWrite <span class="token operator">&gt;</span> idleTimeout<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Close channel &quot;</span> <span class="token operator">+</span> channel <span class="token operator">+</span> <span class="token string">&quot;, because idleCheck timeout: &quot;</span>
                        <span class="token operator">+</span> idleTimeout <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Exception when close remote channel &quot;</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务导出源码流程总结" tabindex="-1"><a class="header-anchor" href="#服务导出源码流程总结" aria-hidden="true">#</a> 服务导出源码流程总结</h3><ol><li><p>ServiceBean.export()方法是导出的入口方法，会执行ServiceConfig.export()方法完成服务导出，导出完了之后会发布一个Spring事件ServiceBeanExportedEvent</p></li><li><p>在ServiceConfig.export()方法中会先调用checkAndUpdateSubConfigs()，这个方法主要完成AbstractConfig的参数刷新(从配置中心获取参数等等)，AbstractConfig是指ApplicationConfig、ProtocolConfig、ServiceConfig等等，刷新完后会检查stub、local、mock等参数是否配置正确</p></li><li><p>参数刷新和检查完成了之后，就会开始导出服务，如果配置了延迟导出，那么则按指定的时间利用ScheduledExecutorService来进行延迟导出</p></li><li><p>否则调用doExport()进行服务导出</p></li><li><p>继续调用doExportUrls()进行服务导出</p></li><li><p>首先通过loadRegistries()方法获得所配置的注册中心的URL，可能配了多个配置中心，那么当前所导出的服务需要注册到每个配置中心去，这里，注册中心的是以URL的方式来表示的，使用的是什么注册中心、注册中心的地址和端口，给注册中心所配置的参数等等，都会存在在URL上，此URL以**registry://**开始</p></li><li><p>获得到注册中心的registryURLs之后，就会遍历当前服务所有的ProtocolConfig，调用doExportUrlsFor1Protocol(protocolConfig, registryURLs);方法把当前服务按每个协议每个注册中心分别进行导出</p></li><li><p>在doExportUrlsFor1Protocol()方法中，会先构造一个服务URL，包括</p><ol><li>服务的协议dubbo://,</li><li>服务的IP和PORT，如果指定了就取指定的，没有指定IP就获取服务器上网卡的IP，</li><li>以及服务的PATH，如果没有指定PATH参数，则取接口名</li><li>以及服务的参数，参数包括服务的参数，服务中某个方法的参数</li><li>最终得到的URL类似： dubbo://192.168.1.110:20880/com.tuling.DemoService?timeout=3000&amp;&amp;sayHello.loadbalance=random</li></ol></li><li><p>得到服务的URL之后，会把服务URL作为一个参数添加到registryURL中去，然后把registryURL、服务的接口、当前服务实现类ref生成一个Invoker代理对象，再把这个代理对象和当前ServiceConfig对象包装成一个DelegateProviderMetaDataInvoker对象，DelegateProviderMetaDataInvoker就表示了完整的一个服务</p></li><li><p>接下来就会使用Protocol去export导出服务了，导出之后将得到一个Exporter对象（该Exporter对象，可以理解为主要可以用来卸载（unexport）服务，什么时候会卸载服务？在优雅关闭Dubbo应用的时候）</p></li><li><p>接下来我们来详细看看Protocol是怎么导出服务的？</p></li><li><p>但调用<strong>protocol</strong>.export(wrapperInvoker)方法时，因为protocol是Protocol接口的一个Adaptive对象，所以此时会根据wrapperInvoker的genUrl方法得到一个url，根据此url的协议找到对应的扩展点，此时扩展点就是RegistryProtocol，但是，因为Protocol接口有两个包装类，一个是ProtocolFilterWrapper、ProtocolListenerWrapper，所以实际上在调用export方法时，会经过这两个包装类的export方法，但是在这两个包装类的export方法中都会Registry协议进行了判断，不会做过多处理，所以最终会直接调用到RegistryProtocol的export(Invoker&lt;T&gt; originInvoker)方法</p></li><li><p>在RegistryProtocol的export(Invoker&lt;T&gt; originInvoker)方法中，主要完成了以下几件事情：</p><ol><li><p>生成监听器，监听动态配置中心此服务的参数数据的变化，一旦监听到变化，则重写服务URL，并且在服务导出时先重写一次服务URL</p></li><li><p>拿到重写之后的URL之后，调用doLocalExport()进行服务导出，在这个方法中就会调用DubboProtocol的export方法去导出服务了，导出成功后将得到一个ExporterChangeableWrapper</p><ol><li>在DubboProtocol的export方法中主要要做的事情就是启动NettyServer，并且设置一系列的RequestHandler，以便在接收到请求时能依次被这些RequestHandler所处理</li><li>这些RequestHandler在上文已经整理过了</li></ol></li><li><p>从originInvoker中获取注册中心的实现类，比如ZookeeperRegistry</p></li><li><p>将重写后的服务URL进行简化，把不用存到注册中心去的参数去除</p></li><li><p>把简化后的服务URL调用ZookeeperRegistry.registry()方法注册到注册中心去</p></li><li><p>最后将ExporterChangeableWrapper封装为DestroyableExporter对象返回，完成服务导出</p></li></ol></li></ol><h3 id="exporter架构" tabindex="-1"><a class="header-anchor" href="#exporter架构" aria-hidden="true">#</a> Exporter架构</h3><p><img src="`+k+'" alt="Alt text"></p><p>一个服务导出成功后，会生成对应的Exporter：</p><ol><li>DestroyableExporter：Exporter的最外层包装类，这个类的主要作用是可以用来unexporter对应的服务</li><li>ExporterChangeableWrapper：这个类主要负责在unexport对应服务之前，把服务URL从注册中心中移除，把该服务对应的动态配置监听器移除</li><li>ListenerExporterWrapper：这个类主要负责在unexport对应服务之后，把服务导出监听器移除</li><li>DubboExporter：这个类中保存了对应服务的Invoker对象，和当前服务的唯一标志，当NettyServer接收到请求后，会根据请求中的服务信息，找到服务对应的DubboExporter对象，然后从对象中得到Invoker对象</li></ol><h3 id="服务端invoker架构" tabindex="-1"><a class="header-anchor" href="#服务端invoker架构" aria-hidden="true">#</a> 服务端Invoker架构</h3><p><img src="'+d+'" alt="Alt text"></p><ol><li>ProtocolFilterWrapper$CallbackRegistrationInvoker：会去调用下层Invoker，下层Invoker执行完了之后，会遍历过滤器，查看是否有过滤器实现了ListenableFilter接口，如果有，则回调对应的onResponse方法，比如TimeoutFilter，当调用完下层Invoker之后，就会计算服务的执行时间</li><li>ProtocolFilterWrapper$1：ProtocolFilterWrapper中的过滤器组成的Invoker，利用该Invoker，可以执行服务端的过滤器，执行完过滤器之后，调用下层Invoker</li><li>RegistryProtocol$InvokerDelegate：服务的的委托类，里面包含了DelegateProviderMetaDataInvoker对象和服务对应的providerUrl，执行时直接调用下层Invoker</li><li>DelegateProviderMetaDataInvoker：服务的的委托类，里面包含了AbstractProxyInvoker对象和ServiceConfig对象，执行时直接调用下层Invoker</li><li>AbstractProxyInvoker：服务接口的代理类，绑定了对应的实现类，执行时会利用反射调用服务实现类实例的具体方法，并得到结果</li></ol><h3 id="服务端请求执行流程-后续细讲" tabindex="-1"><a class="header-anchor" href="#服务端请求执行流程-后续细讲" aria-hidden="true">#</a> 服务端请求执行流程（后续细讲）</h3><p><img src="'+v+'" alt="Alt text"></p>',101);function E(R,L){const a=o("ExternalLinkIcon");return c(),i("div",null,[b,g,n("p",null,[n("a",f,[s("https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497"),t(a)]),s("（密码：kyys） 《Dubbo笔记》")]),y,n("ol",null,[h,w,C,n("li",null,[n("a",x,[s("http://192.168.1.112:80/com.tuling.DemoService"),t(a)]),s("表示一个服务，此时的服务增加了机器IP和Port，表示远程机器可以访问这个URL来使用com.tuling.DemoService这个服务")]),n("li",null,[n("a",S,[s("http://192.168.1.112:80/com.tuling.DemoService"),t(a)]),s("?timeout=3000&version=1.0.1&application=dubbo-demo-provider-application表示一个服务，此时的服务是拥有参数的，比如超时时间、版本号、所属应用")])]),U])}const I=e(m,[["render",E],["__file","05.DubboyuanmaxilieV1-Dubbodiwujie-fuwudaochuyuanmajiexi.html.vue"]]);export{I as default};
