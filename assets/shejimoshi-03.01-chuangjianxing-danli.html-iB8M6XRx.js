const l=JSON.parse('{"key":"v-20065f07","path":"/JavaYouth/design_patterns/shejimoshi-03.01-chuangjianxing-danli.html","title":"设计模式-03.01-创建型-单例","lang":"zh-CN","frontmatter":{"title":"设计模式-03.01-创建型-单例","tags":["设计模式","单例"],"categories":["设计模式","03.创建型"],"keywords":"设计模式，单例","description":"详解了单例设计模式。","cover":"https://npm.elemecdn.com/lql_static@latest/logo/design_patterns.jpg","abbrlink":"b5a1ed4a","date":"2021-06-26T21:51:58.000Z"},"headers":[{"level":3,"title":"创建型","slug":"创建型","link":"#创建型","children":[]},{"level":3,"title":"结构型","slug":"结构型","link":"#结构型","children":[]},{"level":3,"title":"行为型","slug":"行为型","link":"#行为型","children":[]},{"level":2,"title":"为什么要使用单例？","slug":"为什么要使用单例","link":"#为什么要使用单例","children":[{"level":3,"title":"实战案例一：处理资源访问冲突","slug":"实战案例一-处理资源访问冲突","link":"#实战案例一-处理资源访问冲突","children":[]},{"level":3,"title":"实战案例二：表示全局唯一类","slug":"实战案例二-表示全局唯一类","link":"#实战案例二-表示全局唯一类","children":[]}]},{"level":2,"title":"如何实现一个单例？","slug":"如何实现一个单例","link":"#如何实现一个单例","children":[{"level":3,"title":"饿汉式(静态变量)","slug":"饿汉式-静态变量","link":"#饿汉式-静态变量","children":[]},{"level":3,"title":"饿汉式(静态代码块)","slug":"饿汉式-静态代码块","link":"#饿汉式-静态代码块","children":[]},{"level":3,"title":"懒汉式(线程安全，同步方法)","slug":"懒汉式-线程安全-同步方法","link":"#懒汉式-线程安全-同步方法","children":[]},{"level":3,"title":"懒汉式(线程安全，同步代码块)","slug":"懒汉式-线程安全-同步代码块","link":"#懒汉式-线程安全-同步代码块","children":[]},{"level":3,"title":"懒汉式(线程不安全)","slug":"懒汉式-线程不安全","link":"#懒汉式-线程不安全","children":[]},{"level":3,"title":"双重检测","slug":"双重检测","link":"#双重检测","children":[]},{"level":3,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]}]},{"level":2,"title":"单例存在哪些问题?","slug":"单例存在哪些问题","link":"#单例存在哪些问题","children":[{"level":3,"title":"单例对 OOP 特性的支持不友好","slug":"单例对-oop-特性的支持不友好","link":"#单例对-oop-特性的支持不友好","children":[]},{"level":3,"title":"单例会隐藏类之间的依赖关系","slug":"单例会隐藏类之间的依赖关系","link":"#单例会隐藏类之间的依赖关系","children":[]},{"level":3,"title":"单例对代码的扩展性不友好","slug":"单例对代码的扩展性不友好","link":"#单例对代码的扩展性不友好","children":[]},{"level":3,"title":"单例对代码的可测试性不友好","slug":"单例对代码的可测试性不友好","link":"#单例对代码的可测试性不友好","children":[]},{"level":3,"title":"单例不支持有参数的构造函数","slug":"单例不支持有参数的构造函数","link":"#单例不支持有参数的构造函数","children":[]}]},{"level":2,"title":"有何替代解决方案？","slug":"有何替代解决方案","link":"#有何替代解决方案","children":[]},{"level":2,"title":"如何理解单例模式中的唯一性？","slug":"如何理解单例模式中的唯一性","link":"#如何理解单例模式中的唯一性","children":[]},{"level":2,"title":"如何实现线程唯一的单例？","slug":"如何实现线程唯一的单例","link":"#如何实现线程唯一的单例","children":[]},{"level":2,"title":"如何实现集群环境下的单例？","slug":"如何实现集群环境下的单例","link":"#如何实现集群环境下的单例","children":[]},{"level":2,"title":"如何实现一个多例模式？","slug":"如何实现一个多例模式","link":"#如何实现一个多例模式","children":[]}],"git":{},"filePathRelative":"JavaYouth/design_patterns/设计模式-03.01-创建型-单例.md"}');export{l as data};
