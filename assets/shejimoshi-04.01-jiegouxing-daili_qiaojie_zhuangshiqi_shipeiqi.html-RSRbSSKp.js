const l=JSON.parse('{"key":"v-29a8d02e","path":"/JavaYouth/design_patterns/shejimoshi-04.01-jiegouxing-daili_qiaojie_zhuangshiqi_shipeiqi.html","title":"设计模式-04.01-结构型-代理&桥接&装饰器&适配器","lang":"zh-CN","frontmatter":{"title":"设计模式-04.01-结构型-代理&桥接&装饰器&适配器","tags":["设计模式","代理模式","桥接模式","装饰器模式","适配器模式"],"categories":["设计模式","04.结构型"],"keywords":"设计模式，代理模式，桥接模式，装饰器模式，适配器模式","description":"对代理模式，桥接模式，装饰器模式，适配器模式这4个模式进行了比较详细的讲述。其实学习设计模式主要是为了后序看源码","cover":"https://npm.elemecdn.com/lql_static@latest/logo/design_patterns.jpg","abbrlink":"926a065c","date":"2021-07-04T00:51:58.000Z"},"headers":[{"level":2,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]},{"level":2,"title":"cglib代理","slug":"cglib代理","link":"#cglib代理","children":[]},{"level":2,"title":"代理模式的原理解析","slug":"代理模式的原理解析","link":"#代理模式的原理解析","children":[]},{"level":2,"title":"动态代理的原理解析","slug":"动态代理的原理解析","link":"#动态代理的原理解析","children":[]},{"level":2,"title":"代理模式的应用场景","slug":"代理模式的应用场景","link":"#代理模式的应用场景","children":[{"level":3,"title":"业务系统的非功能性需求开发","slug":"业务系统的非功能性需求开发","link":"#业务系统的非功能性需求开发","children":[]},{"level":3,"title":"代理模式在 RPC、缓存中的应用","slug":"代理模式在-rpc、缓存中的应用","link":"#代理模式在-rpc、缓存中的应用","children":[]},{"level":3,"title":"代理模式在缓存中的应用","slug":"代理模式在缓存中的应用","link":"#代理模式在缓存中的应用","children":[]}]},{"level":2,"title":"Demo案例-手机操作问题","slug":"demo案例-手机操作问题","link":"#demo案例-手机操作问题","children":[{"level":3,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":3,"title":"传统方案解决手机操作问题分析","slug":"传统方案解决手机操作问题分析","link":"#传统方案解决手机操作问题分析","children":[]},{"level":3,"title":"使用桥接模式的代码","slug":"使用桥接模式的代码","link":"#使用桥接模式的代码","children":[]}]},{"level":2,"title":"桥接模式的原理解析","slug":"桥接模式的原理解析","link":"#桥接模式的原理解析","children":[]},{"level":2,"title":"桥接模式的应用举例","slug":"桥接模式的应用举例","link":"#桥接模式的应用举例","children":[]},{"level":2,"title":"桥接模式的注意事项和细节","slug":"桥接模式的注意事项和细节","link":"#桥接模式的注意事项和细节","children":[]},{"level":2,"title":"Demo案例-咖啡订单项目","slug":"demo案例-咖啡订单项目","link":"#demo案例-咖啡订单项目","children":[{"level":3,"title":"星巴克咖啡订单项目","slug":"星巴克咖啡订单项目","link":"#星巴克咖啡订单项目","children":[]},{"level":3,"title":"方案一","slug":"方案一","link":"#方案一","children":[]},{"level":3,"title":"方案二","slug":"方案二","link":"#方案二","children":[]},{"level":3,"title":"装饰器模式代码","slug":"装饰器模式代码","link":"#装饰器模式代码","children":[]}]},{"level":2,"title":"装饰者模式原理","slug":"装饰者模式原理","link":"#装饰者模式原理","children":[]},{"level":2,"title":"Java IO 类的“奇怪”用法","slug":"java-io-类的-奇怪-用法","link":"#java-io-类的-奇怪-用法","children":[]},{"level":2,"title":"基于继承的设计方案","slug":"基于继承的设计方案","link":"#基于继承的设计方案","children":[]},{"level":2,"title":"基于装饰器模式的设计方案","slug":"基于装饰器模式的设计方案","link":"#基于装饰器模式的设计方案","children":[]},{"level":2,"title":"Demo案例-充电器","slug":"demo案例-充电器","link":"#demo案例-充电器","children":[{"level":3,"title":"类适配器代码实现","slug":"类适配器代码实现","link":"#类适配器代码实现","children":[]},{"level":3,"title":"对象适配器实现","slug":"对象适配器实现","link":"#对象适配器实现","children":[]}]},{"level":2,"title":"适配器模式的原理与实现","slug":"适配器模式的原理与实现","link":"#适配器模式的原理与实现","children":[]},{"level":2,"title":"适配器模式应用场景总结","slug":"适配器模式应用场景总结","link":"#适配器模式应用场景总结","children":[{"level":3,"title":"封装有缺陷的接口设计","slug":"封装有缺陷的接口设计","link":"#封装有缺陷的接口设计","children":[]},{"level":3,"title":"统一多个类的接口设计","slug":"统一多个类的接口设计","link":"#统一多个类的接口设计","children":[]},{"level":3,"title":"替换依赖的外部系统","slug":"替换依赖的外部系统","link":"#替换依赖的外部系统","children":[]},{"level":3,"title":"兼容老版本接口","slug":"兼容老版本接口","link":"#兼容老版本接口","children":[]},{"level":3,"title":"适配不同格式的数据","slug":"适配不同格式的数据","link":"#适配不同格式的数据","children":[]},{"level":3,"title":"剖析适配器模式在 Java 日志中的应用","slug":"剖析适配器模式在-java-日志中的应用","link":"#剖析适配器模式在-java-日志中的应用","children":[]}]},{"level":2,"title":"代理、桥接、装饰器、适配器 4 种设计模式的区别","slug":"代理、桥接、装饰器、适配器-4-种设计模式的区别","link":"#代理、桥接、装饰器、适配器-4-种设计模式的区别","children":[]}],"git":{},"filePathRelative":"JavaYouth/design_patterns/设计模式-04.01-结构型-代理&桥接&装饰器&适配器.md"}');export{l as data};
