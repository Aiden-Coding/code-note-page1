import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-GjP6hEVt.js";const i="/code-note-page1/assets/image-ysHJ-mr4.png",u="/code-note-page1/assets/image-1-4XfNg4w4.png",r="/code-note-page1/assets/image-2-daWQKh6J.png",k="/code-note-page1/assets/image-3-46KFQ1gv.png",d="/code-note-page1/assets/image-4-nFbHFTdV.png",v={},m=e('<h1 id="dubbo源码" tabindex="-1"><a class="header-anchor" href="#dubbo源码" aria-hidden="true">#</a> Dubbo源码</h1><h2 id="第一节-dubbo框架介绍与手写模拟dubbo" tabindex="-1"><a class="header-anchor" href="#第一节-dubbo框架介绍与手写模拟dubbo" aria-hidden="true">#</a> 第一节: Dubbo框架介绍与手写模拟Dubbo</h2><h3 id="笔记更新地址" tabindex="-1"><a class="header-anchor" href="#笔记更新地址" aria-hidden="true">#</a> 笔记更新地址：</h3>',3),b={href:"https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497?#",target:"_blank",rel:"noopener noreferrer"},g=n("h3",{id:"手写代码地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#手写代码地址","aria-hidden":"true"},"#"),s(" 手写代码地址")],-1),h={href:"https://gitee.com/archguide/rpc",target:"_blank",rel:"noopener noreferrer"},y={href:"https://gitee.com/archguide/rpc.git",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"什么是rpc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是rpc","aria-hidden":"true"},"#"),s(" 什么是RPC")],-1),w=n("p",null,[n("strong",null,"维基百科"),s("是这么定义RPC的：")],-1),S={href:"https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"，远程过程调用",-1),_={href:"https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%B5%A1%E5%82%B3%E8%BC%B8%E5%8D%94%E8%AD%B0",target:"_blank",rel:"noopener noreferrer"},D={href:"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4",target:"_blank",rel:"noopener noreferrer"},j={href:"https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"发送请求-接受回应",-1),R={href:"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},A=n("strong",null,"远程调用",-1),E=n("strong",null,"远程方法调用",-1),H={href:"https://zh.wikipedia.org/wiki/Java_RMI",target:"_blank",rel:"noopener noreferrer"},z=e('<p>所以，对于Java程序员而言，RPC就是<strong>远程方法调用</strong>。</p><p><strong>远程方法调用</strong>和<strong>本地方法调用</strong>是相对的两个概念，本地方法调用指的是进程内部的方法调用，而远程方法调用指的是两个进程内的方法相互调用。</p><p>如果实现远程方法调用，基本的就是通过网络，通过传输数据来进行调用。</p><p>所以就有了：</p><ol><li>RPC over Http：基于Http协议来传输数据</li><li>PRC over Tcp：基于Tcp协议来传输数据</li></ol><p>对于所传输的数据，可以交由RPC的双方来协商定义，但基本都会包括：</p><ol><li>调用的是哪个类或接口</li><li>调用的是哪个方法，方法名和方法参数类型（考虑方法重载）</li><li>调用方法的入参</li></ol><p>所以，我们其实可以看到RPC的自定义性是很高的，各个公司内部都可以实现自己的一套RPC框架，而<strong>Dubbo</strong>就是阿里所开源出来的一套RPC框架。</p><h3 id="什么是dubbo" tabindex="-1"><a class="header-anchor" href="#什么是dubbo" aria-hidden="true">#</a> 什么是Dubbo</h3>',9),P={href:"http://dubbo.apache.org/zh/",target:"_blank",rel:"noopener noreferrer"},L=e("<p>目前，官网上是这么介绍的：<strong>Apache Dubbo 是一款高性能、轻量级的开源 Java服务框架</strong></p><p>在几个月前，官网的介绍是：<strong>Apache Dubbo 是一款高性能、轻量级的开源 JavaRPC框架</strong></p><p>为什么会将<strong>RPC</strong>改为<strong>服务</strong>？</p><p>Dubbo一开始的定位就是RPC，专注于两个服务之间的调用。但随着微服务的盛行，除开<strong>服务调用</strong>之外，Dubbo也在逐步的涉猎服务治理、服务监控、服务网关等等，所以现在的Dubbo目标已经不止是RPC框架了，而是和Spring Cloud类似想成为了一个<strong>服务</strong>框架。</p>",4),B={href:"https://github.com/apache/dubbo-proxy",target:"_blank",rel:"noopener noreferrer"},T=e('<h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h3><p><img src="'+i+'" alt="Alt text"></p><h3 id="开源rpc框架对比" tabindex="-1"><a class="header-anchor" href="#开源rpc框架对比" aria-hidden="true">#</a> 开源RPC框架对比</h3><table><thead><tr><th>功能</th><th>Hessian</th><th>Montan</th><th>rpcx</th><th>gRPC</th><th>Thrift</th><th>Dubbo</th><th>Dubbox</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>开发语言</td><td>跨语言</td><td>Java</td><td>Go</td><td>跨语言</td><td>跨语言</td><td>Java</td><td>Java</td><td>Java</td></tr><tr><td>分布式(服务治理)</td><td>×</td><td>√</td><td>√</td><td>×</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>多序列化框架支持</td><td>hessian</td><td>√(支持Hessian2、Json,可扩展)</td><td>√</td><td>× 只支持protobuf)</td><td>×(thrift格式)</td><td>√</td><td>√</td><td>√</td></tr><tr><td>多种注册中心</td><td>×</td><td>√</td><td>√</td><td>×</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>管理中心</td><td>×</td><td>√</td><td>√</td><td>×</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>跨编程语言</td><td>√</td><td>×(支持php client和C server)</td><td>×</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>支持REST</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>关注度</td><td>低</td><td>中</td><td>低</td><td>中</td><td>中</td><td>中</td><td>高</td><td>中</td></tr><tr><td>上手难度</td><td>低</td><td>低</td><td>中</td><td>中</td><td>中</td><td>低</td><td>低</td><td>中</td></tr><tr><td>运维成本</td><td>低</td><td>中</td><td>中</td><td>中</td><td>低</td><td>中</td><td>中</td><td>中</td></tr><tr><td>开源机构</td><td>Caucho</td><td>Weibo</td><td>Apache</td><td>Google</td><td>Apache</td><td>Alibaba</td><td>Dangdang</td><td>Apache</td></tr></tbody></table><h2 id="第二节-dubbo的基本应用与高级应用" tabindex="-1"><a class="header-anchor" href="#第二节-dubbo的基本应用与高级应用" aria-hidden="true">#</a> 第二节: Dubbo的基本应用与高级应用</h2><h3 id="笔记更新地址-1" tabindex="-1"><a class="header-anchor" href="#笔记更新地址-1" aria-hidden="true">#</a> 笔记更新地址：</h3>',6),O={href:"https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497?#",target:"_blank",rel:"noopener noreferrer"},I={href:"http://dubbo.apache.org/zh/docs/v2.7/user/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://gitee.com/archguide/dubbo-tuling-demo",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/apache/dubbo-admin",target:"_blank",rel:"noopener noreferrer"},U=e(`<p>Dubbo提供了很多功能，这里我们只介绍几种比较重要的，其他功能可以去Dubbo官网上查看。</p><h3 id="项目目录" tabindex="-1"><a class="header-anchor" href="#项目目录" aria-hidden="true">#</a> 项目目录</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dubbo<span class="token operator">-</span>tuling<span class="token operator">-</span>demo
├── consumer<span class="token operator">/</span>
<span class="token operator">|</span>  ├── consumer<span class="token punctuation">.</span>iml
<span class="token operator">|</span>  ├── pom<span class="token punctuation">.</span>xml
<span class="token operator">|</span>  └── src<span class="token operator">/</span>
<span class="token operator">|</span>     ├── main<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>     └── tuling<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        ├── consumer<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">AsyncDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">CallbackDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">ClusterDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">DemoServiceListenerImpl</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">GenericDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">LoadBalanceDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">MockDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">StubDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  └── <span class="token class-name">TimeoutDubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        ├── controller<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  ├── <span class="token class-name">ConsumerInterceptor</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  └── <span class="token class-name">HelloController</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        └── <span class="token class-name">DubboConsumerDemo</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>     └── application<span class="token punctuation">.</span>yml
<span class="token operator">|</span>     └── test<span class="token operator">/</span>
<span class="token operator">|</span>        └── java<span class="token operator">/</span>
├── dubbo<span class="token operator">-</span>tuling<span class="token operator">-</span>demo<span class="token punctuation">.</span>iml
├── <span class="token keyword">interface</span><span class="token operator">/</span>
<span class="token operator">|</span>  ├── <span class="token keyword">interface</span><span class="token punctuation">.</span>iml
<span class="token operator">|</span>  ├── pom<span class="token punctuation">.</span>xml
<span class="token operator">|</span>  └── src<span class="token operator">/</span>
<span class="token operator">|</span>     ├── main<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>     └── tuling<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        ├── <span class="token class-name">DemoService</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        ├── <span class="token class-name">DemoServiceListener</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        ├── <span class="token class-name">DemoServiceMock</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        └── <span class="token class-name">DemoServiceStub</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>     <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
<span class="token operator">|</span>     └── test<span class="token operator">/</span>
<span class="token operator">|</span>        └── java<span class="token operator">/</span>
├── pom<span class="token punctuation">.</span>xml
└── provider<span class="token operator">/</span>
   ├── pom<span class="token punctuation">.</span>xml
   ├── provider<span class="token punctuation">.</span>iml
   └── src<span class="token operator">/</span>
      ├── main<span class="token operator">/</span>
      <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
      <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
      <span class="token operator">|</span>  <span class="token operator">|</span>     └── tuling<span class="token operator">/</span>
      <span class="token operator">|</span>  <span class="token operator">|</span>        ├── <span class="token class-name">DubboProviderDemo</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        ├── provider<span class="token operator">/</span>
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>  └── service<span class="token operator">/</span>
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>     ├── <span class="token class-name">AsyncDemoService</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>     ├── <span class="token class-name">CallBackDemoService</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>     ├── <span class="token class-name">DefaultDemoService</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>     ├── <span class="token class-name">GenericDemoService</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>     ├── <span class="token class-name">RestDemoService</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        <span class="token operator">|</span>     └── <span class="token class-name">TimeoutDemoService</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  <span class="token operator">|</span>        └── <span class="token class-name">UpdateBeanPostProcessors</span><span class="token punctuation">.</span>java
      <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
      <span class="token operator">|</span>     ├── application<span class="token punctuation">.</span>properties
      <span class="token operator">|</span>     └── log4j<span class="token punctuation">.</span>properties
      └── test<span class="token operator">/</span>
         └── java<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目目录要大概记住一下，后面代码层次大概心里有个数。</p><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3>`,5),M={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/loadbalance/",target:"_blank",rel:"noopener noreferrer"},J=e(`<ol><li>消费端就这样配置</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> loadbalance <span class="token operator">=</span> <span class="token string">&quot;consistenthash&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>服务端就这样配置</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>loadbalance <span class="token operator">=</span> <span class="token string">&quot;consistenthash&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果在消费端和服务端都配置了负载均衡策略，以消费端为准。</li></ol><ul><li>上面两个配的是一致性hash算法。</li><li>根据消费者传的参数来进行hash，多次调用，如果参数一样，那么都会负载均衡到服务提供者的同一台机器上。</li></ul><blockquote><p>这其中比较难理解的就是<strong>最少活跃调用数</strong>是如何进行统计的？讲道理，最少活跃数应该是在<strong>服务提供者端</strong>进行统计的，服务提供者统计<strong>有多少个请求正在执行中</strong>。但在Dubbo中，就是<strong>不讲道理</strong>，它是在消费端进行统计的，为什么能在消费端进行统计？</p></blockquote><p>逻辑是这样的：</p><ol><li>每个消费者都会从注册中心（常用的是Zookeeper）缓存所调用服务的所有提供者信息到本地，比如记为p1、p2、p3三个服务提供者，每个提供者内都有一个属性记为active，默认位0</li><li>消费者在调用服务时，如果负载均衡策略是<strong>leastactive</strong></li><li>消费者端会判断缓存的所有服务提供者的active，选择最小的，如果都相同，则随机</li><li>选出某一个服务提供者后，假设是p2，Dubbo就会对p2.active+1</li><li>然后真正发出请求调用该服务</li><li>消费端收到响应结果后，对p2.active-1</li><li>这样就完成了对某个服务提供者当前活跃调用数进行了统计，并且并不影响服务调用的性能</li><li>如果由服务提供者来统计调用数反而不好统计，因为服务提供者有多个，你无法确定是哪个服务提供者统计调用数，除非你放到zookeeper这种分布式共享的数据中心，但是这样的话，每个消费者都要请求zookeeper找到需要调用的那一台服务提供者机器然后加1，在调用结束后，还要在zookeeper上进行减1操作，zookeeper明显扛不住。</li><li>由服务消费者来统计调用数的话，虽然每个消费者都有自己的一套调用数数据，调用数数据可能不一样，但是经过长时间的调用后，每个消费者自己本地存的调用数据还是能够有差不多的趋势（这里的趋势不是指数据相等）。比如说p2响应很慢，堆积了很多请求，那么每个消费者在请求多次后，短时间内都不会再请求p2</li></ol><h3 id="服务超时" tabindex="-1"><a class="header-anchor" href="#服务超时" aria-hidden="true">#</a> 服务超时</h3><p>在服务提供者和服务消费者上都可以配置服务超时时间，这两者是不一样的。</p><p>消费者调用一个服务，分为三步：</p><ol><li>消费者发送请求（网络传输）</li><li>服务端执行服务</li><li>服务端返回响应（网络传输）</li></ol><blockquote><p>如果在服务端和消费端只在<strong>其中一方</strong>配置了timeout，那么没有歧义，表示消费端调用服务的超时时间，<strong>消费端如果超过时间还没有收到响应结果，则消费端会抛超时异常</strong>。但服务端不会抛异常，服务端在执行服务后，会检查<strong>执行该服务</strong>的时间，如果超过timeout，则会打印一个<strong>超时日志</strong>。服务会正常的执行完。</p></blockquote><ol><li>如果在服务端和消费端各配了一个timeout，那就比较复杂了，假设 <ol><li>服务执行为5s</li><li>消费端timeout=3s</li><li>服务端timeout=6s</li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//服务端</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeoutDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">//消费端</span>
<span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">,</span> loadbalance <span class="token operator">=</span> <span class="token string">&quot;roundrobin&quot;</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>那么消费端调用服务时，消费端会收到超时异常（因为消费端超时了），服务端一切正常（服务端没有超时）。</li><li>无论何种情况，服务端的timeout配置的作用是：如果服务执行时间超过这个timeout，仅仅只是打印一个超时日志。</li></ol><h3 id="集群容错" tabindex="-1"><a class="header-anchor" href="#集群容错" aria-hidden="true">#</a> 集群容错</h3>`,18),V={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/fault-tolerent-strategy/",target:"_blank",rel:"noopener noreferrer"},N=e(`<blockquote><p>集群容错表示：服务消费者在调用某个服务时，这个服务有多个服务提供者，在经过负载均衡后选出其中一个服务提供者之后进行调用，但调用报错后，Dubbo所采取的后续处理策略。后续处理策略就是会重试调用其它机器上的服务提供者，加上第一次调用默认是重试2次，总共调用3次。</p></blockquote><p>也是既可以在消费端配置，也可以在服务端配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> cluster <span class="token operator">=</span> <span class="token string">&quot;failover&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级" aria-hidden="true">#</a> 服务降级</h3>`,4),Q={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/service-downgrade/",target:"_blank",rel:"noopener noreferrer"},$=e(`<ol><li><p>服务降级表示：服务消费者在调用某个服务提供者时，如果该服务提供者报错了，所采取的备选措施。</p></li><li><p>集群容错和服务降级的区别在于：</p><ol><li>集群容错是整个集群范围内的容错</li><li>服务降级是单个服务提供者的自身容错</li></ol></li><li><p>下面的mock就是一种容错，意思是服务调用失败后，直接返回123</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> mock <span class="token operator">=</span> <span class="token string">&quot;fail: return 123&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>mock如何返回对象这种复杂数据可以看官网。</li></ol><h3 id="本地存根" tabindex="-1"><a class="header-anchor" href="#本地存根" aria-hidden="true">#</a> 本地存根</h3>`,4),Z={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-stub/",target:"_blank",rel:"noopener noreferrer"},K=e(`<p>本地存根，名字很抽象，但实际上不难理解，本地存根就是一段逻辑，这段逻辑是在服务消费端执行的，这段逻辑一般都是由服务提供者提供，服务提供者可以利用这种机制在服务消费者远程调用服务提供者之前或之后再做一些其他事情，比如结果缓存，请求参数验证等等。</p><blockquote><p>consumer项目</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StubDubboConsumerDemo</span> <span class="token punctuation">{</span>


    <span class="token comment">//    @Reference(version = &quot;timeout&quot;, timeout = 1000, stub = &quot;com.tuling.DemoServiceStub&quot;)</span>
    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> stub <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">StubDubboConsumerDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DemoService</span> demoService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DemoService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>stub=true的是个默认配置</li><li>默认用接口的全限定类名+Stub去调用，也就是<code>com.tuling.DemoServiceStub</code></li><li>比如这个例子，当消费者去调用<code>demoService.sayHello(&quot;周瑜&quot;)</code>时，会首先调用<code>interface项目</code>下的<code>DemoServiceStub</code>的<code>sayHello</code>方法。如果调用失败就返回<code>&quot;容错数据&quot;</code></li><li>如果找不到<code>com.tuling.DemoServiceStub</code>就抛异常</li><li>注意<code>DemoServiceStub</code>这个类不一定需要写在interface项目里的，写在哪里都行，只要能通过pom.xml的maven依赖找到<code>com.tuling.DemoServiceStub</code>你这个路径就行</li><li>也可以stub直接指定全类名，这样就可以每一个消费者都提供一个本地存根</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> stub <span class="token operator">=</span> <span class="token string">&quot;com.tuling.DemoServiceStub&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>interface项目</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceStub</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数传入真正的远程代理对象</span>
    <span class="token keyword">public</span> <span class="token class-name">DemoServiceStub</span><span class="token punctuation">(</span><span class="token class-name">DemoService</span> demoService<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>demoService <span class="token operator">=</span> demoService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
         * 1.本地存根和服务降级有一些类似，不过本地存根比服务降级功能要强一点，比如你可以在这个
         * 地方做一些事情
         * 2.此代码在客户端（消费端）执行, 你可以在客户端做ThreadLocal本地缓存，把服务端返回的结果缓存到消费端。或预先验证参数是否合法，等等
         * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
         * <span class="token keyword">@since</span> 2021/8/7 - 17:41
         */</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// safe  null</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 你可以容错，可以做任何AOP拦截事项</span>
            <span class="token keyword">return</span> <span class="token string">&quot;容错数据&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地伪装" tabindex="-1"><a class="header-anchor" href="#本地伪装" aria-hidden="true">#</a> 本地伪装</h3>`,8),X={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-mock/",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,"本地伪装就是Mock，Dubbo中Mock的功能相对于本地存根更简单一点，Mock其实就是Dubbo中的服务降级，不同的名词罢了",-1),Y=n("h3",{id:"参数回调",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参数回调","aria-hidden":"true"},"#"),s(" 参数回调")],-1),nn={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/callback-parameter/",target:"_blank",rel:"noopener noreferrer"},sn=e(`<blockquote><ul><li>参数回调方式与调用本地 callback 或 listener 相同，只需要在 Spring 的配置文件中声明哪个参数是 callback 类型即可。</li><li>参数回调的用途：Dubbo 将基于长连接生成反向代理，<strong>这样就可以从服务器端调用客户端逻辑。</strong></li></ul></blockquote><ol><li>首先，如果当前服务支持参数回调，意思就是：对于某个服务接口中的某个方法，如果想支持消费者在调用这个方法时能设置回调逻辑，那么该方法就需要提供一个入参用来表示回调逻辑。</li></ol><blockquote><p>interface项目</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 同步调用方法</span>
    <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 异步调用方法</span>
    <span class="token keyword">default</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sayHelloAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加回调</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>consumer项目</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallbackDubboConsumerDemo</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;callback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CallbackDubboConsumerDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DemoService</span> demoService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DemoService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 用来进行callback</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceListenerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceListenerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d3&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceListenerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoServiceListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;被回调了：&quot;</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoServiceListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>provider项目</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 1.通过下面sayhello的方法注释，我们可以知道DemoService的sayHello方法的index=2的参数是回调对象，
 * 这个回调对象DemoServiceListener是Dubbo给我们生成的代理对象。
 * 2.那么Dubbo怎么知道，sayhello的index=2的参数是回调对象呢?为什么不可以是普通参数呢?
 * dubbo又是怎样区分DemoService里的两个sayhello方法呢？
 * 3.全都是通过@Service注解里的methods属性来标识的。通过methods属性指定name为sayHello的方法，
 * 它的index=2的参数是回调对象。并且同时只支持callbacks = 3，3个回调，数目超过了会报错
 * 3.version = &quot;callback&quot;  这个字符串是可以随便写的，version = &quot;call&quot;也行
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@author</span> https://github.com/youthlql
 * <span class="token keyword">@since</span> 2021/8/7 - 18:32
 */</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;callback&quot;</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Method</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;sayHello&quot;</span><span class="token punctuation">,</span> arguments <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> callback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> callbacks <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallBackDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CallBackDemoService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> listeners<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token function">getChanged</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        listener<span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token function">getChanged</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送变更通知</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getChanged</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Changed: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * 1.上面两参数肯定都是消费端那边传过来的，第三个参数DemoServiceListener
     * 不可能是消费者那边传过来的一个空对象吧。它实际上是dubbo生成的代理对象。
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@since</span> 2021/8/7 - 18:17
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了回调服务&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        callback<span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        listeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s：%s, Hello, %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常访问</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>因为Dubbo协议是基于长连接的，所以消费端在两次调用同一个方法时想指定不同的回调逻辑，那么就需要在调用时在指定一定key进行区分，这里就是d1,d2,d3。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceListenerImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceListenerImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d3&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoServiceListenerImpl3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="Alt text"></p><h3 id="异步调用" tabindex="-1"><a class="header-anchor" href="#异步调用" aria-hidden="true">#</a> 异步调用</h3>',14),an={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/async-call/",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html",target:"_blank",rel:"noopener noreferrer"},en={href:"https://mp.weixin.qq.com/s/U3eyBUy6HBVy-xRw3LGbRQ",target:"_blank",rel:"noopener noreferrer"},pn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 同步调用方法</span>
    <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 异步调用方法</span>
    <span class="token keyword">default</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sayHelloAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加回调</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">DemoServiceListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;async&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了同步服务&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s：%s, Hello, %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常访问</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sayHelloAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了异步服务&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncDubboConsumerDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;async&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AsyncDubboConsumerDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DemoService</span> demoService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DemoService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 调用直接返回CompletableFuture</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> demoService<span class="token punctuation">.</span><span class="token function">sayHelloAsync</span><span class="token punctuation">(</span><span class="token string">&quot;异步调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>

        future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Response: &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结束了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛化调用" tabindex="-1"><a class="header-anchor" href="#泛化调用" aria-hidden="true">#</a> 泛化调用</h3>`,4),on={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-reference/",target:"_blank",rel:"noopener noreferrer"},cn=e(`<p>泛化调用可以用来做服务测试。</p><ol><li>在Dubbo中，如果某个服务想要支持泛化调用，就可以将该服务的generic属性设置为true，那对于服务消费者来说，<strong>就可以不用依赖该服务的接口</strong>（pom.xml里都可以不用加这个依赖），直接利用GenericService接口来进行服务调用。</li><li>GenericService是dubbo提供的</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDubboConsumerDemo</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">&quot;demoService&quot;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> interfaceName <span class="token operator">=</span> <span class="token string">&quot;com.tuling.DemoService&quot;</span><span class="token punctuation">,</span> generic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">GenericService</span> genericService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GenericDubboConsumerDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">GenericService</span> genericService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GenericService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;demoService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> result <span class="token operator">=</span> genericService<span class="token punctuation">.</span>$<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&quot;sayHello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;周瑜&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛化服务" tabindex="-1"><a class="header-anchor" href="#泛化服务" aria-hidden="true">#</a> 泛化服务</h3>`,4),ln={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-service/",target:"_blank",rel:"noopener noreferrer"},un=e(`<p><strong>作用：实现一个通用的远程服务 Mock 框架，可通过实现 GenericService 接口处理所有服务请求</strong></p><p>实现了GenericService接口的就是泛化服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span></span><span class="token class-name">DemoService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">GenericException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">GenericService</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceName <span class="token operator">=</span> <span class="token string">&quot;com.tuling.DemoService&quot;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string">&quot;generic&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">GenericService</span> <span class="token punctuation">{</span>
    
    <span class="token doc-comment comment">/**
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@param</span> <span class="token parameter">s</span> 方法名字
     * <span class="token keyword">@param</span> <span class="token parameter">strings</span> 参数类型数组
     * <span class="token keyword">@param</span> <span class="token parameter">objects</span> 参数值数组
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token keyword">@since</span> 2021/8/7 - 18:57
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> $<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GenericException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了generic服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token string">&quot;执行的方法是&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思就是实际暴露出去的服务依然是<code>com.tuling.DemoService</code>，并且版本是generic。只是消费者调用的时候，最终执行的逻辑是这个<code>$invoke</code>方法。就是服务消费者你该怎么用还是怎么用，只是服务提供者后面真正执行逻辑不再是实现demoservice接口，实现sayhello方法了。而是GenericService的$invoke方法</p><h3 id="dubbo中的rest" tabindex="-1"><a class="header-anchor" href="#dubbo中的rest" aria-hidden="true">#</a> Dubbo中的REST</h3>`,5),rn={href:"http://dubbo.apache.org/zh/docs/v2.7/user/rest/",target:"_blank",rel:"noopener noreferrer"},kn=e(`<p>注意Dubbo的REST也是Dubbo所支持的一种<strong>协议</strong>。</p><p>当我们用Dubbo提供了一个服务后，如果消费者没有使用Dubbo也想调用服务，那么这个时候我们就可以让我们的服务支持REST协议，这样消费者就可以通过REST形式调用我们的服务了。</p><p>注意：如果某个服务只有REST协议可用，那么该服务必须用@Path注解定义访问路径</p><blockquote><p>application.properties 即支持dubbo协议，又支持rest协议</p></blockquote><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"> # Spring boot application</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">dubbo-provider-demo</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>

<span class="token comment"># Base packages to scan Dubbo Component: @org.apache.dubbo.config.annotation.Service</span>
<span class="token key attr-name">dubbo.scan.base-packages</span><span class="token punctuation">=</span><span class="token value attr-value">com.tuling.provider.service</span>
<span class="token key attr-name">dubbo.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">\${spring.application.name}</span>


<span class="token comment">## Dubbo Registry</span>
<span class="token key attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token value attr-value">zookeeper://127.0.0.1:2181</span>

<span class="token comment"># Dubbo Protocol</span>
<span class="token comment">#dubbo.protocol.name=dubbo</span>
<span class="token comment">#dubbo.protocol.port=20880</span>


<span class="token comment">#dubbo.protocol.name=rest</span>
<span class="token comment">#dubbo.protocol.port=8083</span>

<span class="token key attr-name">dubbo.protocols.p1.id</span><span class="token punctuation">=</span><span class="token value attr-value">dubbo1</span>
<span class="token key attr-name">dubbo.protocols.p1.name</span><span class="token punctuation">=</span><span class="token value attr-value">dubbo</span>
<span class="token key attr-name">dubbo.protocols.p1.port</span><span class="token punctuation">=</span><span class="token value attr-value">20881</span>
<span class="token key attr-name">dubbo.protocols.p1.host</span><span class="token punctuation">=</span><span class="token value attr-value">0.0.0.0</span>

<span class="token key attr-name">dubbo.protocols.p2.id</span><span class="token punctuation">=</span><span class="token value attr-value">rest</span>
<span class="token key attr-name">dubbo.protocols.p2.name</span><span class="token punctuation">=</span><span class="token value attr-value">rest</span>
<span class="token key attr-name">dubbo.protocols.p2.port</span><span class="token punctuation">=</span><span class="token value attr-value">8083</span>
<span class="token key attr-name">dubbo.protocols.p2.host</span><span class="token punctuation">=</span><span class="token value attr-value">0.0.0.0</span>

<span class="token comment">#dubbo.protocols.p3.id=dubbo3</span>
<span class="token comment">#dubbo.protocols.p3.name=dubbo</span>
<span class="token comment">#dubbo.protocols.p3.port=20883</span>
<span class="token comment">#dubbo.protocols.p3.host=0.0.0.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;rest&quot;</span><span class="token punctuation">,</span> protocol <span class="token operator">=</span> <span class="token string">&quot;p2&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GET</span>
    <span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ContentType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_UTF_8</span><span class="token punctuation">,</span> <span class="token class-name">ContentType</span><span class="token punctuation">.</span><span class="token constant">TEXT_XML_UTF_8</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@QueryParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了rest服务&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %s, Hello, %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常访问</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span></span><span class="token class-name">DemoService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">RpcContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;async&quot;</span><span class="token punctuation">,</span> protocol <span class="token operator">=</span> <span class="token string">&quot;p1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了同步服务&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s：%s, Hello, %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常访问</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">sayHelloAsync</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了异步服务&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="管理台" tabindex="-1"><a class="header-anchor" href="#管理台" aria-hidden="true">#</a> 管理台</h3>`,8),dn={href:"https://github.com/apache/dubbo-admin",target:"_blank",rel:"noopener noreferrer"},vn=e('<p>用户名和密码默认都是root，登录进去之后就这样的</p><p><img src="'+r+`" alt="Alt text"></p><ol><li>Dubbo分为注册中心和配置中心，如果spring文件里没有明确写配置中心，配置中心默认就用注册中心。</li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token value attr-value">zookeeper://127.0.0.1:2181</span>
<span class="token key attr-name">dubbo.config-center.address</span><span class="token punctuation">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>管理台的<strong>配置管理</strong>作用就是可以实时更改dubbo相关的配置，在这里面写了和在appliaction.properties里面写是一样的效果，这个还不用重启服务。如果appliaction.properties里和管理台写了相同的配置，以管理台的为主。</li></ol><p><img src="`+k+'" alt="Alt text"></p><ol start="3"><li><strong>动态配置</strong>这里，也可以很方便的替代服务提供者@service注解上标注的那些配置。管理台是实时生效的，如果改代码里的@service还需要重启服务。</li></ol><p><img src="'+d+'" alt="Alt text"></p><p>很多配置都可以在管理台上配。管理台上写的配置会持久化在<strong>你配置的配置中心</strong>里。只有注册中心里的服务提供者信息不持久化，如果注册中心是zookeeper，那么服务提供者在zk上就是临时节点。</p><h3 id="动态配置" tabindex="-1"><a class="header-anchor" href="#动态配置" aria-hidden="true">#</a> 动态配置</h3>',10),mn={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/config-rule/",target:"_blank",rel:"noopener noreferrer"},bn=n("p",null,[s("注意动态配置修改的是服务"),n("strong",null,"参数"),s("，并不能修改服务的协议、IP、PORT、VERSION、GROUP，因为这5个信息是服务的标识信息，是服务的身份证号，是不能修改的。")],-1),gn=n("h3",{id:"服务路由",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#服务路由","aria-hidden":"true"},"#"),s(" 服务路由")],-1),hn={href:"http://dubbo.apache.org/zh/docs/v2.7/user/examples/routing-rule/",target:"_blank",rel:"noopener noreferrer"},yn=e(`<blockquote><p>注意所有的东西都要跟官网结合着看</p></blockquote><p>举个官网的例子，简单说下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># app1的消费者只能消费所有端口为20880的服务实例</span>
<span class="token comment"># app2的消费者只能消费所有端口为20881的服务实例</span>
<span class="token punctuation">---</span>
<span class="token key atrule">scope</span><span class="token punctuation">:</span> application
<span class="token key atrule">force</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">runtime</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">key</span><span class="token punctuation">:</span> governance<span class="token punctuation">-</span>conditionrouter<span class="token punctuation">-</span>consumer
<span class="token key atrule">conditions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> application=app1 =<span class="token punctuation">&gt;</span> address=<span class="token important">*:</span><span class="token number">20880</span> <span class="token comment"># 如果你的应用是app1，那么你只能访问20880这个端口的服务</span>
  <span class="token punctuation">-</span> application=app2 =<span class="token punctuation">&gt;</span> address=<span class="token important">*:</span><span class="token number">20881</span>
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="标签路由" tabindex="-1"><a class="header-anchor" href="#标签路由" aria-hidden="true">#</a> 标签路由</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># governance-tagrouter-provider应用增加了两个标签分组tag1和tag2</span>
<span class="token comment"># tag1包含一个实例 127.0.0.1:20880</span>
<span class="token comment"># tag2包含一个实例 127.0.0.1:20881</span>
<span class="token punctuation">---</span>
  <span class="token key atrule">force</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">runtime</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">key</span><span class="token punctuation">:</span> governance<span class="token punctuation">-</span>tagrouter<span class="token punctuation">-</span>provider
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tag1
      <span class="token key atrule">addresses</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;127.0.0.1:20880&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tag2
      <span class="token key atrule">addresses</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;127.0.0.1:20881&quot;</span><span class="token punctuation">]</span>
 <span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">Constants</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">RpcContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token comment">// 测试账号</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tester<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;18888888888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//标签路由</span>
        <span class="token class-name">String</span> account <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tester<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;dubbo.tag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tag1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;dubbo.tag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tag2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>比如说现在服务上线，消费者去请求提供者，通过拦截器在发送请求之前，判断账号是不是内测用户账号，如果是就打一个tag1标签，否则就打tag2标签</li><li>那么如果打了tag1标签，内测账号就会访问&quot;127.0.0.1:20880&quot;这个服务器。</li><li>可以用来做灰度发布，比如新版本的服务只给内测用户群体用。</li></ol><h4 id="什么是蓝绿发布、灰度发布" tabindex="-1"><a class="header-anchor" href="#什么是蓝绿发布、灰度发布" aria-hidden="true">#</a> 什么是蓝绿发布、灰度发布</h4>`,8),fn={href:"https://zhuanlan.zhihu.com/p/42671353",target:"_blank",rel:"noopener noreferrer"},wn=n("h3",{id:"zookeeper可视化客户端工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#zookeeper可视化客户端工具","aria-hidden":"true"},"#"),s(" Zookeeper可视化客户端工具")],-1),Sn=n("p",null,"Zookeeper可视化客户端：ZooInspector",-1),qn=n("h2",{id:"dubbo与其他微服务组件整合",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dubbo与其他微服务组件整合","aria-hidden":"true"},"#"),s(" Dubbo与其他微服务组件整合")],-1),_n=n("p",null,"sentinel： https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-dubbo",-1),Dn=n("p",null,"nacos: https://nacos.io/zh-cn/docs/use-nacos-with-dubbo.html",-1),xn=n("p",null,"seata: http://seata.io/zh-cn/docs/user/microservice.html",-1);function jn(Cn,Rn){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,n("p",null,[n("a",b,[s("https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497"),t(a)]),s("（密码：kyys） 《Dubbo笔记》")]),g,n("p",null,[s("手写模拟Dubbo代码地址："),n("a",h,[s("https://gitee.com/archguide/rpc"),t(a)])]),n("p",null,[s("git clone地址："),n("a",y,[s("https://gitee.com/archguide/rpc.git"),t(a)])]),f,w,n("blockquote",null,[n("p",null,[s("在"),n("a",S,[s("分布式计算"),t(a)]),q,s("（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信"),n("a",_,[s("协议"),t(a)]),s("。该协议允许运行于一台计算机的"),n("a",D,[s("程序"),t(a)]),s("调用另一个"),n("a",x,[s("地址空间"),t(a)]),s("（通常为一个开放网络的一台计算机）的"),n("a",j,[s("子程序"),t(a)]),s("，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过"),C,s("进行信息交互的系统。")]),n("p",null,[s("如果涉及的软件采用"),n("a",R,[s("面向对象编程"),t(a)]),s("，那么远程过程调用亦可称作"),A,s("或"),E,s("，例："),n("a",H,[s("Java RMI"),t(a)]),s("。")])]),z,n("p",null,[s("官网地址："),n("a",P,[s("http://dubbo.apache.org/zh/"),t(a)])]),L,n("p",null,[s("Dubbo网关参考："),n("a",B,[s("https://github.com/apache/dubbo-proxy"),t(a)]),s("（社区不是很活跃）")]),T,n("p",null,[n("a",O,[s("https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497"),t(a)]),s("（密码：kyys） 《Dubbo笔记》")]),n("p",null,[s("官网："),n("a",I,[s("http://dubbo.apache.org/zh/docs/v2.7/user/"),t(a)])]),n("p",null,[s("demo项目地址："),n("a",F,[s("https://gitee.com/archguide/dubbo-tuling-demo"),t(a)])]),n("p",null,[s("管理台github地址："),n("a",G,[s("https://github.com/apache/dubbo-admin"),t(a)])]),U,n("p",null,[s("官网地址："),n("a",M,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/loadbalance/"),t(a)])]),J,n("p",null,[s("官网地址："),n("a",V,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/fault-tolerent-strategy/"),t(a)])]),N,n("p",null,[s("官网地址："),n("a",Q,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/service-downgrade/"),t(a)])]),$,n("p",null,[s("官网地址："),n("a",Z,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-stub/"),t(a)])]),K,n("p",null,[s("官网地址："),n("a",X,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-mock/"),t(a)])]),W,Y,n("p",null,[s("官网地址："),n("a",nn,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/callback-parameter/"),t(a)])]),sn,n("p",null,[s("官网地址："),n("a",an,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/async-call/"),t(a)])]),n("p",null,[s("理解起来比较容易，主要要理解"),n("a",tn,[s("CompletableFuture"),t(a)]),s("。只是说dubbo也可以支持java的CompletableFuture")]),n("p",null,[s("其他异步调用方式："),n("a",en,[s("https://mp.weixin.qq.com/s/U3eyBUy6HBVy-xRw3LGbRQ"),t(a)])]),pn,n("p",null,[s("官网地址："),n("a",on,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-reference/"),t(a)])]),cn,n("p",null,[s("官网地址："),n("a",ln,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-service/"),t(a)])]),un,n("p",null,[s("官网地址："),n("a",rn,[s("http://dubbo.apache.org/zh/docs/v2.7/user/rest/"),t(a)])]),kn,n("p",null,[s("github地址："),n("a",dn,[s("https://github.com/apache/dubbo-admin"),t(a)])]),vn,n("p",null,[s("官网地址："),n("a",mn,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/config-rule/"),t(a)])]),bn,gn,n("p",null,[s("官网地址："),n("a",hn,[s("http://dubbo.apache.org/zh/docs/v2.7/user/examples/routing-rule/"),t(a)])]),yn,n("p",null,[n("a",fn,[s("https://zhuanlan.zhihu.com/p/42671353"),t(a)])]),wn,Sn,qn,_n,Dn,xn])}const En=p(v,[["render",jn],["__file","01_02.DubboyuanmaxilieV1-Dubbodiyierjie-jibenyingyongyugaojiyingyong.html.vue"]]);export{En as default};
