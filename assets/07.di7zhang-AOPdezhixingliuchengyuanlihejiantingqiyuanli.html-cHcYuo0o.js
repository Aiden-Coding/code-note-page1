const e=JSON.parse('{"key":"v-1fb23a46","path":"/JavaYouth/spring-sourcecode-v1/07.di7zhang-AOPdezhixingliuchengyuanlihejiantingqiyuanli.html","title":"Spring源码系列-第7章-AOP的执行流程原理和监听器原理","lang":"zh-CN","frontmatter":{"title":"Spring源码系列-第7章-AOP的执行流程原理和监听器原理","tags":["Spring源码"],"categories":["Spring","源码V1"],"keywords":"Spring，框架，spring源码","description":"AOP执行流程和监听器原理","cover":"https://npm.elemecdn.com/lql_static@latest/logo/spring.png","abbrlink":"fb3552e0","date":"2022-04-17T12:01:02.000Z"},"headers":[{"level":2,"title":"流程图-AOP运行流程原理","slug":"流程图-aop运行流程原理","link":"#流程图-aop运行流程原理","children":[]},{"level":2,"title":"由Aop的执行流程引出方法拦截器","slug":"由aop的执行流程引出方法拦截器","link":"#由aop的执行流程引出方法拦截器","children":[{"level":3,"title":"创建完代理对象之后，怎么执行的呢？","slug":"创建完代理对象之后-怎么执行的呢","link":"#创建完代理对象之后-怎么执行的呢","children":[]},{"level":3,"title":"如何生成的方法拦截器？","slug":"如何生成的方法拦截器","link":"#如何生成的方法拦截器","children":[]}]},{"level":2,"title":"正式开始分析AOP运行流程-链式执行","slug":"正式开始分析aop运行流程-链式执行","link":"#正式开始分析aop运行流程-链式执行","children":[{"level":3,"title":"DynamicAdvisedInterceptor#intercept()","slug":"dynamicadvisedinterceptor-intercept","link":"#dynamicadvisedinterceptor-intercept","children":[]},{"level":3,"title":"CglibMethodInvocation#proceed()","slug":"cglibmethodinvocation-proceed","link":"#cglibmethodinvocation-proceed","children":[]}]},{"level":2,"title":"监听器原理【事件原理】","slug":"监听器原理【事件原理】","link":"#监听器原理【事件原理】","children":[{"level":3,"title":"测试类","slug":"测试类","link":"#测试类","children":[]},{"level":3,"title":"EventListenerMethodProcessor","slug":"eventlistenermethodprocessor","link":"#eventlistenermethodprocessor","children":[]}]}],"git":{},"filePathRelative":"JavaYouth/spring-sourcecode-v1/07.第7章-AOP的执行流程原理和监听器原理.md"}');export{e as data};
