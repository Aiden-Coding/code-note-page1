const l=JSON.parse('{"key":"v-e501c494","path":"/JavaYouth/design_patterns/shejimoshi-05.03-xingweixing-zhuangtai_diedaiqi.html","title":"设计模式-05.03-行为型-状态&迭代器","lang":"zh-CN","frontmatter":{"title":"设计模式-05.03-行为型-状态&迭代器","tags":["状态模式","迭代器模式"],"categories":["设计模式","05.行为型"],"keywords":"状态模式，迭代器模式","description":"看文章","cover":"https://npm.elemecdn.com/lql_static@latest/logo/design_patterns.jpg","abbrlink":"877f4ef2","date":"2021-08-02T15:51:58.000Z"},"headers":[{"level":2,"title":"什么是有限状态机？","slug":"什么是有限状态机","link":"#什么是有限状态机","children":[]},{"level":2,"title":"状态机实现方式一：分支逻辑法","slug":"状态机实现方式一-分支逻辑法","link":"#状态机实现方式一-分支逻辑法","children":[]},{"level":2,"title":"状态机实现方式二：查表法","slug":"状态机实现方式二-查表法","link":"#状态机实现方式二-查表法","children":[]},{"level":2,"title":"状态机实现方式三：状态模式","slug":"状态机实现方式三-状态模式","link":"#状态机实现方式三-状态模式","children":[]},{"level":2,"title":"迭代器模式的原理和实现","slug":"迭代器模式的原理和实现","link":"#迭代器模式的原理和实现","children":[]},{"level":2,"title":"迭代器模式的优势","slug":"迭代器模式的优势","link":"#迭代器模式的优势","children":[]},{"level":2,"title":"在遍历的同时增删集合元素会发生什么？","slug":"在遍历的同时增删集合元素会发生什么","link":"#在遍历的同时增删集合元素会发生什么","children":[]},{"level":2,"title":"如何应对遍历时改变集合导致的未决行为？","slug":"如何应对遍历时改变集合导致的未决行为","link":"#如何应对遍历时改变集合导致的未决行为","children":[]},{"level":2,"title":"如何在遍历的同时安全地删除集合元素？","slug":"如何在遍历的同时安全地删除集合元素","link":"#如何在遍历的同时安全地删除集合元素","children":[]},{"level":2,"title":"如何设计实现一个支持“快照”功能的iterator？","slug":"如何设计实现一个支持-快照-功能的iterator","link":"#如何设计实现一个支持-快照-功能的iterator","children":[{"level":3,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":3,"title":"解决方案一","slug":"解决方案一","link":"#解决方案一","children":[]},{"level":3,"title":"解决方案二","slug":"解决方案二","link":"#解决方案二","children":[]}]}],"git":{},"filePathRelative":"JavaYouth/design_patterns/设计模式-05.03-行为型-状态&迭代器.md"}');export{l as data};
