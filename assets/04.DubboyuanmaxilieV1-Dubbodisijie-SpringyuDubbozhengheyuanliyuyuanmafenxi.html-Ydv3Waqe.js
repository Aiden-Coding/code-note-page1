import{_ as p,r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-GjP6hEVt.js";const l="/code-note-page1/assets/image-10-lmLJgSVo.png",u="/code-note-page1/assets/image-9-1mDlP6ph.png",r="/code-note-page1/assets/image-11-kSGtTN3o.png",k="/code-note-page1/assets/image-12-Z0CA-whR.png",d={},v=n("h2",{id:"第四节-spring与dubbo整合原理与源码分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第四节-spring与dubbo整合原理与源码分析","aria-hidden":"true"},"#"),s(" 第四节: Spring与Dubbo整合原理与源码分析")],-1),m=n("h3",{id:"笔记更新地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#笔记更新地址","aria-hidden":"true"},"#"),s(" 笔记更新地址：")],-1),b={href:"https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497?#",target:"_blank",rel:"noopener noreferrer"},f=t('<h3 id="整体架构和流程" tabindex="-1"><a class="header-anchor" href="#整体架构和流程" aria-hidden="true">#</a> 整体架构和流程</h3><p><img src="'+l+`" alt="Alt text"></p><h4 id="处理-service" tabindex="-1"><a class="header-anchor" href="#处理-service" aria-hidden="true">#</a> 处理@Service</h4><ol><li>Dubbo的@Service注解Spring的@Service注解重名了，dubbo在2.7版本之后改成了@DubboService注解。</li></ol><blockquote><p>在Dubbo的文章中如果不是特别说明@Service注解均为Dubbo的注解</p></blockquote><ol start="2"><li>Dubbo在处理@Service注解时会生成两个对象，看上面的图，DemoServiceImpl这个是给Spring容器生成的，意思就是@Service注解兼具了Spring@Service注解的功能。同时@Serivce注解会再生成一个ServiceBean类型的对象，这个对象会做一些事情，比如：将对应的服务类注册到注册中心，将service服务进行分组，分版本，控制超时，权重等等。@Service注解上面写的参数，都是由ServiceBean类型的对象来承接。当调用ServiceBean类型里面的export方法就可以控制服务的注册。</li><li>ServiceBean的父类里有一个ref属性，指向这个服务的实现类</li></ol><h4 id="处理properties文件" tabindex="-1"><a class="header-anchor" href="#处理properties文件" aria-hidden="true">#</a> 处理Properties文件</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 这个会被解析成ApplicationConfig对象</span>
<span class="token key attr-name">dubbo.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">dubbo-demo-provider1-application</span>
<span class="token key attr-name">dubbo.application.logger</span><span class="token punctuation">=</span><span class="token value attr-value">log4j</span>
<span class="token key attr-name">dubbo.application.timeout</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span>


<span class="token comment"># 这个会被解析成ProtocolConfig</span>
<span class="token key attr-name">dubbo.protocols.p1.name</span><span class="token punctuation">=</span><span class="token value attr-value">dubbo</span>
<span class="token key attr-name">dubbo.protocols.p1.port</span><span class="token punctuation">=</span><span class="token value attr-value">20880</span>
<span class="token key attr-name">dubbo.protocols.p1.host</span><span class="token punctuation">=</span><span class="token value attr-value">0.0.0.0</span>

<span class="token key attr-name">dubbo.protocols.p2.name</span><span class="token punctuation">=</span><span class="token value attr-value">dubbo</span>
<span class="token key attr-name">dubbo.protocols.p2.port</span><span class="token punctuation">=</span><span class="token value attr-value">20881</span>
<span class="token key attr-name">dubbo.protocols.p2.host</span><span class="token punctuation">=</span><span class="token value attr-value">0.0.0.0</span>


<span class="token comment"># 这个会被解析成RegistrieConfig</span>
<span class="token key attr-name">dubbo.registries.r1.address</span><span class="token punctuation">=</span><span class="token value attr-value">zookeeper://127.0.0.1:2181</span>
<span class="token key attr-name">dubbo.registries.r1.timeout</span><span class="token punctuation">=</span><span class="token value attr-value">3000</span>

<span class="token comment"># 等等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些xxxConfig最后都会赋值给ServiceBean里相应的属性</p><h3 id="实例解析" tabindex="-1"><a class="header-anchor" href="#实例解析" aria-hidden="true">#</a> 实例解析</h3><p>应用启动类与配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ProviderConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@EnableDubbo</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token string">&quot;org.apache.dubbo.demo.provider&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/spring/dubbo-provider.properties&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ProviderConfiguration</span> <span class="token punctuation">{</span>
       
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用配置类为ProviderConfiguration, 在配置上有两个比较重要的注解</p><ol><li>@PropertySource表示将dubbo-provider.properties中的配置项添加到Spring容器中，可以通过@Value的方式获取到配置项中的值</li><li>@EnableDubbo(scanBasePackages = &quot;org.apache.dubbo.demo.provider&quot;)表示对指定包下的类进行扫描，扫描@Service与@Reference注解，并且进行处理</li></ol><h3 id="enabledubbo" tabindex="-1"><a class="header-anchor" href="#enabledubbo" aria-hidden="true">#</a> @EnableDubbo</h3><p>在EnableDubbo注解上，有另外两个注解，也是研究Dubbo最重要的两个注解</p><ol><li>@EnableDubboConfig</li><li>@DubboComponentScan</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DubboConfigConfigurationRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableDubboConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//解析properties文件  ===&gt;   xxxConfig </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DubboComponentScanRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DubboComponentScan</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token comment">//解析@Service @Refrence注解</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意两个注解中对应的@Import注解所导入的类：</p><ol><li>DubboConfigConfigurationRegistrar</li><li>DubboComponentScanRegistrar</li></ol><p>Spring在启动时会解析这两个注解，并且执行对应的Registrar类中的registerBeanDefinitions方法（这是Spring中提供的扩展功能。）</p><h3 id="dubboconfigconfigurationregistrar" tabindex="-1"><a class="header-anchor" href="#dubboconfigconfigurationregistrar" aria-hidden="true">#</a> DubboConfigConfigurationRegistrar</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigConfigurationRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行DubboConfigConfigurationRegistrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">AnnotationAttributes</span><span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>
                importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableDubboConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;multiple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿EnableDubboConfig里的默认值</span>

        <span class="token comment">// Single Config Bindings</span>
        <span class="token function">registerBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">DubboConfigConfiguration<span class="token punctuation">.</span>Single</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 默认为true</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Since 2.6.6 https://github.com/apache/dubbo/issues/3193</span>
            <span class="token function">registerBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">DubboConfigConfiguration<span class="token punctuation">.</span>Multiple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h4><p><img src="`+u+`" alt="Alt text"></p><p>Spring启动时，会调用DubboConfigConfigurationRegistrar的registerBeanDefinitions方法，该方法是利用Spring中的AnnotatedBeanDefinitionReader来读取：</p><ol><li>DubboConfigConfiguration.Single.<strong>class</strong></li><li>DubboConfigConfiguration.Multiple.<strong>class</strong></li></ol><p>这两个类上的注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Single Dubbo <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractConfig</span></span> Config<span class="token punctuation">}</span> Bean Binding
     */</span>
    <span class="token annotation punctuation">@EnableDubboConfigBindings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.application&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.module&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ModuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.registry&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.protocol&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProtocolConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.monitor&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MonitorConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.provider&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProviderConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.consumer&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.config-center&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConfigCenterBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metadata-report&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetadataReportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metrics&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetricsConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Single</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Multiple Dubbo <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractConfig</span></span> Config<span class="token punctuation">}</span> Bean Binding
     */</span>
    <span class="token annotation punctuation">@EnableDubboConfigBindings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.applications&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.modules&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ModuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.registries&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.protocols&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProtocolConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.monitors&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MonitorConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.providers&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProviderConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.consumers&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.config-centers&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConfigCenterBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metadata-reports&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetadataReportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metricses&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetricsConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Multiple</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大概意思就是什么前缀的注解，对应解析到哪个类的对象里。</p><p>这两个类主要用到的就是@EnableDubboConfigBindings注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DubboConfigBindingsRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableDubboConfigBindings</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * The value of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EnableDubboConfigBindings</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@return</span> non-null
     */</span>
    <span class="token class-name">EnableDubboConfigBinding</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@EnableDubboConfigBindings注解上也有一个@Import注解，导入的是DubboConfigBindingsRegistrar.<strong>class</strong>。该类会获取@EnableDubboConfigBindings注解中的value，也就是多个@EnableDubboConfigBinding注解，然后利用DubboConfigBindingRegistrar去处理这些@EnableDubboConfigBinding注解。</p><h4 id="dubboconfigbindingregistrar" tabindex="-1"><a class="header-anchor" href="#dubboconfigbindingregistrar" aria-hidden="true">#</a> DubboConfigBindingRegistrar</h4><h5 id="此类总结" tabindex="-1"><a class="header-anchor" href="#此类总结" aria-hidden="true">#</a> 此类总结</h5><p>此类中的主要方法是registerDubboConfigBeans()方法，主要功能就是获取用户所设置的properties文件中的内容，对Properties文件进行解析，根据Properties文件的每个配置项的前缀、参数名、参数值生成对应的BeanDefinition。</p><p>比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dubbo<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>dubbo<span class="token operator">-</span>demo<span class="token operator">-</span>provider1<span class="token operator">-</span>application
dubbo<span class="token punctuation">.</span>application<span class="token punctuation">.</span>logger<span class="token operator">=</span>log4j
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>前缀为&quot;dubbo.application&quot;的配置项，会生成一个ApplicationConfig类型的BeanDefinition，并且name和logger属性为对应的值。</p><p>再比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>name<span class="token operator">=</span>dubbo
dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">20880</span>
dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>

dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p2<span class="token punctuation">.</span>name<span class="token operator">=</span>dubbo
dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p2<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">20881</span>
dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p2<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如前缀为&quot;dubbo.protocols&quot;的配置项，会生成<strong>两</strong>个ProtocolConfig类型的BeanDefinition，两个BeanDefinition的beanName分别为p1和p2。</p><p>并且还会针对生成的每个BeanDefinition生成一个和它一对一绑定的BeanPostProcessor，类型为DubboConfigBindingBeanPostProcessor.<strong>class</strong>。</p><h5 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释" aria-hidden="true">#</a> 代码注释</h5><blockquote><p>整个类的代码注释</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractConfig</span></span> Dubbo Config<span class="token punctuation">}</span> binding Bean registrar
 *
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">EnableDubboConfigBinding</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">DubboConfigBindingBeanPostProcessor</span></span>
 * <span class="token keyword">@since</span> 2.5.8
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigBindingRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行DubboConfigBindingRegistrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">AnnotationAttributes</span><span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>
                importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableDubboConfigBinding</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// prefix = &quot;dubbo.application&quot;</span>
        <span class="token class-name">String</span> prefix <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;prefix&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// type = ApplicationConfig.class</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">&gt;</span></span> configClass <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;multiple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">registerDubboConfigBeans</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerDubboConfigBeans</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span>
                                          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">&gt;</span></span> configClass<span class="token punctuation">,</span>
                                          <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span>
                                          <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 从properties文件中根据前缀拿对应的配置项，比如根据dubbo.application前缀，</span>
        <span class="token comment">// 就可以拿到：</span>
        <span class="token comment">// dubbo.application.name=dubbo-demo-provider-application</span>
        <span class="token comment">// dubbo.application.logger=log4j</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> properties <span class="token operator">=</span> <span class="token function">getSubProperties</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果没有相关的配置项，则不需要注册BeanDefinition</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;There is no property for binding to dubbo config class [&quot;</span> <span class="token operator">+</span> configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">+</span> <span class="token string">&quot;] within prefix [&quot;</span> <span class="token operator">+</span> prefix <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 根据配置项生成beanNames，为什么会有多个？</span>
        <span class="token comment">// 普通情况一个dubbo.application前缀对应一个ApplicationConfig类型的Bean</span>
        <span class="token comment">// 特殊情况下，比如dubbo.protocols对应了：</span>
<span class="token comment">//        dubbo.protocols.p1.name=dubbo</span>
<span class="token comment">//        dubbo.protocols.p1.port=20880</span>
<span class="token comment">//        dubbo.protocols.p1.host=0.0.0.0</span>

<span class="token comment">//        dubbo.protocols.p2.name=http</span>
<span class="token comment">//        dubbo.protocols.p2.port=8082</span>
<span class="token comment">//        dubbo.protocols.p2.host=0.0.0.0</span>
        <span class="token comment">// 那么就需要对应两个ProtocolConfig类型的Bean，那么就需要两个beanName:p1和p2</span>

        <span class="token comment">// 这里就是multiple为true或false的区别，名字的区别，根据multiple用来判断是否从配置项中获取beanName</span>
        <span class="token comment">// 如果multiple为false，则看有没有配置id属性，如果没有配置则自动生成一个beanName.</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> beanNames <span class="token operator">=</span> multiple <span class="token operator">?</span> <span class="token function">resolveMultipleBeanNames</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token function">resolveSingleBeanName</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 为每个beanName,注册一个空的BeanDefinition</span>
            <span class="token function">registerDubboConfigBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 为每个bean注册一个DubboConfigBindingBeanPostProcessor的Bean后置处理器</span>
            <span class="token function">registerDubboConfigBindingBeanPostProcessor</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token comment">// 注册一个NamePropertyDefaultValueDubboConfigBeanCustomizer的bean</span>
        <span class="token comment">// 用来把某个XxConfig所对应的beanName设置到name属性中去</span>
        <span class="token function">registerDubboConfigBeanCustomizers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerDubboConfigBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">&gt;</span></span> configClass<span class="token punctuation">,</span>
                                         <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ApplicatinoConfig对象</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The dubbo config bean definition [name : &quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;, class : &quot;</span> <span class="token operator">+</span> configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                    <span class="token string">&quot;] has been registered.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerDubboConfigBindingBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span>
                                                             <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 注册一个DubboConfigBindingBeanPostProcessor的Bean</span>
        <span class="token comment">// 每个XxConfig的Bean对应一个DubboConfigBindingBeanPostProcessor的Bean</span>
        <span class="token comment">// 比如，一个ApplicationConfig对应一个DubboConfigBindingBeanPostProcessor，</span>
        <span class="token comment">// 一个ProtocolConfig也会对应一个DubboConfigBindingBeanPostProcessor</span>
        <span class="token comment">// 在构造DubboConfigBindingBeanPostProcessor的时候会指定构造方法的值，这样就可以区别开来了</span>

        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> processorClass <span class="token operator">=</span> <span class="token class-name">DubboConfigBindingBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span>processorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 真实的前缀，比如dubbo.registries.r2</span>
        <span class="token class-name">String</span> actualPrefix <span class="token operator">=</span> multiple <span class="token operator">?</span> <span class="token function">normalizePrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">+</span> beanName <span class="token operator">:</span> prefix<span class="token punctuation">;</span>

        <span class="token comment">// 添加两个构造方法参数值，所以会调用DubboConfigBindingBeanPostProcessor的两个参数的构造方法</span>
        builder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span>actualPrefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        beanDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">registerWithGeneratedName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The BeanPostProcessor bean definition [&quot;</span> <span class="token operator">+</span> processorClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot;] for dubbo config bean [name : &quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;] has been registered.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerDubboConfigBeanCustomizers</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">registerInfrastructureBean</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token constant">BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">NamePropertyDefaultValueDubboConfigBeanCustomizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span><span class="token punctuation">)</span> environment<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">resolveMultipleBeanNames</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 比如dubbo.protocols.p1.name=dubbo的propertyName为p1.name</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> propertyName <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// propertyName为p1.name</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> propertyName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment">// 截取beanName名字为p1</span>
                <span class="token class-name">String</span> beanName <span class="token operator">=</span> propertyName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>

                beanNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> beanNames<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">resolveSingleBeanName</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> properties<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">&gt;</span></span> configClass<span class="token punctuation">,</span>
                                         <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 配置了dubbo.application.id=appl，那么appl就是beanName</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果beanName为null，则会进入if分支，由spring自动生成一个beanName,比如org.apache.dubbo.config.ApplicationConfig#0</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanName <span class="token operator">=</span> <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> beanName<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dubboconfigbindingbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#dubboconfigbindingbeanpostprocessor" aria-hidden="true">#</a> DubboConfigBindingBeanPostProcessor</h4><p>DubboConfigBindingBeanPostProcessor是一个BeanPostProcessor，在Spring启动过程中，会针对所有的Bean对象进行后置加工，但是在DubboConfigBindingBeanPostProcessor中有如下判断：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以DubboConfigBindingBeanPostProcessor并不会处理Spring容器中的所有Bean，它只会处理上文由Dubbo所生成的Bean对象。</p><p>并且，在afterPropertiesSet()方法中，会先创建一个DefaultDubboConfigBinder。</p><h5 id="代码注释-1" tabindex="-1"><a class="header-anchor" href="#代码注释-1" aria-hidden="true">#</a> 代码注释</h5><blockquote><p>只留了关键性的代码注释，其余省略</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Dubbo Config Binding <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">}</span>
 *
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">EnableDubboConfigBinding</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">DubboConfigBindingRegistrar</span></span>
 * <span class="token keyword">@since</span> 2.5.8
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigBindingBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span>
        <span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The prefix of Configuration Properties
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> prefix<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Binding Bean Name
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">DubboConfigBinder</span> dubboConfigBinder<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">BeanDefinitionRegistry</span> beanDefinitionRegistry<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> ignoreInvalidFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DubboConfigBeanCustomizer</span><span class="token punctuation">&gt;</span></span> configBeanCustomizers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span>   the prefix of Configuration Properties
     * <span class="token keyword">@param</span> <span class="token parameter">beanName</span> the binding Bean Name
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">DubboConfigBindingBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> <span class="token string">&quot;The prefix of Configuration Properties must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">&quot;The name of bean must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> prefix<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanName <span class="token operator">=</span> beanName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

     
        <span class="token comment">/*
        1.每个XxConfig对应一个BeanPostProcessor，所以每个DubboConfigBindingBeanPostProcessor只处理对应的beanName
	    2.阿里这里的代码写的很不好，没必要为每一个Bean都生成一个BeanPostProcessor，多余的加这个if判断，每一个Bean
         都会经过Dubbo生成的BeanPostProcessor，不停的if判断，直到找到自己的BeanPostProcessor。还好Dubbo后面的版本
         把这里改了。
        3.看过Spring源码的应该知道Spring的BeanPostProcessor是所有对象公用的，这种处理就比较好.
        */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token class-name">AbstractConfig</span> dubboConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractConfig</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>
            <span class="token comment">// 从properties文件中获取值，并设置到dubboConfig对象中</span>
            <span class="token function">bind</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> dubboConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 设置dubboConfig对象的name属性，设置为beanName</span>
            <span class="token function">customize</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dubboConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">AbstractConfig</span> dubboConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        dubboConfigBinder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> dubboConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The properties of bean [name : &quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">&quot;] have been binding by prefix of &quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;configuration properties : &quot;</span> <span class="token operator">+</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">AbstractConfig</span> dubboConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DubboConfigBeanCustomizer</span> customizer <span class="token operator">:</span> configBeanCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dubboConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 添加别名，id属性的值为别名</span>

            <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractConfig</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinitionRegistry <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> beanDefinitionRegistry <span class="token keyword">instanceof</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">DefaultListableBeanFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> beanDefinitionRegistry<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>factory<span class="token punctuation">.</span><span class="token function">hasAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">//这里建议看看Spring源码</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token function">initDubboConfigBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建DefaultDubboConfigBinder</span>

        <span class="token function">initConfigBeanCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDubboConfigBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>dubboConfigBinder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 先从Spring容器中获取DubboConfigBinder，默认获取不到</span>
                dubboConfigBinder <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DubboConfigBinder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;DubboConfigBinder Bean can&#39;t be found in ApplicationContext.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Use Default implementation</span>
                <span class="token comment">// 生成一个默认的</span>
                dubboConfigBinder <span class="token operator">=</span> <span class="token function">createDubboConfigBinder</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        dubboConfigBinder<span class="token punctuation">.</span><span class="token function">setIgnoreUnknownFields</span><span class="token punctuation">(</span>ignoreUnknownFields<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dubboConfigBinder<span class="token punctuation">.</span><span class="token function">setIgnoreInvalidFields</span><span class="token punctuation">(</span>ignoreInvalidFields<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initConfigBeanCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 得到之前创建了的NamePropertyDefaultValueDubboConfigBeanCustomizer</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DubboConfigBeanCustomizer</span><span class="token punctuation">&gt;</span></span> configBeanCustomizers <span class="token operator">=</span>
                <span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">,</span> <span class="token class-name">DubboConfigBeanCustomizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>configBeanCustomizers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>configBeanCustomizers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configBeanCustomizers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Create <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DubboConfigBinder</span></span><span class="token punctuation">}</span> instance.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">environment</span>
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DefaultDubboConfigBinder</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">protected</span> <span class="token class-name">DubboConfigBinder</span> <span class="token function">createDubboConfigBinder</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultDubboConfigBinder</span> defaultDubboConfigBinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultDubboConfigBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        defaultDubboConfigBinder<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> defaultDubboConfigBinder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionRegistry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionRegistry <span class="token operator">=</span> registry<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">//do nothing here</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="defaultdubboconfigbinder" tabindex="-1"><a class="header-anchor" href="#defaultdubboconfigbinder" aria-hidden="true">#</a> DefaultDubboConfigBinder</h4><p>当某个AbstractConfig类型的Bean，在经过DubboConfigBindingBeanPostProcessor处理时，此时Bean对象中的属性是没有值的，会利用DefaultDubboConfigBinder进行赋值。底层就是利用Spring中的DataBinder技术，结合properties文件对对应的属性进行赋值。</p><p>对应一个AbstractConfig类型（针对的其实是子类，比如ApplicationConfig、RegistryConfig）的Bean，每个类都有一些属性，而properties文件是一个key-value对，所以实际上DataBinder就是将属性名和properties文件中的key进行匹配，如果匹配成功，则把value赋值给属性。具体DataBinder技术是如何工作的，请自行学习（不难）。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dubbo<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>dubbo<span class="token operator">-</span>demo<span class="token operator">-</span>provider1<span class="token operator">-</span>application
dubbo<span class="token punctuation">.</span>application<span class="token punctuation">.</span>logger<span class="token operator">=</span>log4j
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于此配置，它对应ApplicationConfig对象（beanName是自动生成的），所以最终ApplicationConfig对象的name属性的值为“dubbo-demo-provider1-application”，logger属性的值为“log4j”。</p><p>对于</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>name<span class="token operator">=</span>dubbo
dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">20880</span>
dubbo<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它对应ProtocolConfig对象（beanName为p1）,所以最终ProtocolConfig对象的name属性的值为“dubbo”，port属性的值为20880，host属性的值为“0.0.0.0”。</p><p>这样就完成了对properties文件的解析。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultDubboConfigBinder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDubboConfigBinder</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfig</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">C</span> dubboConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DataBinder</span> dataBinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataBinder</span><span class="token punctuation">(</span>dubboConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Set ignored*</span>
        dataBinder<span class="token punctuation">.</span><span class="token function">setIgnoreInvalidFields</span><span class="token punctuation">(</span><span class="token function">isIgnoreInvalidFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataBinder<span class="token punctuation">.</span><span class="token function">setIgnoreUnknownFields</span><span class="token punctuation">(</span><span class="token function">isIgnoreUnknownFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Get properties under specified prefix from PropertySources</span>
        <span class="token comment">// getPropertySources()会拿到由@PropertySource注入进来的properties文件中的内容</span>
        <span class="token comment">// 同时还包括当前java的所有环境变量，包括手动通过-D添加的配置</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> properties <span class="token operator">=</span> <span class="token function">getSubProperties</span><span class="token punctuation">(</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Convert Map to MutablePropertyValues</span>
        <span class="token class-name">MutablePropertyValues</span> propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Bind</span>
        dataBinder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>propertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>DubboConfigConfigurationRegistrar的主要作用就是对propties文件进行解析并根据不同的配置项项生成对应类型的Bean对象。</p><h3 id="dubbocomponentscanregistrar" tabindex="-1"><a class="header-anchor" href="#dubbocomponentscanregistrar" aria-hidden="true">#</a> DubboComponentScanRegistrar</h3><p>DubboConfigConfigurationRegistrar的作用是向Spring容器中注册两个Bean:</p><ol><li>ServiceAnnotationBeanPostProcessor</li><li>ReferenceAnnotationBeanPostProcessor</li></ol><h4 id="代码注释-2" tabindex="-1"><a class="header-anchor" href="#代码注释-2" aria-hidden="true">#</a> 代码注释</h4><blockquote><p>部分代码注释</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Dubbo <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DubboComponentScan</span></span><span class="token punctuation">}</span> Bean Registrar
 *
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Service</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">DubboComponentScan</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ImportBeanDefinitionRegistrar</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ServiceAnnotationBeanPostProcessor</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ReferenceAnnotationBeanPostProcessor</span></span>
 * <span class="token keyword">@since</span> 2.5.7
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboComponentScanRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行DubboComponentScanRegistrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 拿到DubboComponentScan注解所定义的包路径，扫描该package下的类，识别这些类上</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan <span class="token operator">=</span> <span class="token function">getPackagesToScan</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注册ServiceAnnotationBeanPostProcessor一个Bean</span>
        <span class="token comment">// 实现了BeanDefinitionRegistryPostProcessor接口，所以在Spring启动时会调用postProcessBeanDefinitionRegistry方法</span>
        <span class="token comment">// 该方法会进行扫描，扫描@Service注解了的类，然后生成BeanDefinition（会生成两个，一个普通的bean，一个ServiceBean），后续的Spring周期中会生成Bean</span>
        <span class="token comment">// 在ServiceBean中会监听ContextRefreshedEvent事件，一旦Spring启动完后，就会进行服务导出</span>
        <span class="token function">registerServiceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注册ReferenceAnnotationBeanPostProcessor</span>
        <span class="token comment">// 实现了AnnotationInjectedBeanPostProcessor接口，继而实现了InstantiationAwareBeanPostProcessorAdapter接口</span>
        <span class="token comment">// 所以Spring在启动时，在对属性进行注入时会调用AnnotationInjectedBeanPostProcessor接口中的postProcessPropertyValues方法</span>
        <span class="token comment">// 在这个过程中会按照@Reference注解的信息去生成一个RefrenceBean对象</span>
        <span class="token function">registerReferenceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Registers <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServiceAnnotationBeanPostProcessor</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">packagesToScan</span> packages to scan without resolving placeholders
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>       <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanDefinitionRegistry</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@since</span> 2.5.8
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成一个RootBeanDefinition，对应的beanClass为ServiceAnnotationBeanPostProcessor.class</span>
        <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">ServiceAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将包路径作为在构造ServiceAnnotationBeanPostProcessor时调用构造方法时的传入参数</span>
        builder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerWithGeneratedName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Registers <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceAnnotationBeanPostProcessor</span></span><span class="token punctuation">}</span> into <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanFactory</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanDefinitionRegistry</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerReferenceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// Register @Reference Annotation Bean Processor</span>
        <span class="token comment">// 注册一个ReferenceAnnotationBeanPostProcessor做为bean，ReferenceAnnotationBeanPostProcessor是一个BeanPostProcessor</span>
        <span class="token class-name">BeanRegistrar</span><span class="token punctuation">.</span><span class="token function">registerInfrastructureBean</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span>
                <span class="token class-name">ReferenceAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token constant">BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
	<span class="token comment">//省略...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="serviceannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#serviceannotationbeanpostprocessor" aria-hidden="true">#</a> ServiceAnnotationBeanPostProcessor</h4><blockquote><p>主要就是处理@Service注解</p></blockquote><p><img src="`+r+'" alt="Alt text"></p><p>ServiceAnnotationBeanPostProcessor是一个BeanDefinitionRegistryPostProcessor，是用来注册BeanDefinition的。这个类的名字起的不太好。</p><p>它的主要作用是扫描Dubbo的@Service注解，一旦扫描到某个@Service注解就把它以及被它注解的类当做一个Dubbo服务，进行<strong>服务导出</strong>。</p><h5 id="dubboclasspathbeandefinitionscanner" tabindex="-1"><a class="header-anchor" href="#dubboclasspathbeandefinitionscanner" aria-hidden="true">#</a> DubboClassPathBeanDefinitionScanner</h5><p>DubboClassPathBeanDefinitionScanner是所Dubbo自定义的扫描器，继承了Spring中的ClassPathBeanDefinitionScanner了。</p><p>DubboClassPathBeanDefinitionScanner相对于ClassPathBeanDefinitionScanner并没有做太多的改变，只是把useDefaultFilters设置为了false，主要是因为Dubbo中的@Service注解是Dubbo自定义的，在这个注解上并没有用@Component注解（因为Dubbo不是一定要结合Spring才能用），所以为了能利用Spring的扫描逻辑，需要把useDefaultFilters设置为false。</p><p>每扫描到一个@Service注解，就会得到一个BeanDefinition，这个BeanDefinition的beanClass属性就是具体的服务实现类。</p><p>但，如果仅仅只是这样，这只是得到了一个Spring中的Bean，对于Dubbo来说此时得到的Bean是一个<strong>服务</strong>，并且，还需要解析@Service注解的配置信息，因为这些都是服务的参数信息，所以在扫描完了之后，会针对所得到的每个BeanDefinition，都会<strong>额外</strong>的再生成一个<strong>ServiceBean</strong>类型的Bean对象。</p><h5 id="servicebean" tabindex="-1"><a class="header-anchor" href="#servicebean" aria-hidden="true">#</a> ServiceBean</h5><p>ServiceBean表示一个Dubbo服务，它有一些参数，比如：</p><ol><li><strong>ref，表示服务的具体实现类</strong></li><li><strong>interface，表示服务的接口</strong></li><li><strong>parameters，表示服务的参数（@Service注解中所配置的信息）</strong></li><li><strong>application，表示服务所属的应用</strong></li><li><strong>protocols，表示服务所使用的协议</strong></li><li><strong>registries，表示服务所要注册的注册中心</strong></li></ol><p><strong>所以在扫描到一个@Service注解后，其实会得到两个Bean:</strong></p><ol><li>一个就是服务实现类本身一个Bean对象</li><li>一个就是对应的ServiceBean类型的一个Bean对象</li></ol><p>并且需要注意的是，ServiceBean实现了ApplicationListener接口，所以当Spring启动完成后会触发onApplicationEvent()方法的调用，而在这个方法内会调用<strong>export()</strong>，这个方法就是<strong>服务导出的入口方法</strong>。</p>',90),g={href:"https://www.yuque.com/renyong-jmovm/ufz328/gbwvk7",target:"_blank",rel:"noopener noreferrer"},y=t(`<h5 id="代码注释-3" tabindex="-1"><a class="header-anchor" href="#代码注释-3" aria-hidden="true">#</a> 代码注释</h5><blockquote><p>部分代码注释</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span><span class="token punctuation">}</span> Annotation
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanDefinitionRegistryPostProcessor</span></span> Bean Definition Registry Post Processor<span class="token punctuation">}</span>
 *
 * <span class="token keyword">@since</span> 2.5.8
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceAnnotationBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span>
        <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span> <span class="token punctuation">{</span>


    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> packagesToScan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServiceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>packagesToScan <span class="token operator">=</span> packagesToScan<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resolvedPackagesToScan <span class="token operator">=</span> <span class="token function">resolvePackagesToScan</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>resolvedPackagesToScan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 扫描包，进行Bean注册</span>
            <span class="token function">registerServiceBeans</span><span class="token punctuation">(</span>resolvedPackagesToScan<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;packagesToScan is empty , ServiceBean registry will be ignored!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Registers Beans whose classes was annotated <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">packagesToScan</span> The base packages to scan
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>       <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanDefinitionRegistry</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceBeans</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">DubboClassPathBeanDefinitionScanner</span> scanner <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">DubboClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanNameGenerator</span> beanNameGenerator <span class="token operator">=</span> <span class="token function">resolveBeanNameGenerator</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span>beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 扫描被Service注解标注的类，先成为Spring里的bean，也就是dubbo服务的实现类</span>
        scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span><span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * Add the compatibility for legacy Dubbo&#39;s @Service
         *
         * The issue : https://github.com/apache/dubbo/issues/4330
         * <span class="token keyword">@since</span> 2.7.3
         */</span>
        scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> packageToScan <span class="token operator">:</span> packagesToScan<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// Registers @Service Bean first</span>
            <span class="token comment">// 扫描Dubbo自定义的@Service注解</span>
            scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>packageToScan<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 查找被@Service注解的类的BeanDefinition（无论这个类有没有被@ComponentScan注解标注了）</span>
            <span class="token comment">// Finds all BeanDefinitionHolders of @Service whether @ComponentScan scans or not.</span>
            <span class="token comment">// beanDefinitionHolders装的就是dubbo服务的实现类，存在了Spring容器里</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">&gt;</span></span> beanDefinitionHolders <span class="token operator">=</span>
                    <span class="token function">findServiceBeanDefinitionHolders</span><span class="token punctuation">(</span>scanner<span class="token punctuation">,</span> packageToScan<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment">// 扫描到BeanDefinition开始处理它，准备生成ServiceBean</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionHolder</span> beanDefinitionHolder <span class="token operator">:</span> beanDefinitionHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">registerServiceBean</span><span class="token punctuation">(</span>beanDefinitionHolder<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> scanner<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; annotated Dubbo&#39;s @Service Components { &quot;</span> <span class="token operator">+</span>
                            beanDefinitionHolders <span class="token operator">+</span>
                            <span class="token string">&quot; } were scanned under package[&quot;</span> <span class="token operator">+</span> packageToScan <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No Spring Bean annotating Dubbo&#39;s @Service was found under package[&quot;</span>
                            <span class="token operator">+</span> packageToScan <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Registers <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServiceBean</span></span><span class="token punctuation">}</span> from new annotated <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanDefinition</span></span><span class="token punctuation">}</span>
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">beanDefinitionHolder</span>
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>
     * <span class="token keyword">@param</span> <span class="token parameter">scanner</span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ServiceBean</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">BeanDefinition</span></span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceBean</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionHolder</span> beanDefinitionHolder<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span>
                                     <span class="token class-name">DubboClassPathBeanDefinitionScanner</span> scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 服务实现类</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>beanDefinitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// @Service注解</span>
        <span class="token class-name">Annotation</span> service <span class="token operator">=</span> <span class="token function">findServiceAnnotation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationAttributes</span></span><span class="token punctuation">}</span> of @Service annotation
         */</span>
        <span class="token comment">// @Service注解上的信息</span>
        <span class="token class-name">AnnotationAttributes</span> serviceAnnotationAttributes <span class="token operator">=</span> <span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 服务实现类对应的接口</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass <span class="token operator">=</span> <span class="token function">resolveServiceInterfaceClass</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 服务实现类对应的bean的名字，比如：demoServiceImpl</span>
        <span class="token class-name">String</span> annotatedServiceBeanName <span class="token operator">=</span> beanDefinitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 生成一个ServiceBean</span>
        <span class="token class-name">AbstractBeanDefinition</span> serviceBeanDefinition <span class="token operator">=</span>
                <span class="token function">buildServiceBeanDefinition</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> serviceAnnotationAttributes<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">,</span> annotatedServiceBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ServiceBean Bean name</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token function">generateServiceBeanName</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> serviceBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// check duplicated candidate bean</span>

            <span class="token comment">// 把ServiceBean注册进去，对应的beanName为ServiceBean:org.apache.dubbo.demo.DemoService</span>
            registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> serviceBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;The BeanDefinition[&quot;</span> <span class="token operator">+</span> serviceBeanDefinition <span class="token operator">+</span>
                        <span class="token string">&quot;] of ServiceBean has been registered with name : &quot;</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;The Duplicated BeanDefinition[&quot;</span> <span class="token operator">+</span> serviceBeanDefinition <span class="token operator">+</span>
                        <span class="token string">&quot;] of ServiceBean[ bean name : &quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                        <span class="token string">&quot;] was be found , Did @DubboComponentScan scan to same package in many times?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Generates the bean name of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServiceBean</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">serviceAnnotationAttributes</span>
     * <span class="token keyword">@param</span> <span class="token parameter">interfaceClass</span>              the class of interface annotated <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@return</span> ServiceBean@interfaceClassName#annotatedServiceBeanName
     * <span class="token keyword">@since</span> 2.7.3
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">generateServiceBeanName</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> serviceAnnotationAttributes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceBeanNameBuilder</span> builder <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> environment<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Build the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractBeanDefinition</span></span> Bean Definition<span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">serviceAnnotation</span>
     * <span class="token keyword">@param</span> <span class="token parameter">serviceAnnotationAttributes</span>
     * <span class="token keyword">@param</span> <span class="token parameter">interfaceClass</span>
     * <span class="token keyword">@param</span> <span class="token parameter">annotatedServiceBeanName</span>
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@since</span> 2.7.3
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">AbstractBeanDefinition</span> <span class="token function">buildServiceBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Annotation</span> serviceAnnotation<span class="token punctuation">,</span>
                                                              <span class="token class-name">AnnotationAttributes</span> serviceAnnotationAttributes<span class="token punctuation">,</span>
                                                              <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">,</span>
                                                              <span class="token class-name">String</span> annotatedServiceBeanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 生成一个ServiceBean对应的BeanDefinition</span>
        <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">ServiceBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MutablePropertyValues</span> propertyValues <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		

        <span class="token comment">/*
        1.先忽略这些比较特殊的属性，为什么要忽略呢？
        2.其它不忽略的属性，在@Service注解上写的是字符串形式，ServiceBean里也是字符串类型，所以可以直接赋值
        3.下面的这些特殊属性，比如protocol，在注解上写的是@Service(protocol=&quot;p1&quot;)这样的字符串，但是在ServiceBean里
        对应的是ProtocolConfig类型的属性，不可能把字符串赋值给这类型。所以先忽略，后面可以看到单独处理了
        */</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ignoreAttributeNames <span class="token operator">=</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;provider&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;monitor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;registry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;protocol&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;interface&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;interfaceName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 把@Service注解中的参数值赋值给ServiceBean的属性</span>
        propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationPropertyValuesAdapter</span><span class="token punctuation">(</span>serviceAnnotation<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> ignoreAttributeNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// References &quot;ref&quot; property to annotated-@Service Bean</span>
        <span class="token comment">// ref属性赋值为另外一个bean, 对应的就是被@Service注解的服务实现类对应的bean</span>
        <span class="token function">addPropertyReference</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token string">&quot;ref&quot;</span><span class="token punctuation">,</span> annotatedServiceBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Set interface</span>
        builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;interface&quot;</span><span class="token punctuation">,</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Convert parameters into map</span>
        builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;parameters&quot;</span><span class="token punctuation">,</span> <span class="token function">convertParameters</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;parameters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 配置了methods属性，则给ServiceBean对应的methods属性赋值</span>
        <span class="token comment">// Add methods parameters</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodConfig</span><span class="token punctuation">&gt;</span></span> methodConfigs <span class="token operator">=</span> <span class="token function">convertMethodConfigs</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;methods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>methodConfigs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;methods&quot;</span><span class="token punctuation">,</span> methodConfigs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Add <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ProviderConfig</span></span><span class="token punctuation">}</span> Bean reference
         */</span>
        <span class="token class-name">String</span> providerConfigBeanName <span class="token operator">=</span> serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;provider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>providerConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addPropertyReference</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token string">&quot;provider&quot;</span><span class="token punctuation">,</span> providerConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Add <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">MonitorConfig</span></span><span class="token punctuation">}</span> Bean reference
         */</span>
        <span class="token class-name">String</span> monitorConfigBeanName <span class="token operator">=</span> serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;monitor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>monitorConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addPropertyReference</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token string">&quot;monitor&quot;</span><span class="token punctuation">,</span> monitorConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Add <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ApplicationConfig</span></span><span class="token punctuation">}</span> Bean reference
         */</span>
        <span class="token class-name">String</span> applicationConfigBeanName <span class="token operator">=</span> serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>applicationConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addPropertyReference</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token string">&quot;application&quot;</span><span class="token punctuation">,</span> applicationConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Add <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ModuleConfig</span></span><span class="token punctuation">}</span> Bean reference
         */</span>
        <span class="token class-name">String</span> moduleConfigBeanName <span class="token operator">=</span> serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>moduleConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addPropertyReference</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> moduleConfigBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token doc-comment comment">/**
         * Add <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">RegistryConfig</span></span><span class="token punctuation">}</span> Bean reference
         * 获取注解上配置的注册中心的beanName
         */</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> registryConfigBeanNames <span class="token operator">=</span> serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;registry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">&gt;</span></span> registryRuntimeBeanReferences <span class="token operator">=</span> <span class="token function">toRuntimeBeanReferences</span><span class="token punctuation">(</span>registryConfigBeanNames<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registryRuntimeBeanReferences<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;registries&quot;</span><span class="token punctuation">,</span> registryRuntimeBeanReferences<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/**
         * Add <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ProtocolConfig</span></span><span class="token punctuation">}</span> Bean reference
         */</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> protocolConfigBeanNames <span class="token operator">=</span> serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;protocol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">&gt;</span></span> protocolRuntimeBeanReferences <span class="token operator">=</span> <span class="token function">toRuntimeBeanReferences</span><span class="token punctuation">(</span>protocolConfigBeanNames<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>protocolRuntimeBeanReferences<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;protocols&quot;</span><span class="token punctuation">,</span> protocolRuntimeBeanReferences<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="referenceannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#referenceannotationbeanpostprocessor" aria-hidden="true">#</a> ReferenceAnnotationBeanPostProcessor</h4><blockquote><p>处理@Reference注解</p></blockquote><p><img src="`+k+`" alt="Alt text"></p><h5 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h5><p>ReferenceAnnotationBeanPostProcessor是处理@Reference注解的。</p><p>ReferenceAnnotationBeanPostProcessor的父类是AnnotationInjectedBeanPostProcessor，是一个InstantiationAwareBeanPostProcessorAdapter，是一个BeanPostProcessor。</p><p>Spring在对Bean进行依赖注入时会调用AnnotationInjectedBeanPostProcessor的postProcessPropertyValues()方法来给某个Bean按照ReferenceAnnotationBeanPostProcessor的逻辑进行依赖注入。</p><p>在注入之前会查找注入点，被@Reference注解的属性或方法都是注入点。</p><p>针对某个Bean找到所有注入点之后，就会进行注入了，注入就是给属性或给set方法赋值，但是在赋值之前得先得到一个值，此时就会调用ReferenceAnnotationBeanPostProcessor的<strong>doGetInjectedBean()<strong>方法来得到一个对象，而这个对象的构造就比较复杂了，因为对于Dubbo来说，注入给某个属性的应该是当前这个</strong>属性所对应的服务接口的代理对象</strong>。</p><p>但是在生成这个代理对象之前，还要考虑问题：</p><ol><li>当前所需要引入的这个服务，是不是在本地就存在(就是当前项目)？不存在则要把按Dubbo的逻辑生成一个代理对象</li><li>当前所需要引入的这个服务，是不是已经被引入过了（是不是已经生成过代理对象了），如果是应该是不用再重复去生成了。</li></ol><p><strong>首先如何判断当前所引入的服务是本地的一个服务（就是当前应用自己所提供的服务）。</strong></p><p>我们前面提到，Dubbo通过@Service来提供一个服务，并且会生成两个Bean：</p><ol><li>一个服务实现类本身Bean</li><li>一个ServiceBean类型的Bean，这个Bean的名字是这么生成的：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">generateServiceBeanName</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> serviceAnnotationAttributes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">ServiceBeanNameBuilder</span> builder <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> environment<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是通过接口类型+group+version来作为ServiceBean类型Bean的名字的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServiceBean</span><span class="token operator">:</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>DemoService</span><span class="token operator">:</span>group<span class="token operator">:</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以现在对于服务引入，也应该提前根据@Reference注解中的信息和属性接口类型去判断一下当前Spring容器中是否存在对应的ServiceBean对象，如果存在则直接取出ServiceBean对象的ref属性所对应的对象，作为要注入的结果。</p><p><strong>然后如何判断当前所引入的这个服务是否已经被引入过了</strong>**（是不是已经生成过代理对象了）。**</p><p>这就需要在第一次引入某个服务后（生成代理对象后）进行缓存（记录一下）。Dubbo中是这么做的:</p><ol><li>首先根据@Reference注解的所有信息+属性接口类型生成一个<strong>字符串</strong></li><li>然后@Reference注解的所有信息+属性接口类型生成一个ReferenceBean对象（<strong>ReferenceBean对象中的get方法可以得到一个Dubbo生成的代理对象，可以理解为服务引入的入口方法</strong>）</li><li>把字符串作为beanName，ReferenceBean对象作为bean注册到Spring容器中，同时也会放入<strong>referenceBeanCache</strong>中。</li></ol><p>有了这些逻辑，@Reference注解服务引入的过程是这样的：</p><ol><li><p>得到当前所引入服务对应的ServiceBean的beanName（源码中叫referencedBeanName）</p></li><li><p>根据@Reference注解的所有信息+属性接口类型得到一个referenceBeanName</p></li><li><p>根据referenceBeanName从<strong>referenceBeanCach</strong>e获取对应的ReferenceBean，如果没有则创建一个ReferenceBean</p></li><li><p>根据referencedBeanName（ServiceBean的beanName）判断Spring容器中是否存在该bean，如果存在则给ref属性所对应的bean取一个别名，别名为referenceBeanName。</p><ol><li>如果Spring容器中不存在referencedBeanName对应的bean，则判断容器中是否存在referenceBeanName所对应的Bean，如果不存在则将创建出来的ReferenceBean注册到Spring容器中（**此处这么做就支持了可以通过@Autowired注解也可以使用服务了，**<strong>ReferenceBean是一个FactoryBean</strong>）</li></ol></li><li><p>如果referencedBeanName存在对应的Bean，则额外生成一个代理对象，代理对象的InvocationHandler会缓存在<strong>localReferenceBeanInvocationHandlerCache中，这样如果引入的是同一个服务，并且这个服务在本地，</strong></p></li><li><p>如果referencedBeanName不存在对应的Bean，则直接调用ReferenceBean的get()方法得到一个代理对象</p></li></ol><h5 id="annotationinjectedbeanpostprocessor代码注释" tabindex="-1"><a class="header-anchor" href="#annotationinjectedbeanpostprocessor代码注释" aria-hidden="true">#</a> AnnotationInjectedBeanPostProcessor代码注释</h5><blockquote><p>这个类是Spring的类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">AnnotationInjectedBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> annotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>annotationTypes<span class="token punctuation">,</span> <span class="token string">&quot;The argument of annotations&#39; types must not empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>annotationTypes <span class="token operator">=</span> annotationTypes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>
            <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 寻找需要注入的属性（被@Reference标注的Field），也就是寻找注入点</span>
        <span class="token class-name">InjectionMetadata</span> metadata <span class="token operator">=</span> <span class="token function">findInjectionMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">&quot;Injection of @&quot;</span> <span class="token operator">+</span> <span class="token function">getAnnotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">+</span> <span class="token string">&quot; dependencies is failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pvs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	 <span class="token keyword">private</span> <span class="token class-name">InjectionMetadata</span> <span class="token function">findInjectionMetadata</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Fall back to class name as cache key, for backwards compatibility with custom callers.</span>
        <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span> beanName <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Quick check on the concurrent map first, with minimal locking.</span>
        <span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedInjectionMetadata</span> metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        metadata<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        metadata <span class="token operator">=</span> <span class="token function">buildAnnotatedMetadata</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to introspect object class [&quot;</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                                <span class="token string">&quot;] for annotation metadata: could not find class that it depends on&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> metadata<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	    <span class="token keyword">private</span> <span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedInjectionMetadata</span> <span class="token function">buildAnnotatedMetadata</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 哪些Filed上有@Reference注解</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedFieldElement</span><span class="token punctuation">&gt;</span></span> fieldElements <span class="token operator">=</span> <span class="token function">findFieldAnnotationMetadata</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 哪些方法上有@Reference注解</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedMethodElement</span><span class="token punctuation">&gt;</span></span> methodElements <span class="token operator">=</span> <span class="token function">findAnnotatedMethodMetadata</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回的是Dubbo定义的AnnotatedInjectionMetadata，接下来就会使用这个类去进行属性注入</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedInjectionMetadata</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> fieldElements<span class="token punctuation">,</span> methodElements<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Annotation</span></span> Annotated<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InjectionMetadata</span></span><span class="token punctuation">}</span> implementation
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">AnnotatedInjectionMetadata</span> <span class="token keyword">extends</span> <span class="token class-name">InjectionMetadata</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedFieldElement</span><span class="token punctuation">&gt;</span></span> fieldElements<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedMethodElement</span><span class="token punctuation">&gt;</span></span> methodElements<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">AnnotatedInjectionMetadata</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedFieldElement</span><span class="token punctuation">&gt;</span></span> fieldElements<span class="token punctuation">,</span>
                                          <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedMethodElement</span><span class="token punctuation">&gt;</span></span> methodElements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> <span class="token function">combine</span><span class="token punctuation">(</span>fieldElements<span class="token punctuation">,</span> methodElements<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fieldElements <span class="token operator">=</span> fieldElements<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>methodElements <span class="token operator">=</span> methodElements<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedFieldElement</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFieldElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> fieldElements<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnnotationInjectedBeanPostProcessor<span class="token punctuation">.</span>AnnotatedMethodElement</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMethodElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> methodElements<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Annotation</span></span> Annotated<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Method</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token class-name">InjectedElement</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">AnnotatedMethodElement</span> <span class="token keyword">extends</span> <span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Method</span> method<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Object</span> object<span class="token punctuation">;</span>

        <span class="token keyword">protected</span> <span class="token class-name">AnnotatedMethodElement</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">PropertyDescriptor</span> pd<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> pd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

            <span class="token comment">// set方法对应的属性的类型</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> injectedType <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 从Spring容器中获取一个Bean（注意，这个方法内部会生成Bean而且会缓存，就像Spring中的getBean一样）</span>
            <span class="token class-name">Object</span> injectedObject <span class="token operator">=</span> <span class="token function">getInjectedObject</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> injectedType<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 调用set方法</span>
            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> injectedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Annotation</span></span> Annotated<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Field</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token class-name">InjectedElement</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotatedFieldElement</span> <span class="token keyword">extends</span> <span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Field</span> field<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Object</span> bean<span class="token punctuation">;</span>

        <span class="token keyword">protected</span> <span class="token class-name">AnnotatedFieldElement</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">=</span> field<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token comment">// 给bean对象进行属性赋值</span>

            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> injectedType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 获取对象，然后进行注入</span>
            <span class="token class-name">Object</span> injectedObject <span class="token operator">=</span> <span class="token function">getInjectedObject</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> injectedType<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 字段赋值，injectedObject就是值</span>
            field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> injectedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

	 <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getInjectedObject</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> injectedType<span class="token punctuation">,</span>
                                       <span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span> injectedElement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// ServiceBean:org.apache.dubbo.demo.DemoService#source=private org.apache.dubbo.demo.DemoService org.apache.dubbo.demo.consumer.comp.DemoServiceComponent.demoService#attributes={parameters=[Ljava.lang.String;@42e25b0b}</span>
        <span class="token comment">// 哪个Service应用了哪个类型的服务，通过什么方式引入的</span>
        <span class="token comment">// cacheKey很鸡肋，属性名不一样的时候，cacheKey不一样，导致不能缓存， 在一个Service中@Reference两次同一个服务缓存不到</span>
        <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token function">buildInjectedObjectCacheKey</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> injectedType<span class="token punctuation">,</span> injectedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
       
		
        <span class="token class-name">Object</span> injectedObject <span class="token operator">=</span> injectedObjectsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>injectedObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// // 这里会调用子类的方法生成Bean，这里的子类指的就是ReferenceAnnotationBeanPostProcessor</span>
            injectedObject <span class="token operator">=</span> <span class="token function">doGetInjectedBean</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> injectedType<span class="token punctuation">,</span> injectedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Customized inject-object if necessary</span>
            injectedObjectsCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> injectedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> injectedObject<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="referenceannotationbeanpostprocessor代码注释" tabindex="-1"><a class="header-anchor" href="#referenceannotationbeanpostprocessor代码注释" aria-hidden="true">#</a> ReferenceAnnotationBeanPostProcessor代码注释</h5><blockquote><p>部分注释</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">}</span> implementation
 * that Consumer service <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Reference</span></span><span class="token punctuation">}</span> annotated fields
 *
 * <span class="token keyword">@since</span> 2.5.7
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceAnnotationBeanPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AnnotationInjectedBeanPostProcessor</span> <span class="token keyword">implements</span>
        <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationListener</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * The bean name of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceAnnotationBeanPostProcessor</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;referenceAnnotationBeanPostProcessor&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Cache size
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CACHE_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token constant">BEAN_NAME</span> <span class="token operator">+</span> <span class="token string">&quot;.cache.size&quot;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> referenceBeanCache <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">CACHE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceBeanInvocationHandler</span><span class="token punctuation">&gt;</span></span> localReferenceBeanInvocationHandlerCache <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">CACHE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> injectedFieldReferenceBeanCache <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">CACHE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> injectedMethodReferenceBeanCache <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">CACHE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * To support the legacy annotation that is @com.alibaba.dubbo.config.annotation.Reference since 2.7.3
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ReferenceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">////调用AnnotationInjectedBeanPostProcessor的构造</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Reference</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>Reference</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Gets all beans of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@return</span> non-null read-only <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Collection</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@since</span> 2.5.9
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReferenceBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getReferenceBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> referenceBeanCache<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Map</span></span><span class="token punctuation">}</span> in injected field.
     *
     * <span class="token keyword">@return</span> non-null <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Map</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@since</span> 2.5.11
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInjectedFieldReferenceBeanMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>injectedFieldReferenceBeanCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Map</span></span><span class="token punctuation">}</span> in injected method.
     *
     * <span class="token keyword">@return</span> non-null <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Map</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@since</span> 2.5.11
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInjectedMethodReferenceBeanMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>injectedMethodReferenceBeanCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 该方法得到的对象会赋值给@ReferenceBean注解的属性</span>
    <span class="token comment">//</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doGetInjectedBean</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> injectedType<span class="token punctuation">,</span>
                                       <span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span> injectedElement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>


        <span class="token comment">// 按ServiceBean的beanName生成规则来生成referencedBeanName， 规则为ServiceBean:interfaceClassName:version:group</span>
        <span class="token class-name">String</span> referencedBeanName <span class="token operator">=</span> <span class="token function">buildReferencedBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*
        1.相当于根据@Reference注解的信息(包括注解括号里的参数)按照toString的逻辑，生成referenceBeanName，这个东西是作为缓存的key
          实际上是进行了一些字符串的转换啥的，不用关心
        2.注意referencedBeanName和referenceBeanName的区别【一个有d字母，一个没有】。referencedBeanName是ServiceBean的
        名字。referenceBeanName是ReferenceBean的名字
        */</span>
        <span class="token class-name">String</span> referenceBeanName <span class="token operator">=</span> <span class="token function">getReferenceBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 生成一个ReferenceBean对象</span>
        <span class="token class-name">ReferenceBean</span> referenceBean <span class="token operator">=</span> <span class="token function">buildReferenceBeanIfAbsent</span><span class="token punctuation">(</span>referenceBeanName<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 把referenceBean添加到Spring容器中去</span>
        <span class="token function">registerReferenceBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
        <span class="token comment">//缓存注入点，不重要</span>
        <span class="token function">cacheInjectedReferenceBean</span><span class="token punctuation">(</span>referenceBean<span class="token punctuation">,</span> injectedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个代理对象，Service中的属性被注入的就是这个代理对象</span>
        <span class="token comment">// 内部会调用referenceBean.get();</span>
        <span class="token keyword">return</span> <span class="token function">getOrCreateProxy</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">,</span> referenceBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Register an instance of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> as a Spring Bean
     *
     * <span class="token keyword">@param</span> <span class="token parameter">referencedBeanName</span> The name of bean that annotated Dubbo&#39;s <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span> @Service<span class="token punctuation">}</span> in the Spring <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">referenceBean</span>      the instance of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> is about to register into the Spring <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">attributes</span>         the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationAttributes</span></span> attributes<span class="token punctuation">}</span> of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Reference</span></span> @Reference<span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">interfaceClass</span>     the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Class</span></span> class<span class="token punctuation">}</span> of Service interface
     * <span class="token keyword">@since</span> 2.7.3
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerReferenceBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> referencedBeanName<span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span> referenceBean<span class="token punctuation">,</span>
                                       <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span>
                                       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 就是referenceBeanName</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token function">getReferenceBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 当前Spring容器中是否存在referencedBeanName</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">existsServiceBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// If @Service bean is local one</span>
            <span class="token doc-comment comment">/**
             * Get  the @Service&#39;s BeanDefinition from <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">BeanFactory</span></span><span class="token punctuation">}</span>
             * Refer to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServiceAnnotationBeanPostProcessor</span><span class="token punctuation">#</span><span class="token field">buildServiceBeanDefinition</span></span><span class="token punctuation">}</span>
             */</span>
            <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RuntimeBeanReference</span> runtimeBeanReference <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">)</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ref&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ServiceBean --- ref</span>
            <span class="token comment">// The name of bean annotated @Service</span>
            <span class="token class-name">String</span> serviceBeanName <span class="token operator">=</span> runtimeBeanReference<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DemoServiceImpl对应的beanName</span>
            <span class="token comment">// register Alias rather than a new bean name, in order to reduce duplicated beans</span>
            <span class="token comment">// DemoServiceImpl多了一个别名</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>serviceBeanName<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// Remote @Service Bean</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                1.放入Spring容器里的应该是DemoService的实现类的代理对象，但是这里放的却是referenceBean类型对象
                2.referenceBean的父类有个get()可以直接获取到代理对象，那这里为啥不放呢？其实是为了支持@Autowire注解
                3.首先ReferenceBean实现了Spring的FactoryBean接口,FactoryBean获取对象时是这样的调用顺序
                	FactoryBean.getObject()  ==&gt;  getObject().get()  ==&gt;最终调子类ReferenceBean#get()
                 刚好给@Autowire注解注入了代理对象
                */</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get the bean name of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Reference</span><span class="token punctuation">#</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> id attribute<span class="token punctuation">}</span> is present,
     * or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">generateReferenceBeanName</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">)</span></span> generate<span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">attributes</span>     the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationAttributes</span></span> attributes<span class="token punctuation">}</span> of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Reference</span></span> @Reference<span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">interfaceClass</span> the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Class</span></span> class<span class="token punctuation">}</span> of Service interface
     * <span class="token keyword">@return</span> non-null
     * <span class="token keyword">@since</span> 2.7.3
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getReferenceBeanName</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// id attribute appears since 2.7.3</span>
        <span class="token class-name">String</span> beanName <span class="token operator">=</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// beanName为null时会进入if判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanName <span class="token operator">=</span> <span class="token function">generateReferenceBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> beanName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Build the bean name of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">attributes</span>     the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AnnotationAttributes</span></span> attributes<span class="token punctuation">}</span> of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Reference</span></span> @Reference<span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">interfaceClass</span> the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Class</span></span> class<span class="token punctuation">}</span> of Service interface
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@since</span> 2.7.3
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">generateReferenceBeanName</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> beanNameBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;@Reference&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>attributes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanNameBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> attributes<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanNameBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;=&#39;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// replace the latest &quot;,&quot; to be &quot;)&quot;</span>
            beanNameBuilder<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>beanNameBuilder<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        beanNameBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> beanNameBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">existsServiceBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> referencedBeanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Get or Create a proxy of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> for the specified the type of Dubbo service interface
     *
     * <span class="token keyword">@param</span> <span class="token parameter">referencedBeanName</span>   The name of bean that annotated Dubbo&#39;s <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span> @Service<span class="token punctuation">}</span> in the Spring <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">referenceBeanName</span>    the bean name of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">referenceBean</span>        the instance of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">serviceInterfaceType</span> the type of Dubbo service interface
     * <span class="token keyword">@return</span> non-null
     * <span class="token keyword">@since</span> 2.7.4
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getOrCreateProxy</span><span class="token punctuation">(</span><span class="token class-name">String</span> referencedBeanName<span class="token punctuation">,</span> <span class="token class-name">String</span> referenceBeanName<span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span> referenceBean<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> serviceInterfaceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
        1.引入的服务在Spirng容器里有，说明是本项目的bean，按理来说应该直接把DemoService的实现类赋给@Reference注解标注的属性
        2.但实际上不是，@Reference实际上最后赋值的是一个代理对象，因为除开需要执行DemoService的实现类里的方法，@Reference
        注解标注的属性还需要实现其它很多逻辑，实现这些增强逻辑之后最终才执行的DemoService的实现类里的方法。如果直接赋值
        DemoServiceImpl，那么Dubbo里面的很多逻辑就走不到了
        */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">existsServiceBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// If the local @Service Bean exists, build a proxy of ReferenceBean</span>
            <span class="token comment">//wrapInvocationHandler最后也会调用referenceBean.get()，其实和下面的else一样</span>
            <span class="token keyword">return</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>serviceInterfaceType<span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token function">wrapInvocationHandler</span><span class="token punctuation">(</span>referenceBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    <span class="token comment">// ReferenceBean should be initialized and get immediately</span>
            <span class="token comment">// 重点，最终从这里赋值给@Reference注解标注的属性</span>
            <span class="token keyword">return</span> referenceBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Wrap an instance of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">}</span> that is used to get the proxy of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span> after
     * the specified local referenced bean that annotated <span class="token punctuation">{</span><span class="token keyword">@link</span> @Service<span class="token punctuation">}</span> exported.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">referenceBeanName</span> the bean name of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">referenceBean</span>     the instance of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ReferenceBean</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@return</span> non-null
     * <span class="token keyword">@since</span> 2.7.4
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">InvocationHandler</span> <span class="token function">wrapInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> referenceBeanName<span class="token punctuation">,</span> <span class="token class-name">ReferenceBean</span> referenceBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> localReferenceBeanInvocationHandlerCache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>referenceBeanName<span class="token punctuation">,</span> name <span class="token operator">-&gt;</span>
                <span class="token keyword">new</span> <span class="token class-name">ReferenceBeanInvocationHandler</span><span class="token punctuation">(</span>referenceBean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceBeanInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReferenceBean</span> referenceBean<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">Object</span> bean<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">ReferenceBeanInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">ReferenceBean</span> referenceBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>referenceBean <span class="token operator">=</span> referenceBean<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// If the bean is not initialized, invoke init()</span>
                    <span class="token comment">// issue: https://github.com/apache/dubbo/issues/3429</span>
                    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// re-throws the actual Exception.</span>
                <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bean <span class="token operator">=</span> referenceBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">buildInjectedObjectCacheKey</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span>
                                                 <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> injectedType<span class="token punctuation">,</span> <span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span> injectedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildReferencedBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span> <span class="token operator">+</span>
                <span class="token string">&quot;#source=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>injectedElement<span class="token punctuation">.</span><span class="token function">getMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                <span class="token string">&quot;#attributes=&quot;</span> <span class="token operator">+</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">attributes</span>           the attributes of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Reference</span></span> @Reference<span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">serviceInterfaceType</span> the type of Dubbo&#39;s service interface
     * <span class="token keyword">@return</span> The name of bean that annotated Dubbo&#39;s <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Service</span></span> @Service<span class="token punctuation">}</span> in local Spring <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildReferencedBeanName</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> serviceInterfaceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceBeanNameBuilder</span> serviceBeanNameBuilder <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> serviceInterfaceType<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceBeanNameBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ReferenceBean</span> <span class="token function">buildReferenceBeanIfAbsent</span><span class="token punctuation">(</span><span class="token class-name">String</span> referenceBeanName<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">,</span>
                                                     <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> referencedType<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	    
        <span class="token comment">/*
        1.key就是@Reference注解最终生成的字符串,value却不是简单的代理对象
        2.一个ServiceBean表示一个Dubbo服务，ReferenceBean表示引用的哪个dubbo服务
        3.所以ReferenceBean不是简单的代理对象，他保存了诸如超时时间,轮询参数等等这些东西
        【和ServcieBean很类似,ServcieBean也保存了这些东西】
        4.ReferenceBean的父类ReferenceConfig#get()最终返回代理对象
        5.ServiceBean和ReferenceBean思想基本上是一样的
        6.ReferenceBean最终会放入缓存，赋值给@Reference注解所标注的属性的依然是代理对象
        */</span>
        <span class="token class-name">ReferenceBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> referenceBean <span class="token operator">=</span> referenceBeanCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>referenceBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>referenceBean <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 生成了一个ReferenceBean对象，attributes是@Reference注解的参数值</span>
            <span class="token class-name">ReferenceBeanBuilder</span> beanBuilder <span class="token operator">=</span> <span class="token class-name">ReferenceBeanBuilder</span>
                    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">interfaceClass</span><span class="token punctuation">(</span>referencedType<span class="token punctuation">)</span><span class="token punctuation">;</span>
            referenceBean <span class="token operator">=</span> beanBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            referenceBeanCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>referenceBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>referencedType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>referenceBean<span class="token punctuation">.</span><span class="token function">getInterfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;reference bean name &quot;</span> <span class="token operator">+</span> referenceBeanName <span class="token operator">+</span> <span class="token string">&quot; has been duplicated, but interfaceClass &quot;</span> <span class="token operator">+</span>
                    referenceBean<span class="token punctuation">.</span><span class="token function">getInterfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; cannot be assigned to &quot;</span> <span class="token operator">+</span> referencedType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> referenceBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheInjectedReferenceBean</span><span class="token punctuation">(</span><span class="token class-name">ReferenceBean</span> referenceBean<span class="token punctuation">,</span>
                                            <span class="token class-name">InjectionMetadata<span class="token punctuation">.</span>InjectedElement</span> injectedElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>injectedElement<span class="token punctuation">.</span><span class="token function">getMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Field</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            injectedFieldReferenceBeanCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>injectedElement<span class="token punctuation">,</span> referenceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>injectedElement<span class="token punctuation">.</span><span class="token function">getMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            injectedMethodReferenceBeanCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>injectedElement<span class="token punctuation">,</span> referenceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ServiceBeanExportedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">onServiceBeanExportEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServiceBeanExportedEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">onContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onServiceBeanExportEvent</span><span class="token punctuation">(</span><span class="token class-name">ServiceBeanExportedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceBean</span> serviceBean <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getServiceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">initReferenceBeanInvocationHandler</span><span class="token punctuation">(</span>serviceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initReferenceBeanInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">ServiceBean</span> serviceBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> serviceBeanName <span class="token operator">=</span> serviceBean<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Remove ServiceBean when it&#39;s exported</span>
        <span class="token class-name">ReferenceBeanInvocationHandler</span> handler <span class="token operator">=</span> localReferenceBeanInvocationHandlerCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>serviceBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Initialize</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            handler<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>referenceBeanCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>localReferenceBeanInvocationHandlerCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>injectedFieldReferenceBeanCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>injectedMethodReferenceBeanCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function B(w,C){const a=o("ExternalLinkIcon");return c(),i("div",null,[v,m,n("p",null,[n("a",b,[s("https://www.yuque.com/books/share/f2394ae6-381b-4f44-819e-c231b39c1497"),e(a)]),s("（密码：kyys） 《Dubbo笔记》")]),f,n("blockquote",null,[n("p",null,[s("关于RuntimeBeanReference参考"),n("a",g,[s("https://www.yuque.com/renyong-jmovm/ufz328/gbwvk7"),e(a)]),s("。")])]),y])}const S=p(d,[["render",B],["__file","04.DubboyuanmaxilieV1-Dubbodisijie-SpringyuDubbozhengheyuanliyuyuanmafenxi.html.vue"]]);export{S as default};
