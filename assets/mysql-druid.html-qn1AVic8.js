import{_ as i,r as o,o as p,c as l,a as n,b as s,d as e,e as t}from"./app-GjP6hEVt.js";const c="/code-note-page1/assets/image-198-wrvont0q.png",r="/code-note-page1/assets/image-199-W8SdZjpf.png",d="/code-note-page1/assets/image-200-YJWE5JRV.png",u="/code-note-page1/assets/image-201-jL1P7jDx.png",m="/code-note-page1/assets/image-202-TC7CrYek.png",g="/code-note-page1/assets/image-203-PTkWFdNB.png",v="/code-note-page1/assets/image-204-evDQ0jar.png",k="/code-note-page1/assets/image-205-GmucpVTc.png",b="/code-note-page1/assets/image-206-kgViLGup.png",h="/code-note-page1/assets/image-207-FtgtJ8Fv.png",_="/code-note-page1/assets/image-208-DPT3rK-P.png",y="/code-note-page1/assets/image-209-R-Byt5Kh.png",f="/code-note-page1/assets/image-210-mzBemi0Q.png",x="/code-note-page1/assets/image-211-DH_c4xdF.png",S="/code-note-page1/assets/image-212-ywK7xTf1.png",q="/code-note-page1/assets/image-213-Du1l3OFa.png",w="/code-note-page1/assets/image-214-0qX53ZBz.png",L="/code-note-page1/assets/image-215-3nZDouhO.png",I={},A=n("h2",{id:"mysql-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql-简介","aria-hidden":"true"},"#"),s(" MySQL 简介")],-1),D=n("p",null,"MySQL 是目前项目中运用最广泛的关系型数据库，无论是互联网大厂，还是中小型公司，几乎都在用。",-1),T=n("p",null,"MySQL 体积小、速度快、源码开放，所以广受开发者喜爱。",-1),Q=n("p",null,"MySQL 的安装非常简单，针对不同的操作系统，MySQL 都提供了安装包的下载。",-1),M=n("p",null,[n("img",{src:c,alt:"Alt text"})],-1),j=n("p",null,"MySQL 目前主推的版本是 8.0，参考手册的地址如下所示：",-1),B={href:"https://dev.mysql.com/doc/refman/8.0/en/",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"如何安装-mysql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何安装-mysql","aria-hidden":"true"},"#"),s(" 如何安装 MySQL")],-1),E=n("p",null,"如果有云服务器的话，建议安装在云服务器上，这样就可以长时间运行 MySQL 而不用担心服务重启的问题。按照步骤参照下面的文档。",-1),C={href:"https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"也可以直接通过宝塔面板的形式来安装，这样更省事省力省心。",-1),U={href:"https://www.bt.cn/new/download.html",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,[n("img",{src:r,alt:"Alt text"})],-1),J=n("p",null,"安装完成后，就可以在数据库管理页面添加数据库并且进行管理了。",-1),P=n("p",null,[n("img",{src:d,alt:"Alt text"})],-1),F=n("p",null,"如果是 Windows 用户的话，安装步骤参照下面的文档。",-1),V={href:"https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html",target:"_blank",rel:"noopener noreferrer"},z=n("p",null,"如果是 macOS 用户的话，安装步骤参照下面的文档。",-1),G={href:"https://dev.mysql.com/doc/refman/8.0/en/macos-installation-pkg.html",target:"_blank",rel:"noopener noreferrer"},H=t('<p>Windows 和 macOS 的安装都非常的简单，主要就是下载对应操作系统的 MySQL 包安装管理器。</p><p><img src="'+u+'" alt="Alt text"></p><p>然后按照包安装向导的提示一步步傻瓜式安装即可。</p><p><img src="'+m+'" alt="Alt text"></p><h2 id="spring-boot-整合-mysql-数据库" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-mysql-数据库" aria-hidden="true">#</a> Spring Boot 整合 MySQL 数据库</h2><p>Spring Boot 整合 MySQL 数据库非常简单，只需要添加 MySQL 依赖并在配置文件中添加数据库配置即可。我们可以不用编写原始的访问数据库的代码，也不用调用 JDBC 或者连接池就可以访问 MySQL。</p><p>1）使用 Intellij IDEA 新建一个 Spring Boot 项目，使用 Java 8 版本「社区版没有此功能，需要到 (Spring initializr)[https://start.spring.io/]）生成项目后导入，推荐使用旗舰版，功能更加强大」。</p><p><img src="'+g+'" alt="Alt text"></p><p>添加 MySQL 的 Java连接驱动依赖和 JDBC Starter。</p><p><img src="'+v+`" alt="Alt text"></p><p>对应pom.xml文件中的代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）通过宝塔面板新建codingmore-mysql数据库并添加数据表</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE TABLE \`user\` (
  \`id\` int NOT NULL,
  \`name\` varchar(10) NOT NULL,
  \`password\` varchar(10) NOT NULL,
  \`age\` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

--
-- 转储表的索引
--

--
-- 表的索引 \`user\`
--
ALTER TABLE \`user\`
  ADD PRIMARY KEY (\`id\`);
COMMIT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后插入一条数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INSERT INTO \`user\` (\`id\`, \`name\`, \`password\`, \`age\`) VALUES (&#39;1&#39;, &#39;沉默王二&#39;, &#39; 123456&#39;, &#39;18&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我把 SQL 语句放在源码的 resouces 目录里了</p><p><strong>3）在 application.yml 文件中添加数据库链接驱动信息</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring:
  datasource:
    username: codingmore-mysql
    password: YyfR4TDxCwrjZ2Fs
    url:jdbc: mysql://118.190.99.232:3306/codingmore-mysql?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐安装 Spring Initializr and assistant 插件。可以自动补全配置信息。</p><p><img src="`+k+`" alt="Alt text"></p><p><strong>4）新建实体类 User.java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议在 pom.xml 文件中添加 lombok 的依赖。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.20&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5）在测试类中添加以下代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> <span class="token class-name">CodingmoreMysqlApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
                <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> user<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;查询成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户{}&quot;</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 的测试类主要放置在 <code>src/test/java</code> 目录下面，项目创建成功后，Spring Boot 会根据项目名称自动为我们生成测试类。</p><p>比如说本次项目名为 codingmore-mysql，那么测试类名为 CodingmoreMysqlApplicationTests。</p><p><code>@SpringBootTest</code> 注解能够测试我们的项目主类，该项目为 CodingmoreMysqlApplication。</p><p><code>@Test</code> 注解是 junit 单元测试的注解，表示该方法为测试方法。</p><p><code>JdbcTemplate</code> 一个通过 JDBC 连接数据库的工具类，spring-boot-starter-jdbc 依赖中包含了该类。</p><p><code>@Resource</code> 注解会帮我们在 Spring Boot 启动的时候注入一个 JdbcTemplate 的对象。</p><p><code>jdbcTemplate.query()</code> 方法通过 SQL 语句和匿名内部类参数的形式，执行 SQL 并查询结果集。</p><p><code>RowMapper</code> 就是查询到的每一行数据对象，我们可以通过重写 mapRow 方法将数据结果集封装到 User 对象上。</p><p>右键菜单运行 testMysql 方法就可以在日志中看到 SQL 执行的结果。</p><p><img src="`+b+'" alt="Alt text"></p><h2 id="如何通过-navicat-连接-mysql" tabindex="-1"><a class="header-anchor" href="#如何通过-navicat-连接-mysql" aria-hidden="true">#</a> 如何通过 Navicat 连接 MySQL</h2><p>Navicat 是一个从我参加工作到现在一直都在用的 MySQL 客户端工具，通过 Navicat 可以轻松连接数据库，并执行增删改查操作。</p><p><img src="'+h+'" alt="Alt text"></p><p>连接数据库也非常的简单，只需要填写主机 IP 地址、端口、用户名和密码即可。</p><p><img src="'+_+'" alt="Alt text"></p><h2 id="如何通过-intellij-idea-连接-mysql" tabindex="-1"><a class="header-anchor" href="#如何通过-intellij-idea-连接-mysql" aria-hidden="true">#</a> 如何通过 Intellij IDEA 连接 MySQL</h2><p>除了 Navicat，还可以使用 Intellij IDEA 直连 MySQL。</p><p>点击「database」面板，在左上角选择 + 号，选择 DataSource，再选择 MySQL。</p><p><img src="'+y+'" alt="Alt text"></p><p>在弹出面板中填写连接信息。</p><p><img src="'+f+'" alt="Alt text"></p><p>如果是第一次连接 MySQL 的话，记得点击「download」下载 MySQL 驱动，之后点击「test connection」测试是否链接成功，如果出现以下界面，则表示 OK。</p><p><img src="'+x+'" alt="Alt text"></p><p>选择右侧的数据库表，双击，就可以查看到数据了。</p><p><img src="'+S+'" alt="Alt text"></p><p>在「console」SQL 查询面板里可以编写 SQL 语句来执行增删改查操作。</p><p><img src="'+q+'" alt="Alt text"></p><h2 id="spring-boot-整合-druid" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-druid" aria-hidden="true">#</a> Spring Boot 整合 Druid</h2><p>Druid 是阿里巴巴开源的一款数据库连接池，结合了C3P0、DBCP 等 DB 池的优点，同时还加入了日志监控。</p><p>Druid 在 GitHub 上已经收获了 25.4k 的 star，可以说非常的知名，从简介上也能看得出，Druid 就是为了监控而生的。</p>',57),K={href:"https://github.com/alibaba/druid/",target:"_blank",rel:"noopener noreferrer"},W=t('<p><img src="'+w+'" alt="Alt text"></p><p>Druid 包含了三个重要的组成部分：</p><ul><li>DruidDriver，能够提供基于 Filter-Chain 模式的插件体系；</li><li>DruidDataSource，高效可管理的数据库连接池；</li><li>SQLParser，支持所有 JDBC 兼容的数据库，包括 Oracle、MySQL 等。</li></ul><p>Spring Boot2.0 以上默认使用的是 Hikari 连接池，我们从之前的日志信息里就可以看得到。</p><p><img src="'+L+`" alt="Alt text"></p><p>那如果我们想使用 Druid 的话，该怎么整合呢？</p><p>这次我们直接在编程喵项目后端项目 codingmore-admin 上进行修改。</p><p>第一步，在 pom.xml 文件中添加 Druid 的依赖，官方已经提供了 starter，我们直接使用。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.1.23&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在 application.yml 文件中添加 Druid 配置。</p><hr><p>.</p><hr><h2 id="源码地址" tabindex="-1"><a class="header-anchor" href="#源码地址" aria-hidden="true">#</a> 源码地址</h2>`,14),Y={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/itwanger/codingmore-learning/tree/main/codingmore-mysql",target:"_blank",rel:"noopener noreferrer"},X=n("hr",null,null,-1);function $(nn,sn){const a=o("ExternalLinkIcon");return p(),l("div",null,[A,D,T,Q,M,j,n("blockquote",null,[n("p",null,[n("a",B,[s("https://dev.mysql.com/doc/refman/8.0/en/"),e(a)])])]),N,E,n("blockquote",null,[n("p",null,[n("a",C,[s("https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html"),e(a)])])]),R,n("blockquote",null,[n("p",null,[s("宝塔面板安装脚本地址："),n("a",U,[s("https://www.bt.cn/new/download.html"),e(a)])])]),O,J,P,F,n("blockquote",null,[n("p",null,[n("a",V,[s("https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html"),e(a)])])]),z,n("blockquote",null,[n("p",null,[n("a",G,[s("https://dev.mysql.com/doc/refman/8.0/en/macos-installation-pkg.html"),e(a)])])]),H,n("blockquote",null,[n("p",null,[n("a",K,[s("https://github.com/alibaba/druid/"),e(a)])])]),W,n("blockquote",null,[n("ul",null,[n("li",null,[s("编程喵 GitHub："),n("a",Y,[s("https://github.com/itwanger/coding-more"),e(a)])]),n("li",null,[s("codingmore-mysql-druid："),n("a",Z,[s("https://github.com/itwanger/codingmore-learning"),e(a)])])])]),X])}const en=i(I,[["render",$],["__file","mysql-druid.html.vue"]]);export{en as default};
