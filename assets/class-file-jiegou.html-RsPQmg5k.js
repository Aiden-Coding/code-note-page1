import{_ as i,r as o,o as c,c as d,a as n,b as s,d as a,w as t,e as l}from"./app-GjP6hEVt.js";const r="/code-note-page1/assets/image-103-CKqpdtnm.png",u="/code-note-page1/assets/image-104-gGRo8aJG.png",k="/code-note-page1/assets/image-136-TWBksfrI.png",v="/code-note-page1/assets/image-137-TDBA4Lh5.png",m="/code-note-page1/assets/image-7-Ra82CLoX.png",_="/code-note-page1/assets/image-173-5W4MW4vH.png",g="/code-note-page1/assets/image-174-uaPUK2D-.png",b="/code-note-page1/assets/image-175-5gU8wxPN.png",f="/code-note-page1/assets/image-176-HcVtSfbB.png",y="/code-note-page1/assets/image-177-zXboqUTQ.png",x="/code-note-page1/assets/image-178-SferBZOr.png",h="/code-note-page1/assets/image-179-kxTklBGm.png",T="/code-note-page1/assets/image-180-I2Kwm2pk.png",N="/code-note-page1/assets/image-181-Dmeb9O5P.png",w="/code-note-page1/assets/image-182-DEzJi_6e.png",A="/code-note-page1/assets/image-183-UDW-7e6h.png",C="/code-note-page1/assets/image-184-CGouYceQ.png",S="/code-note-page1/assets/image-185-E1QlEkSS.png",j="/code-note-page1/assets/image-186-nXHWxS_p.png",O="/code-note-page1/assets/image-187-kJttTKSV.png",J="/code-note-page1/assets/image-188-NSLYxqrh.png",B="/code-note-page1/assets/image-189-seS-3RYH.png",M="/code-note-page1/assets/image-190-ywIeMVQC.png",E="/code-note-page1/assets/image-191-w419piy0.png",I="/code-note-page1/assets/image-192-485jgwbe.png",L="/code-note-page1/assets/image-193-JxahcBqi.png",U="/code-note-page1/assets/image-194-ymus4sKn.png",D="/code-note-page1/assets/image-195-uVJ2sN6w.png",H="/code-note-page1/assets/image-196-dMLcvdui.png",V={},F=n("h1",{id:"第四节-java类文件结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第四节-java类文件结构","aria-hidden":"true"},"#"),s(" 第四节：Java类文件结构")],-1),q=n("p",null,"大家好，我是二哥呀，今天我拿了一把小刀，准备带大家解剖一下 Java 的类文件结构，也就是 .class 文件的内容结构，虽然它实际上是一串连续的二进制，由 0 和 1 组成，但我们仍然可以借助一些工具来看清楚它的真面目。",-1),R=n("blockquote",null,[n("p",null,"类文件结构=.class文件的结构=Class文件结构，这三个说法都是一个意思，.class是从文件后缀名的角度来说的，Class是从Java类的角度来说的，类文件结构就是 Class 的中文译名。")],-1),P=n("p",null,"---这部分内容前面其实已经讲过，但为了保持这篇内容的完整性，就暂时保留了下来，已经掌握的同学可以略过 start----",-1),W=n("strong",null,"计算机科学领域的任何问题都可以通过增加一个中间层来解决",-1),K=n("p",null,[n("img",{src:r,alt:"Alt text"})],-1),G={href:"https://www.oracle.com/java/technologies/downloads/",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,[n("img",{src:u,alt:"Alt text"})],-1),X=n("p",null,"通过不同操作系统的 JVM，我们的源代码就可以不用根据不同的操作系统编译成不同的二进制可执行文件了，跨平台的目标也就实现了。",-1),Y=n("p",null,[n("strong",null,"那这个 class 文件到底是什么玩意呢？它是怎么被 JVM 识别的呢？")],-1),z=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>jvm</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击编译按钮后（也不用主动点，IDEA 会自动编译），IDEA 会帮我们生成一个名为 Hello.class 的文件，在 <code>target/classes</code> 的对应包目录下。直接双击打开后长下面这样子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//</span>
<span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span>
<span class="token comment">// (powered by Fernflower decompiler)</span>
<span class="token comment">//</span>

<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>jvm</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Z=n("code",null,"xxd Hello.class",-1),$=n("p",null,[n("img",{src:k,alt:"Alt text"})],-1),ss=n("p",null,"这就是 class 文件的十六进制形式。",-1),ns=n("p",null,"---这部分内容前面其实已经讲过，但为了保持这篇内容的完整性，就暂时保留了下来，已经掌握的同学可以略过 end----",-1),as=n("p",null,"类文件的内容通常可以分为下面这几部分，见下图。",-1),es=n("p",null,[n("img",{src:v,alt:"Alt text"})],-1),ts=n("h2",{id:"_01、魔数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01、魔数","aria-hidden":"true"},"#"),s(" 01、魔数")],-1),ls=n("p",null,"回看 class 文件的十六进制形式截图。",-1),os=n("code",null,"cafebabe",-1),ps=n("code",null,"ClassFormatError",-1),is=l('<p>魔数 <code>cafebabe</code> 的中文意思显而易见，咖啡宝贝，再加上 Java 的图标本来就是一个热气腾腾的咖啡，可见 Java 与咖啡的渊源有多深。</p><p><img src="'+m+'" alt="Alt text"></p><h2 id="_02、版本号" tabindex="-1"><a class="header-anchor" href="#_02、版本号" aria-hidden="true">#</a> 02、版本号</h2><p>紧跟着魔数后面的四个字节 <code>0000 0037</code> 分别表示副版本号和主版本号。也就是说，主版本号为 55（0x37 的十进制），也就是 Java 11 对应的版本号，副版本号为 0。</p><p>上一个 LTS 版本是 Java 8，对应的主版本号为 52，也就是说 Java 9 是 53，Java 10 是 54，只不过 Java 9 和 Java 10 都是过渡版本，下一个 LTS 版本是 Java 17，预计 2021 年 9 月份推出（从这里大家可以推断出这篇内容的初稿时间，哈哈哈）。</p><p>那现在是 2023年12月14日，Java 21 已经发布了。通过上面的方法，大家可以查看一下 Java 21 对应的版本号是多少，这个小作业就留给大家了，动动手，你会发现不一样的世界。</p><h2 id="_03、常量池" tabindex="-1"><a class="header-anchor" href="#_03、常量池" aria-hidden="true">#</a> 03、常量池</h2><p>紧跟在版本号之后的是常量池，它包含了类、接口、字段和方法的符号引用，以及字符串字面量和数值常量。这些信息在编译时被创建，并在运行时被Java虚拟机（JVM）使用。</p><p>相当于一个资源仓库，主要存放量大类型常量：</p><ul><li>字面量（Literals）：字面量是不变的数据，主要包括数值（如整数、浮点数）和字符串字面量。例如，一个整数100或一个字符串&quot;Hello World&quot;，在源代码中直接赋值，编译后存储在常量池中。</li><li>符号引用（Symbolic References）：符号引用是对类、接口、字段、方法等的引用，它们不是由字面量值给出的，而是通过符号名称（如类名、方法名）和其他额外信息（如类型、签名）来表示。这些引用在类文件中以一种抽象的方式存在，它们在类加载时被虚拟机解析为具体的内存地址。</li></ul>',10),cs=n("p",null,"好，接下来，我们通过实际的代码示例来看一下常量池到底是什么。",-1),ds=l(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">char</span> aChar <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布尔值 true 的十六进制是 0x01、字符 a 的十六进制是 0x61，字节 66 的十六进制是 0x42，短整型 67 的十六进制是 0x43，整型 68 的十六进制是 0x44。所以编译生成的整型常量在 class 文件中的位置如下图所示。</p><p><img src="`+_+`" alt="Alt text"></p><p>第一个字节 0x03 表示常量的类型为 CONSTANT_Integer_info，是 JVM 定义的 14 种常量类型之一，对应的还有 CONSTANT_Float_info、CONSTANT_Long_info、CONSTANT_Double_info 等，它们对应的标识分别是 0x04、0x05、0x06。</p><p>我用表格来简单表示下：</p><table><thead><tr><th style="text-align:left;">常量类型</th><th style="text-align:left;">标识符</th><th style="text-align:left;">描述符</th></tr></thead><tbody><tr><td style="text-align:left;">CONSTANT_Integer_info</td><td style="text-align:left;">0x03</td><td style="text-align:left;">int 类型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Float_info</td><td style="text-align:left;">0x04</td><td style="text-align:left;">float 类型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Long_info</td><td style="text-align:left;">0x05</td><td style="text-align:left;">long 类型字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Double_info</td><td style="text-align:left;">0x06</td><td style="text-align:left;">double 类型字面量</td></tr></tbody></table><p>对于 int 和 float 来说，它们占 4 个字节；对于 long 和 double 来说，它们占 8 个字节。来个 long 型的最大值观察下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ong <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一下它在 class 文件中的位置。05 开头，7f ff ff ff ff ff ff ff 结尾，果然占 8 个字节，以前知道 long 型会占 8 个字节，但没有直观的感受，现在有了（😁）。</p><p><img src="`+g+`" alt="Alt text"></p><p>接下来，我们再来看一段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“hello”是一个字符串，它的十六进制为 <code>68 65 6c 6c 6f</code>，我们来看一下它在 class 文件中的位置。</p><p><img src="`+b+'" alt="Alt text"></p><p>前面还有 3 个字节，第一个字节 0x01 是标识，标识类型为 CONSTANT_Uft8_info，第二个和第三个 0x00 0x05 用来表示第三部分字节数组的长度，如下图所示。</p><p><img src="'+f+'" alt="Alt text"></p><p>与 CONSTANT_Uft8_info 类型对应的，还有一个 CONSTANT_String_info，用来表示字符串对象的引用（之前代码中的 s），标识是 0x08。前者存储了字符串真正的值，后者并不包含字符串的内容，仅仅包含了一个指向常量池中 CONSTANT_Uft8_info 的索引。</p><p>这和我们前面讲的对象和引用就关联起来了，有没有？（😁）</p>',18),rs=n("p",null,"来看一下它在 class 文件中的位置。",-1),us=n("p",null,[n("img",{src:y,alt:"Alt text"})],-1),ks=n("p",null,"CONSTANT_String_info 通过索引 19 来找到 CONSTANT_Uft8_info，见下图。",-1),vs=n("p",null,[n("img",{src:x,alt:"Alt text"})],-1),ms=n("p",null,"除此之外，还有 CONSTANT_Class_info，用来表示类和接口，和 CONSTANT_String_info 类似，第一个字节是标识，值为 0x07，后面两个字节是常量池索引，指向 CONSTANT_Utf8_info——字符串存储的是类或者接口的全路径限定名。",-1),_s=n("p",null,[s("拿 Hello.java 类来说，它的全路径限定名为 "),n("code",null,"com/itwanger/jvm/Hello"),s("，对应的十六进制为“636f6d2f697477616e6765722f6a766d2f48656c6c6f”，是一串 CONSTANT_Uft8_info，指向它的 CONSTANT_Class_info 在 class 文件中的什么位置呢？")],-1),gs=l('<p><img src="'+h+'" alt="Alt text"></p><p>从上图中可以看到，常量池的总大小为 23，索引为 04 的 CONSTANT_Class_info 指向的是是索引为 21 的 CONSTANT_Uft8_info，值为 <code>com/itwanger/jvm/Hello</code>。21 的十六进制为 0x15，有了这个信息，我们就可以找到 CONSTANT_Class_info 在 class 文件中的位置了。</p><p><img src="'+T+`" alt="Alt text"></p><p>0x07 是第一个字节，CONSTANT_Class_info 的标识符，然后是两个字节，标识索引。</p><p>还有 CONSTANT_NameAndType_info，用来标识字段或方法，标识符为 12，对应的十六进制是 0x0c。后面还有 4 个字节，前两个是字段或者方法的索引，后两个是字段或方法的描述符，也就是字段或者方法的类型。</p><p>来看下面这段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 jclasslib 可以看到 CONSTANT_NameAndType_info 包含的索引有两个。</p><p><img src="`+N+'" alt="Alt text"></p><p>一个是 4，一个是 5，可以通过下图来表示 CONSTANT_NameAndType_info 的构成。</p><p><img src="'+w+'" alt="Alt text"></p><p>对应 class 文件中的位置如下图所示。</p><p><img src="'+A+`" alt="Alt text"></p><p>接下来是 CONSTANT_Fieldref_info 、CONSTANT_Methodref_info 和 CONSTANT_InterfaceMethodref_info，它们三个的结构比较类似，可以通过下面的伪代码来表示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CONSTANT_*ref_info {
  u1 tag;
  u2 class_index;
  u2 name_and_type_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),bs=l('<ul><li>tag 为标识符，Fieldref 的为 9，也就是十六进制的 0x09；Methodref 的为 10，也就是十六进制的 0x0a；InterfaceMethodref 的为 11， 也就是十六进制的 0x0b。</li><li>class_index 为 CONSTANT_Class_info 的常量池索引，表示字段 | 方法 | 接口方法所在的类信息。</li><li>name_and_type_index 为 CONSTANT_NameAndType_info 的常量池索引，拿 Fieldref 来说，表示字段名和字段类型；拿 Methodref 来说，表示方法名、方法的参数和返回值类型；拿 InterfaceMethodref 来说，表示接口方法名、接口方法的参数和返回值类型。</li></ul><p>还有 CONSTANT_MethodHandle_info 、CONSTANT_MethodType_info 和 CONSTANT_InvokeDynamic_info，我这里用一个表格来表示下：</p><table><thead><tr><th style="text-align:left;">常量类型</th><th style="text-align:left;">标识符</th><th style="text-align:left;">描述符</th></tr></thead><tbody><tr><td style="text-align:left;">CONSTANT_MethodHandle_info</td><td style="text-align:left;">0x0f</td><td style="text-align:left;">方法句柄</td></tr><tr><td style="text-align:left;">CONSTANT_MethodType_info</td><td style="text-align:left;">0x10</td><td style="text-align:left;">方法类型</td></tr><tr><td style="text-align:left;">CONSTANT_InvokeDynamic_info</td><td style="text-align:left;">0x12</td><td style="text-align:left;">动态调用点</td></tr><tr><td style="text-align:left;">CONSTANT_Fieldref_info</td><td style="text-align:left;">0x09</td><td style="text-align:left;">字段</td></tr><tr><td style="text-align:left;">CONSTANT_Methodref_info</td><td style="text-align:left;">0x0a</td><td style="text-align:left;">普通方法</td></tr><tr><td style="text-align:left;">CONSTANT_InterfaceMethodref_info</td><td style="text-align:left;">0x0b</td><td style="text-align:left;">接口方法</td></tr><tr><td style="text-align:left;">CONSTANT_Class_info</td><td style="text-align:left;">0x07</td><td style="text-align:left;">类或接口的全限定名</td></tr><tr><td style="text-align:left;">CONSTANT_String_info</td><td style="text-align:left;">0x08</td><td style="text-align:left;">字符串字面量</td></tr><tr><td style="text-align:left;">CONSTANT_Uft8_info</td><td style="text-align:left;">0x01</td><td style="text-align:left;">字符串</td></tr></tbody></table><p>啊，class 文件中最复杂的常量池部分就算是解剖完了，真不容易！</p><h2 id="_04、访问标记" tabindex="-1"><a class="header-anchor" href="#_04、访问标记" aria-hidden="true">#</a> 04、访问标记</h2><p>紧跟着常量池之后的区域就是访问标记（Access flags），这个标记用于识别类或接口的访问信息，比如说：</p>',6),fs=n("li",null,"等等。",-1),ys=l('<p>总共有 16 个标记位可供使用，但常用的只有其中 7 个，见下图。</p><p><img src="'+C+`" alt="Alt text"></p><p>这里用一个表格来表示下。</p><table><thead><tr><th style="text-align:left;">标记位</th><th style="text-align:left;">标识符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">0x0001</td><td style="text-align:left;">ACC_PUBLIC</td><td style="text-align:left;">public 类型</td></tr><tr><td style="text-align:left;">0x0010</td><td style="text-align:left;">ACC_FINAL</td><td style="text-align:left;">final 类型</td></tr><tr><td style="text-align:left;">0x0020</td><td style="text-align:left;">ACC_SUPER</td><td style="text-align:left;">调用父类的方法时，使用 invokespecial 指令</td></tr><tr><td style="text-align:left;">0x0200</td><td style="text-align:left;">ACC_INTERFACE</td><td style="text-align:left;">接口类型</td></tr><tr><td style="text-align:left;">0x0400</td><td style="text-align:left;">ACC_ABSTRACT</td><td style="text-align:left;">抽象类类型</td></tr><tr><td style="text-align:left;">0x1000</td><td style="text-align:left;">ACC_SYNTHETIC</td><td style="text-align:left;">标记为编译器自动生成的类</td></tr><tr><td style="text-align:left;">0x2000</td><td style="text-align:left;">ACC_ANNOTATION</td><td style="text-align:left;">标记为注解类</td></tr><tr><td style="text-align:left;">0x4000</td><td style="text-align:left;">ACC_ENUM</td><td style="text-align:left;">标记为枚举类</td></tr><tr><td style="text-align:left;">0x8000</td><td style="text-align:left;">ACC_MODULE</td><td style="text-align:left;">标记为模块类</td></tr></tbody></table><p>来看一个简单的枚举代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token constant">RED</span><span class="token punctuation">,</span><span class="token constant">GREEN</span><span class="token punctuation">,</span><span class="token constant">BLUE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 可以看到访问标记的信息有 <code>0x4031 [public final enum]</code>。</p><p><img src="`+S+'" alt="Alt text"></p><p>对应 class 文件中的位置如下图所示。</p><p><img src="'+j+`" alt="Alt text"></p><h2 id="_05、类索引、父类索引和接口索引" tabindex="-1"><a class="header-anchor" href="#_05、类索引、父类索引和接口索引" aria-hidden="true">#</a> 05、类索引、父类索引和接口索引</h2><p>这三部分用来确定类的继承关系，this_class 为当前类的索引，super_class 为父类的索引，interfaces 为接口。</p><p>来看下面这段简单的代码，没有接口，默认继承 Object 类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 可以看到类的继承关系。</p><p><img src="`+O+'" alt="Alt text"></p><ul><li>this_class 指向常量池中索引为 2 的 CONSTANT_Class_info。</li><li>super_class 指向常量池中索引为 3 的 CONSTANT_Class_info。</li><li>由于没有接口，所以 interfaces 的信息为空。</li></ul><p>对应 class 文件中的位置如下图所示。</p><p><img src="'+J+'" alt="Alt text"></p><h2 id="_06、字段表" tabindex="-1"><a class="header-anchor" href="#_06、字段表" aria-hidden="true">#</a> 06、字段表</h2>',20),xs=l(`<p>来看这样一段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldsTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字段只有一个，修饰符为 private，类型为 String，字段名为 name。可以用下面的伪代码来表示 field 的结构。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>field_info {
  u2 access_flag;
  u2 name_index;
  u2 description_index;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>access_flag 为字段的访问标记，比如说是不是 public | private | protected，是不是 static，是不是 final 等。</li><li>name_index 为字段名的索引，指向常量池中的 CONSTANT_Utf8_info， 比如说上例中的值就为 name。</li><li>description_index 为字段的描述类型索引，也指向常量池中的 CONSTANT_Utf8_info，针对不同的数据类型，会有不同规则的描述信息。</li></ul><p>1）对于基本数据类型来说，使用一个字符来表示，比如说 I 对应的是 int，B 对应的是 byte。</p><p>2）对于引用数据类型来说，使用 <code>L***;</code> 的方式来表示，<code>L</code> 开头，<code>;</code> 结束，比如字符串类型为 <code>Ljava/lang/String;</code>。</p><p>3）对于数组来说，会用一个前置的 <code>[</code> 来表示，比如说字符串数组为 <code>[Ljava/lang/String;</code>。</p><p>对应到 class 文件中的位置如下图所示。</p><p><img src="`+B+`" alt="Alt text"></p><p>看到这里相信你就能明白经常在 javap 命令中看到的一些奇怪的字符的意思了。</p><h2 id="_07、方法表" tabindex="-1"><a class="header-anchor" href="#_07、方法表" aria-hidden="true">#</a> 07、方法表</h2><p>方法表和字段表类似，区别是用来存储方法的信息，包括方法名，方法的参数，方法的签名。</p><p>就拿 main 方法来说吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodsTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先用 jclasslib 看一下大概的信息。</p><p><img src="`+M+'" alt="Alt text"></p><ul><li>访问标记是 public static 的。</li><li>方法名为 main。</li><li>方法的参数为字符串数组；返回类型为 Void。</li></ul><p>对应到 class 文件中的位置如下图所示。</p><p><img src="'+E+`" alt="Alt text"></p><h2 id="_08、属性表" tabindex="-1"><a class="header-anchor" href="#_08、属性表" aria-hidden="true">#</a> 08、属性表</h2><p>属性表是 class 文件中的最后一部分，通常出现在字段和方法中。</p><p>来看这样一段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttributeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_SIZE</span> <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),hs=l('<p><img src="'+I+'" alt="Alt text"></p><ul><li>Attribute name index 指向常量池中值为“ConstantValue”的常量。</li><li>Attribute length 的值为固定的 2，因为索引只占两个字节的大小。</li><li>Constant value index 指向常量池中具体的常量，如果常量类型为 int，指向的就是 CONSTANT_Integer_info。</li></ul><p>我画了一副图，可以完整的表示字段的结构，包含属性表在内。</p><p><img src="'+L+'" alt="Alt text"></p><p>对应到 class 文件中的位置如下图所示。</p><p><img src="'+U+`" alt="Alt text"></p><p>来看下面这段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodCode</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main 方法中调用了 foo 方法。通过 jclasslib 看一下它当中一个很重要的属性——Code， 方法的关键信息都存储在里面。</p><p><img src="`+D+'" alt="Alt text"></p><ul><li>Attribute name index 指向常量池中值为“Code”的常量。</li><li>Attribute length 为属性值的长度大小。</li><li>bytecode 存储真正的字节码指令。</li><li>exception table 表示方法内部的异常信息。</li><li>maximum stack size 表示操作数栈的最大深度，方法执行的任意期间操作数栈深度都不会超过这个值。</li><li>maximum local variable 表示临时变量表的大小，注意，并不等于方法中所有临时变量的数量之和，当一个作用域结束，内部的临时变量占用的位置就会被替换掉。</li><li>code length 表示字节码指令的长度。</li></ul><p>对应 class 文件中的位置如下图所示。</p><p><img src="'+H+`" alt="Alt text"></p><h2 id="_09、qa" tabindex="-1"><a class="header-anchor" href="#_09、qa" aria-hidden="true">#</a> 09、QA</h2><p>评论区有读者问到：“怎么通过索引值，定位到在class 文件中的位置，这个是咋算的？”</p><p>在Java类文件中，常量池是一个索引表，它从索引值1开始计数，每个条目都有一个唯一的索引。</p><ul><li>常量池计数器：在常量池之前，类文件有一个16位的常量池计数器，表示常量池中有多少项。它的值比实际常量数大1（因为索引从1开始）。</li><li>常量池条目：每个常量池条目的开始是一个标签（1个字节），表明了常量的类型（如Class、Fieldref、Methodref等）。根据这个类型，后面跟着的数据结构也不同。</li></ul><p>定位过程大致如下：</p><ul><li>读取常量池计数器：首先，从类文件的开头读取常量池计数器的值，确定常量池中有多少条目。</li><li>遍历常量池：从常量池的第一项开始遍历。由于不同类型的常量长度不同，需要根据每个常量的类型来确定它的长度。</li><li>根据索引定位：继续遍历，直到到达所需的索引值。每次遍历时，根据条目类型读取相应长度的数据，直到达到目标索引。</li></ul><p>可以抽象成一个数组和一个 for 循环，就能明白了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constantPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>constantPoolCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> constantPoolCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tag <span class="token operator">=</span> constantPool<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Integer_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Float_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Long_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Double_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Utf8_info</span><span class="token operator">:</span>
            <span class="token keyword">int</span> length <span class="token operator">=</span> constantPool<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            i <span class="token operator">+=</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_String_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Class_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Fieldref_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_Methodref_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_InterfaceMethodref_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_NameAndType_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_MethodHandle_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_MethodType_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">CONSTANT_InvokeDynamic_info</span><span class="token operator">:</span>
            i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown tag: &quot;</span> <span class="token operator">+</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、小结" tabindex="-1"><a class="header-anchor" href="#_10、小结" aria-hidden="true">#</a> 10、小结</h2><p>到此为止，class 文件的内部算是剖析得差不多了，希望能对大家有所帮助。第一次拿刀，手有点颤，如果哪里有不足的地方，欢迎大家在评论区毫不留情地指出来！</p><ul><li>class 文件是一串连续的二进制，由 0 和 1 组成，但我们仍然可以借助一些工具来看清楚它的真面目。</li><li>class 文件的内容通常可以分为下面这几部分，魔数、版本号、常量池、访问标记、类索引、父类索引、接口索引、字段表、方法表、属性表。</li><li>常量池包含了类、接口、字段和方法的符号引用，以及字符串字面量和数值常量。</li><li>访问标记用于识别类或接口的访问信息，比如说是不是 public | private | protected，是不是 static，是不是 final 等。</li><li>类索引、父类索引和接口索引用来确定类的继承关系。</li><li>字段表用来存储字段的信息，包括字段名，字段的参数，字段的签名。</li><li>方法表用来存储方法的信息，包括方法名，方法的参数，方法的签名。</li><li>属性表用来存储属性的信息，包括字段的初始值，方法的字节码指令等。</li></ul><p>相信大家看完这篇内容应该能对 class 文件有一个比较清晰的认识了。</p><hr>`,26);function Ts(Ns,ws){const e=o("RouterLink"),p=o("ExternalLinkIcon");return c(),d("div",null,[F,q,R,P,n("p",null,[s("计算机的世界里流传着这么一句话，“"),W,s("”。对于 Java 来说，"),a(e,{to:"/toBeBetterJavaer/jvm/what-is-jvm.html"},{default:t(()=>[s("JVM")]),_:1}),s(" 就是这么一个产物，“Write once, Run anywhere”之所以能实现，靠得就是 JVM，它能在不同的操作系统下运行同一份源代码编译后的 class 文件。")]),K,n("p",null,[s("Java 是跨平台的，JVM 作为中间层，自然要针对不同的操作系统提供不同的实现。拿 JDK 11 来说，它的实现就有上图中提到的这么多种（目前最新版本已经是 "),n("a",G,[s("JDK 21"),a(p)]),s(" 了）。")]),Q,X,Y,n("p",null,[s("我们用 IDEA 编写一段"),a(e,{to:"/toBeBetterJavaer/overview/hello-world.html"},{default:t(()=>[s("简单的 Java 代码")]),_:1}),s("，文件名为 Hello.java。")]),z,n("p",null,[s("看起来和源代码很像，只是多了一个空的"),a(e,{to:"/toBeBetterJavaer/oo/construct.html"},{default:t(()=>[s("构造方法")]),_:1}),s("，对吧？它是 class 文件被 IDEA 自带的反编译工具 Fernflower 反编译后的样子。那真实的 class 文件长什么样子呢？")]),n("p",null,[s("可以在终端中通过 "),Z,s(" 命令来查看（前面我们已经讲过了，大家可以戳"),a(e,{to:"/toBeBetterJavaer/jvm/class-load.html"},{default:t(()=>[s("这个链接")]),_:1}),s("回看）。")]),$,ss,ns,as,es,ts,ls,n("p",null,[s("第一行中有一串特殊的字符 "),os,s("，它就是一个魔数，是 JVM 识别 class 文件的标志，"),a(e,{to:"/toBeBetterJavaer/jvm/class-load.html"},{default:t(()=>[s("JVM 会在验证阶段")]),_:1}),s("检查 class 文件是否以该魔数开头，如果不是则会抛出 "),ps,s("。")]),is,n("p",null,[s("（这部分内容我们前面讲过，"),a(e,{to:"/toBeBetterJavaer/jvm/class-load.html#_4-resolution-%E8%A7%A3%E6%9E%90"},{default:t(()=>[s("戳链接")]),_:1}),s("回顾一下）")]),cs,n("p",null,[s("Java 定义了 boolean、byte、short、char 和 int 等"),a(e,{to:"/toBeBetterJavaer/basic-grammar/basic-data-type.html"},{default:t(()=>[s("基本数据类型")]),_:1}),s("，它们在常量池中都会被当做 int 来处理。我们来通过一段简单的 Java 代码了解下。")]),ds,n("ul",null,[n("li",null,[a(e,{to:"/toBeBetterJavaer/basic-extra-meal/pass-by-value.html"},{default:t(()=>[s("Java到底是值传递还是引用传递？")]),_:1})])]),rs,us,ks,vs,ms,_s,n("p",null,[s("先不着急，这里给大家介绍一款可视化字节码的工具 "),a(e,{to:"/toBeBetterJavaer/jvm/how-run-java-code.html"},{default:t(()=>[s("jclasslib bytecode viewer")]),_:1}),s("（前面也曾讲过），可以直接在 IDEA 的插件市场安装。安装完成后，选中 class 文件，然后在 View 菜单里找到 Show Bytecode With Jclasslib 子菜单，就可以查看 class 文件的关键信息了。")]),gs,n("p",null,[s("学过 "),a(e,{to:"/toBeBetterJavaer/xuexiluxian/c.html"},{default:t(()=>[s("C 语言")]),_:1}),s("的符号表（Symbol Table）的话，对这段伪代码并不会陌生。")]),bs,n("ul",null,[n("li",null,[s("到底是 "),a(e,{to:"/toBeBetterJavaer/oo/object-class.html"},{default:t(()=>[s("class 类")]),_:1}),s(" 还是 "),a(e,{to:"/toBeBetterJavaer/oo/interface.html"},{default:t(()=>[s("interface 接口")]),_:1}),s("？")]),n("li",null,[s("是 "),a(e,{to:"/toBeBetterJavaer/oo/access-control.html"},{default:t(()=>[s("public")]),_:1}),s(" 吗？")]),n("li",null,[s("是 "),a(e,{to:"/toBeBetterJavaer/oo/abstract.html"},{default:t(()=>[s("abstract 抽象类")]),_:1}),s("吗？")]),n("li",null,[s("是 "),a(e,{to:"/toBeBetterJavaer/oo/final.html"},{default:t(()=>[s("final 类")]),_:1}),s("吗？")]),fs]),ys,n("p",null,[s("一个类中定义的字段会被存储在字段表（fields）中，包括"),a(e,{to:"/toBeBetterJavaer/oo/static.html"},{default:t(()=>[s("静态的和非静态的")]),_:1}),s("。")]),xs,n("p",null,[s("只有一个常量 DEFAULT_SIZE，它属于字段中的一种，就是加了 "),a(e,{to:"/toBeBetterJavaer/oo/final.html"},{default:t(()=>[s("final 的静态变量")]),_:1}),s("。先通过 jclasslib 看一下它当中一个很重要的属性——ConstantValue，用来表示静态变量的初始值。")]),hs])}const Cs=i(V,[["render",Ts],["__file","class-file-jiegou.html.vue"]]);export{Cs as default};
