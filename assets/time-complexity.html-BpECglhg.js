const e=JSON.parse('{"key":"v-16dd401a","path":"/toBeBetterJavaer/collection/time-complexity.html","title":"时间复杂度：评估 Java集合框架的执行效率","lang":"zh-CN","frontmatter":{"title":"时间复杂度：评估 Java集合框架的执行效率","shortTitle":"时间复杂度，了解下","category":["Java核心"],"tag":["集合框架（容器）"],"description":"本文详细讲解了时间复杂度的概念、计算方法以及如何评估算法的性能。通过学习本文，您将更好地理解时间复杂度对程序性能的影响，从而在实际编程中做出更优的算法选择。","head":[["meta",{"name":"keywords","content":"Java,时间复杂度,java 时间复杂度,算法性能 大O表示法, 算法评估"}]]},"headers":[{"level":3,"title":"1）O(1)","slug":"_1-o-1","link":"#_1-o-1","children":[]},{"level":3,"title":"2）O(n)","slug":"_2-o-n","link":"#_2-o-n","children":[]},{"level":3,"title":"3）O(logn)","slug":"_3-o-logn","link":"#_3-o-logn","children":[]},{"level":3,"title":"4）平方时间复杂度 O(n^2)","slug":"_4-平方时间复杂度-o-n-2","link":"#_4-平方时间复杂度-o-n-2","children":[]},{"level":3,"title":"5）指数时间复杂度 O(2^n)","slug":"_5-指数时间复杂度-o-2-n","link":"#_5-指数时间复杂度-o-2-n","children":[]}],"git":{},"filePathRelative":"toBeBetterJavaer/collection/time-complexity.md"}');export{e as data};
