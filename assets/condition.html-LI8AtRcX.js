const i=JSON.parse('{"key":"v-56a89aec","path":"/toBeBetterJavaer/thread/condition.html","title":"等待通知条件Condition","lang":"zh-CN","frontmatter":{"title":"等待通知条件Condition","shortTitle":"等待通知条件Condition","description":"Condition是Java并发工具包java.util.concurrent.locks中的一个接口，它提供了一种更灵活的线程同步机制。与Object类中的wait(), notify(), 和 notifyAll()方法相比，Condition为多线程间的协调和通信提供了更强大的功能。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,Condition"}]]},"headers":[{"level":2,"title":"Condition 源码分析","slug":"condition-源码分析","link":"#condition-源码分析","children":[{"level":3,"title":"Condition 的 await 方法","slug":"condition-的-await-方法","link":"#condition-的-await-方法","children":[]},{"level":3,"title":"signal/signalAll 实现原理","slug":"signal-signalall-实现原理","link":"#signal-signalall-实现原理","children":[]},{"level":3,"title":"await 与 signal/signalAll","slug":"await-与-signal-signalall","link":"#await-与-signal-signalall","children":[]}]},{"level":2,"title":"Condition使用示例","slug":"condition使用示例","link":"#condition使用示例","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{},"filePathRelative":"toBeBetterJavaer/thread/condition.md"}');export{i as data};
