import{_ as t,r as e,o as p,c as o,a as n,b as s,d as c,e as i}from"./app-GjP6hEVt.js";const l="/code-note-page1/assets/image-93-XtjIA6Nh.png",r="/code-note-page1/assets/image-94-DwObwXPc.png",u="/code-note-page1/assets/image-102-vuHzUEGi.png",k="/code-note-page1/assets/image-103-u2yOb0G4.png",d="/code-note-page1/assets/image-104-CyylnsfP.png",v="/code-note-page1/assets/image-105-pEkOe2MM.png",m="/code-note-page1/assets/image-106--PaGumQu.png",b="/code-note-page1/assets/image-107-2qatrZAE.png",g="/code-note-page1/assets/image-108-eJnMy_jG.png",h="/code-note-page1/assets/image-5-kpInYbyX.png",w="/code-note-page1/assets/image-157-JXGDLYvD.png",f="/code-note-page1/assets/image-156-I_KRIkAl.png",S="/code-note-page1/assets/image-155-OuXlDZ5I.png",x="/code-note-page1/assets/image-154-8PlS5O3E.png",y="/code-note-page1/assets/image-153-f1vd53eD.png",C="/code-note-page1/assets/image-152-vJrI4n9y.png",A="/code-note-page1/assets/image-151-Sxk6qY2o.png",z="/code-note-page1/assets/image-150-MUNyc2oK.png",q="/code-note-page1/assets/image-149-FGxpHw_6.png",I="/code-note-page1/assets/image-148-WdlvH2Yn.png",j="/code-note-page1/assets/image-147-Ad58VfTa.png",_="/code-note-page1/assets/image-146-ZwKXYJrU.png",W="/code-note-page1/assets/image-145-jBrkOK2R.png",D="/code-note-page1/assets/image-144-AgDyt3Vq.png",L="/code-note-page1/assets/image-143-1jyMW744.png",M="/code-note-page1/assets/image-141-0A2VhZuW.png",E="/code-note-page1/assets/image-142-ReHKUMxk.png",N="/code-note-page1/assets/image-140-IBKTE29u.png",T="/code-note-page1/assets/image-139-NBLxc-zS.png",R="/code-note-page1/assets/image-138-32Ab7ZWb.png",F="/code-note-page1/assets/image-137-KpOqNN7E.png",O="/code-note-page1/assets/image-136-8rY2dKkJ.png",H="/code-note-page1/assets/image-135-g4DzCZPh.png",V="/code-note-page1/assets/image-134-4j1ZbfEr.png",P="/code-note-page1/assets/image-133-8x0ed4B3.png",B="/code-note-page1/assets/image-132-BWHYLZl_.png",Q="/code-note-page1/assets/image-131-cQIEPYGH.png",J="/code-note-page1/assets/image-130-00Snkg-c.png",G="/code-note-page1/assets/image-91-YePfgPjz.png",U="/code-note-page1/assets/image-92-oAbpzyVP.png",Y={},K=n("h1",{id:"第8章-springmvc子容器和spring父容器的启动原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第8章-springmvc子容器和spring父容器的启动原理","aria-hidden":"true"},"#"),s(" 第8章-SpringMVC子容器和Spring父容器的启动原理")],-1),Z=n("h2",{id:"测试类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#测试类","aria-hidden":"true"},"#"),s(" 测试类")],-1),X={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web",target:"_blank",rel:"noopener noreferrer"},$=i(`<h3 id="appstarter" tabindex="-1"><a class="header-anchor" href="#appstarter" aria-hidden="true">#</a> AppStarter</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>web<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">AppConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">AnnotationConfigWebApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">DispatcherServlet</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRegistration</span></span><span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * 只要写了这个，相当于配置了SpringMVC的DispatcherServlet
 * 1、Tomcat一启动就加载他
 *        1）、创建了容器、制定了配置类（所有ioc、aop等spring的功能就ok）
 *        2）、注册一个Servlet；    DispatcherServlet；
 *        3）、以后所有的请求都交给了 DispatcherServlet；
 *     效果，访问Tomcat部署的这个Web应用下的所有请求都会被     DispatcherServlet 处理
 *     DispatcherServlet就会进入强大的基于注解的mvc处理流程（@GetMapping）
 * 必须Servlet3.0以上才可以；Tomcat6.0以上才支持Servlet3.0规范
 *
 * Servlet3.0是javaEE的Web的规范标准，Tomcat是Servlet3.0规范的一个实现；
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppStarter</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span> <span class="token comment">//Spring会给我们传入servletContext</span>
		<span class="token comment">//创建ioc容器</span>
		<span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传入一个配置类</span>
		<span class="token comment">//以上截止，ioc容器都没有启动</span>
		<span class="token comment">//自己newDispatcherServlet，并传入容器</span>
		<span class="token class-name">DispatcherServlet</span> servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//利用Servlet规范</span>
		<span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
		registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//映射路径，写/就是所有的请求都交给DispatcherServlet</span>

	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hellocontroller" tabindex="-1"><a class="header-anchor" href="#hellocontroller" aria-hidden="true">#</a> HelloController</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>


   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Hello, SpringMVC!&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="appconfig" tabindex="-1"><a class="header-anchor" href="#appconfig" aria-hidden="true">#</a> AppConfig</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;cn.imlql.web&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+'" alt="Alt text"></p><p>根路径是在这里配的，tomcat的配置自己百度下，很简单</p><p><img src="'+r+`" alt="Alt text"></p><h2 id="java的spi机制" tabindex="-1"><a class="header-anchor" href="#java的spi机制" aria-hidden="true">#</a> Java的SPI机制</h2><blockquote><p>下面会用到SPI，这里先讲一下</p></blockquote><h3 id="项目目录" tabindex="-1"><a class="header-anchor" href="#项目目录" aria-hidden="true">#</a> 项目目录</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spi<span class="token operator">-</span>demo
├── api<span class="token operator">-</span>db<span class="token operator">-</span>impl<span class="token operator">-</span>mysql<span class="token operator">/</span>
<span class="token operator">|</span>  ├── api<span class="token operator">-</span>db<span class="token operator">-</span>impl<span class="token operator">-</span>mysql<span class="token punctuation">.</span>iml
<span class="token operator">|</span>  ├── pom<span class="token punctuation">.</span>xml
<span class="token operator">|</span>  ├── src<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  ├── main<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>        └── mysql<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>           └── <span class="token class-name">MySQLSaveService</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>        └── services<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>           └── <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span>DataSaveService</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  └── test<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>     └── java<span class="token operator">/</span>
<span class="token operator">|</span>  └── target<span class="token operator">/</span>
<span class="token operator">|</span>     ├── classes<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  ├── com<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>  └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>     └── mysql<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        └── <span class="token class-name">MySQLSaveService</span><span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>     └── services<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>        └── <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span>DataSaveService</span>
<span class="token operator">|</span>     └── generated<span class="token operator">-</span>sources<span class="token operator">/</span>
<span class="token operator">|</span>        └── annotations<span class="token operator">/</span>
├── api<span class="token operator">-</span>db<span class="token operator">-</span>impl<span class="token operator">-</span>redis<span class="token operator">/</span>
<span class="token operator">|</span>  ├── api<span class="token operator">-</span>db<span class="token operator">-</span>impl<span class="token operator">-</span>redis<span class="token punctuation">.</span>iml
<span class="token operator">|</span>  ├── pom<span class="token punctuation">.</span>xml
<span class="token operator">|</span>  ├── src<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  ├── main<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>        └── redis<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>           └── <span class="token class-name">RedisSaveService</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>        └── services<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>           └── <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span>DataSaveService</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  └── test<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>     └── java<span class="token operator">/</span>
<span class="token operator">|</span>  └── target<span class="token operator">/</span>
<span class="token operator">|</span>     ├── classes<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  ├── com<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>  └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>     └── redis<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  <span class="token operator">|</span>        └── <span class="token class-name">RedisSaveService</span><span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  └── <span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>     └── services<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>        └── <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span>DataSaveService</span>
<span class="token operator">|</span>     └── generated<span class="token operator">-</span>sources<span class="token operator">/</span>
<span class="token operator">|</span>        └── annotations<span class="token operator">/</span>
├── api<span class="token operator">-</span>db<span class="token operator">-</span><span class="token keyword">interface</span><span class="token operator">/</span>
<span class="token operator">|</span>  ├── api<span class="token operator">-</span>db<span class="token operator">-</span><span class="token keyword">interface</span><span class="token punctuation">.</span>iml
<span class="token operator">|</span>  ├── pom<span class="token punctuation">.</span>xml
<span class="token operator">|</span>  ├── src<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  ├── main<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>        └── data<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>           └── <span class="token class-name">DataSaveService</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  └── test<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>     └── java<span class="token operator">/</span>
<span class="token operator">|</span>  └── target<span class="token operator">/</span>
<span class="token operator">|</span>     ├── classes<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>     └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>        └── data<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>           └── <span class="token class-name">DataSaveService</span><span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token operator">|</span>     └── generated<span class="token operator">-</span>sources<span class="token operator">/</span>
<span class="token operator">|</span>        └── annotations<span class="token operator">/</span>
├── app<span class="token operator">/</span>
<span class="token operator">|</span>  ├── app<span class="token punctuation">.</span>iml
<span class="token operator">|</span>  ├── pom<span class="token punctuation">.</span>xml
<span class="token operator">|</span>  ├── src<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  ├── main<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  ├── java<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>        └── redis<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>           └── <span class="token class-name">MainTest</span><span class="token punctuation">.</span>java
<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  └── resources<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>  └── test<span class="token operator">/</span>
<span class="token operator">|</span>  <span class="token operator">|</span>     └── java<span class="token operator">/</span>
<span class="token operator">|</span>  └── target<span class="token operator">/</span>
<span class="token operator">|</span>     ├── classes<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>  └── com<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>     └── imlql<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>        └── redis<span class="token operator">/</span>
<span class="token operator">|</span>     <span class="token operator">|</span>           └── <span class="token class-name">MainTest</span><span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token operator">|</span>     └── generated<span class="token operator">-</span>sources<span class="token operator">/</span>
<span class="token operator">|</span>        └── annotations<span class="token operator">/</span>
├── pom<span class="token punctuation">.</span>xml
└── spi<span class="token operator">-</span>demo<span class="token punctuation">.</span>iml

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maintest" tabindex="-1"><a class="header-anchor" href="#maintest" aria-hidden="true">#</a> MainTest</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>imlql<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span><span class="token class-name">DataSaveService</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ServiceLoader</span></span><span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * 1、 ServiceLoader：load（）指定一个接口，
 *      他就会加载当前系统里面所有的这个接口的【指定实现】
 * 2、SPI（Service Provider Interface）
 *      接口工程---提供接口
 *          ---- 实现工程1  ： 实现接口 【META-INF/services 创建文件  接口名作为文件名  实现类全路径作为文件内容】
 *          ---- 实现工程2  ： 实现接口
 *
 *
 *      客户端----引用 工程1、或者 工程2
 *
 *
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//1、加载 可用的接口实现</span>
        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataSaveService</span><span class="token punctuation">&gt;</span></span> load <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">DataSaveService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//拿到实现进行调用</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DataSaveService</span> service <span class="token operator">:</span> load<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            service<span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span><span class="token string">&quot;你好....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MySQL</span>保存了数据<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>你好<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Redis</span>保存了数据<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>你好<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java的SPI机制会默认加载<strong>类路径</strong>下<code>META-INF/services</code>的东西</p><h3 id="datasaveservice" tabindex="-1"><a class="header-anchor" href="#datasaveservice" aria-hidden="true">#</a> DataSaveService</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public interface DataSaveService {

    void saveData(String data);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysqlsaveservice" tabindex="-1"><a class="header-anchor" href="#mysqlsaveservice" aria-hidden="true">#</a> MySQLSaveService</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySQLSaveService</span> <span class="token keyword">implements</span> <span class="token class-name">DataSaveService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MySQL保存了数据.......&quot;</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redissaveservice" tabindex="-1"><a class="header-anchor" href="#redissaveservice" aria-hidden="true">#</a> RedisSaveService</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSaveService</span> <span class="token keyword">implements</span> <span class="token class-name">DataSaveService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Redis保存了数据.......&quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spi文件示例" tabindex="-1"><a class="header-anchor" href="#spi文件示例" aria-hidden="true">#</a> SPI文件示例</h3><p>api-db-impl-redis\\src\\main\\resources\\META-INF\\services\\cn.imlql.data.DataSaveService</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>cn.imlql.redis.RedisSaveService
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>api-db-impl-mysql\\src\\main\\resources\\META-INF\\services\\cn.imlql.data.DataSaveService</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>cn.imlql.mysql.MySQLSaveService
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你没看错就是这么简单</p><h3 id="java的spi机制的作用" tabindex="-1"><a class="header-anchor" href="#java的spi机制的作用" aria-hidden="true">#</a> Java的SPI机制的作用</h3><p>我只需要规定接口就可以开放给任何人实现</p><blockquote><p>META-INF\\services下的文件，本文统称为<strong>SPI文件</strong></p></blockquote><h2 id="基于spi启动web容器" tabindex="-1"><a class="header-anchor" href="#基于spi启动web容器" aria-hidden="true">#</a> 基于SPI启动Web容器</h2><p>首先我们看到AppStarter实现了WebApplicationInitializer接口，官方文档是这样写的，那么WebApplicationInitializer肯定是能启动Web的核心</p><h3 id="webapplicationinitializer" tabindex="-1"><a class="header-anchor" href="#webapplicationinitializer" aria-hidden="true">#</a> WebApplicationInitializer</h3><p><img src="`+u+`" alt="Alt text"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="servletcontainerinitializer-onstartup" tabindex="-1"><a class="header-anchor" href="#servletcontainerinitializer-onstartup" aria-hidden="true">#</a> ServletContainerInitializer#onStartup()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> ctx<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt="Alt text"></p><p><img src="'+d+`" alt="Alt text"></p><p>相当于tomcat一启动会加载SpringServletContainerInitializer</p><h3 id="springservletcontainerinitializer-onstartup" tabindex="-1"><a class="header-anchor" href="#springservletcontainerinitializer-onstartup" aria-hidden="true">#</a> SpringServletContainerInitializer#onStartup()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * Servlet 3.0 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ServletContainerInitializer</span></span><span class="token punctuation">}</span> designed to support code-based
 * configuration of the servlet container using Spring&#39;s <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">}</span>
 * SPI as opposed to (or possibly in combination with) the traditional
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">web<span class="token punctuation">.</span>xml</span></span><span class="token punctuation">}</span>-based approach.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>See Also<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
 * See <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">}</span> Javadoc for examples and detailed usage
 * recommendations.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@author</span> Chris Beams
 * <span class="token keyword">@author</span> Juergen Hoeller
 * <span class="token keyword">@author</span> Rossen Stoyanchev
 * <span class="token keyword">@since</span> 3.1
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token punctuation">,</span> <span class="token class-name">ServletContext</span><span class="token punctuation">)</span></span>
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span></span>
 */</span>
<span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/**
    * Delegate the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ServletContext</span></span></span><span class="token punctuation">}</span> to any <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">}</span>
    * implementations present on the application classpath.
    * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Because this class declares @<span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">HandlesTypes</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>,
    * Servlet 3.0+ containers will automatically scan the classpath for implementations
    * of Spring&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">WebApplicationInitializer</span></span></span><span class="token punctuation">}</span> interface and provide the set of all
    * such types to the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">webAppInitializerClasses</span></span><span class="token punctuation">}</span> parameter of this method.
    * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If no <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">WebApplicationInitializer</span></span></span><span class="token punctuation">}</span> implementations are found on the classpath,
    * this method is effectively a no-op. An INFO-level log message will be issued notifying
    * the user that the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ServletContainerInitializer</span></span></span><span class="token punctuation">}</span> has indeed been invoked but that
    * no <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">WebApplicationInitializer</span></span></span><span class="token punctuation">}</span> implementations were found.
    * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Assuming that one or more <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">WebApplicationInitializer</span></span></span><span class="token punctuation">}</span> types are detected,
    * they will be instantiated (and <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>sorted<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> if the @<span class="token punctuation">{</span><span class="token keyword">@link</span>
    * <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span> @Order<span class="token punctuation">}</span> annotation is present or
    * the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span></span> Ordered<span class="token punctuation">}</span> interface has been
    * implemented). Then the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">#</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
    * method will be invoked on each instance, delegating the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ServletContext</span></span></span><span class="token punctuation">}</span> such
    * that each instance may register and configure servlets such as Spring&#39;s
    * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">DispatcherServlet</span></span></span><span class="token punctuation">}</span>, listeners such as Spring&#39;s <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ContextLoaderListener</span></span></span><span class="token punctuation">}</span>,
    * or any other Servlet API componentry such as filters.
    * <span class="token keyword">@param</span> <span class="token parameter">webAppInitializerClasses</span> all implementations of
    * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span></span><span class="token punctuation">}</span> found on the application classpath
    * <span class="token keyword">@param</span> <span class="token parameter">servletContext</span> the servlet context to be initialized
    * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">#</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span><span class="token punctuation">)</span></span>
    * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">AnnotationAwareOrderComparator</span></span>
    */</span>
  	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> webAppInitializerClasses<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">&gt;</span></span> initializers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>webAppInitializerClasses <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>webAppInitializerClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> waiClass <span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// Be defensive: Some servlet containers provide us with invalid classes,</span>
				<span class="token comment">// no matter what @HandlesTypes says... 所有的非接口非抽象的WebApplicationInitializer实现类</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
						<span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">try</span> <span class="token punctuation">{</span>
						initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">)</span> <span class="token comment">//集合负责保存满足上面条件的类</span>
								<span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to instantiate WebApplicationInitializer class&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;No Spring WebApplicationInitializer types detected on classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//下面会遍历所有满足要求的WebApplicationInitializer，调用他们的onStartup</span>
		servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Spring WebApplicationInitializers detected on classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span> initializer <span class="token operator">:</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//所有的 WebApplicationInitializer 的 onStartup</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="handlestypes" tabindex="-1"><a class="header-anchor" href="#handlestypes" aria-hidden="true">#</a> @HandlesTypes</h3><ol><li>其中@HandlesTypes注解表示可以处理的类，在<code>onStartup</code> 方法中，可以通过<code>Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses</code> 获取得到。</li><li>@HandlesTypes属于sun公司对Servlet定义的规范，包括tomcat,jetty等服务器都对它有不同的实现</li><li>tomcat对于@HandlesTypes的具体实现咱们这里不深究，可以肯定的是一定用到了Java的SPI，如下。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataSaveService</span><span class="token punctuation">&gt;</span></span> load <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>tomcat具体对于@HandlesTypes一定是和上面类似甚至是一样的代码来加载WebApplicationInitializer的实现</li></ol><p>咱们给它的方法onStartup打上断点</p><p>下面就是所有实现了WebApplicationInitializer的类</p><p><img src="`+v+'" alt="Alt text"></p><p>接着在最底下的for循环执行所有实现了WebApplicationInitializer的类的onStartup(),然后就走到了我们的AppStarter</p><p><img src="'+m+'" alt="Alt text"></p><p>到这一步，ioc容器都没有创建，我们给refresh()打个断点，看什么时候启动的ioc</p><p><img src="'+b+'" alt="Alt text"></p><p>放行</p><p>我看的时候debug断点没有看到从AppStarter的哪一步跳到refresh()的。然后我一步一步走的时候发现不是在这个方法里调用的，注意看下面的图，DispatcherServlet已经new完了，但是debug依然没有跳到refresh()，说明不是在new DispatcherServlet()的时候创建的容器</p><img src="https://npm.elemecdn.com/youthlql@1.0.6/spring-sourcecode-v1/chapter_08/image-20211016204522610.png"><p>不过我凭经验猜测Springmvc里最重要的是DispatcherServlet，会不会是DispatcherServlet的那一步启动了IOC，我们开始进行下面的尝试</p><h3 id="servlet相关" tabindex="-1"><a class="header-anchor" href="#servlet相关" aria-hidden="true">#</a> Servlet相关</h3><ol><li><p>tomcat会遵循sun公司的规范给每一个Servlet创建对象</p></li><li><p>所以DispatcherServlet肯定也会创建对象</p></li><li><p>Servlet的规范</p><ol><li>Servlet创建对象</li><li>Servlet调用Init初始化</li><li>每次请求调用service处理</li><li>tomcat停止的时候调用destroy进行销毁</li></ol></li></ol><p><img src="'+g+'" alt="Alt text"></p><ol start="4"><li>Serlvet是被谁调用开始初始化的属于tomcat的源码，我们这里不研究，我们这里只需要知道，每一个Servlet都会被初始化就可以了。</li></ol><h3 id="dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet" aria-hidden="true">#</a> DispatcherServlet</h3><p>spring-web中有一个叫DispatcherServlet的类，很明显他是一个Servlet，所以tomcat启动的时候就会加载它，加载它的话当然是从父类一层一层加载的</p><p><img src="'+h+`" alt="Alt text"></p><ol><li>想要启动IOC容器，只可能是创建DispatcherServlet对象或者调用init()的时候来搞。上面我们也看到了，创建DispatcherServlet对象的时候debug调用栈并没有显示跳到了refresh方法，所以显然不是创建对象的时候</li><li>那就只有可能是调用init()的时候开始启动的IOC容器</li></ol><p>Servlet规范的init我看了下都是空的，从Spring的HttpServletBean才开始有东西，HttpServletBean的父类和接口对于init()都是空实现，下面我们就从HttpServletBean开始分析。</p><h3 id="httpservletbean-init" tabindex="-1"><a class="header-anchor" href="#httpservletbean-init" aria-hidden="true">#</a> HttpServletBean#init()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

       <span class="token comment">// Set bean properties from init parameters.</span>
       <span class="token class-name">PropertyValues</span> pvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletConfigPropertyValues</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requiredProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
             <span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token class-name">PropertyAccessorFactory</span><span class="token punctuation">.</span><span class="token function">forBeanPropertyAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResourceLoader</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             bw<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResourceEditor</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>
             bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to set bean properties on servlet &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
             <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token comment">//模板方法模式。给子类留的喜欢干的事 Let subclasses do whatever initialization they like.</span>
       <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="frameworkservlet-initservletbean" tabindex="-1"><a class="header-anchor" href="#frameworkservlet-initservletbean" aria-hidden="true">#</a> FrameworkServlet#initServletBean()</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/** 追踪看web应用启动做了什么。
     * Overridden method of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">HttpServletBean</span></span><span class="token punctuation">}</span>, invoked after any bean properties
     * have been set. Creates this servlet&#39;s WebApplicationContext.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
       <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing Spring &quot;</span> <span class="token operator">+</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing Servlet &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化WebIOC容器，那我们想一下大概率是在这里启动的IOC容器</span>
          <span class="token function">initFrameworkServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这又是留给子类的</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Context initialization failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">?</span>
                <span class="token string">&quot;shown which may lead to unsafe logging of potentially sensitive data&quot;</span> <span class="token operator">:</span>
                <span class="token string">&quot;masked to prevent unsafe logging of potentially sensitive data&quot;</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;enableLoggingRequestDetails=&#39;&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">+</span>
                <span class="token string">&quot;&#39;: request parameters and headers will be &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Completed initialization in &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DispatcherServlet没有重写initFrameworkServlet()</p><p>最后得到结论</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化WebIOC容器，那我们想一下大概率是在这里启动的IOC容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面开始具体分析</p><h2 id="小补充" tabindex="-1"><a class="header-anchor" href="#小补充" aria-hidden="true">#</a> 小补充</h2><h3 id="xml版如何配置父子容器关系" tabindex="-1"><a class="header-anchor" href="#xml版如何配置父子容器关系" aria-hidden="true">#</a> XML版如何配置父子容器关系？</h3><h4 id="web-xml" tabindex="-1"><a class="header-anchor" href="#web-xml" aria-hidden="true">#</a> web.xml</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/app-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/app/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在web.xmI中配置C ontextl oaderListener,指定Spring配置文件的位置</li><li>在web.xml中配置 DispatcherServlet,指定SpringMVC配置文件位置</li><li>以上会产生父子容器</li></ol><p>父容器(Spring配置文件进行包扫描并保存所有组件的容器)</p><p>子容器(SpringMVC配置文件进行包扫描并保存所有组件的容器)</p><p>webloc.setParent(springloc)。类似于双亲委派，容器隔离。先看当前容器有没有这个组件，当前容器没有再去父容器找有没有这个组件</p><p><img src="`+w+'" alt="Alt text"></p><h3 id="abstractannotationconfigdispatcherservletinitializer能更快的整合spring和springmvc" tabindex="-1"><a class="header-anchor" href="#abstractannotationconfigdispatcherservletinitializer能更快的整合spring和springmvc" aria-hidden="true">#</a> AbstractAnnotationConfigDispatcherServletInitializer能更快的整合Spring和SpringMVC</h3><p><img src="'+f+`" alt="Alt text"></p><p>AbstractAnnotationConfigDispatcherServletInitializer能更快的整合Spring和SpringMVC</p><blockquote><p>后面的讲解都用这个测试类</p></blockquote><h4 id="测试类-1" tabindex="-1"><a class="header-anchor" href="#测试类-1" aria-hidden="true">#</a> 测试类</h4><h5 id="quickappstarter" tabindex="-1"><a class="header-anchor" href="#quickappstarter" aria-hidden="true">#</a> QuickAppStarter</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 最快速的整合注解版SpringMVC和Spring的
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickAppStarter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span> <span class="token comment">//根容器的配置（Spring的配置文件===Spring的配置类）</span>
   <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span> <span class="token comment">//web容器的配置（SpringMVC的配置文件===SpringMVC的配置类）</span>
   <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">SpringMVCConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span> <span class="token comment">//Servlet的映射，DispatcherServlet的映射路径</span>
   <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeRegistration</span><span class="token punctuation">(</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//    super.customizeRegistration(registration);</span>

<span class="token comment">//    registration.addMapping(&quot;&quot;);//</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="springmvcconfig" tabindex="-1"><a class="header-anchor" href="#springmvcconfig" aria-hidden="true">#</a> SpringMVCConfig</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * SpringMVC只扫描controller组件，可以不指定父容器类，让MVC扫所有。@Component+@RequestMapping就生效了
 */</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cn.imlql.web&quot;</span><span class="token punctuation">,</span> includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token punctuation">{</span>
   <span class="token comment">//SpringMVC的子容器，能扫描的Spring容器中的组件</span>
   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="springconfig" tabindex="-1"><a class="header-anchor" href="#springconfig" aria-hidden="true">#</a> SpringConfig</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Spring不扫描controller组件
 */</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cn.imlql.web&quot;</span><span class="token punctuation">,</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>
	<span class="token comment">//Spring的父容器</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父子容器隔离，因为有这句话webloc.setParent(springloc)，springmvc这个子容器可以扫描到父容器Spring里面的组件，反之Spring父容器扫描不到springmvc这个子容器的组件。</p><h5 id="hellocontroller-1" tabindex="-1"><a class="header-anchor" href="#hellocontroller-1" aria-hidden="true">#</a> HelloController</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@Controller; 如果有父子容器 @Component，默认是在父容器中，还找不到</span>
<span class="token comment">//@Component+@RequestMapping</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

   <span class="token keyword">public</span> <span class="token class-name">HelloController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloController.....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Autowired</span>
   <span class="token class-name">HelloService</span> helloService<span class="token punctuation">;</span>

   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 所有的xxxMapping都是RequestMapping</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

      <span class="token class-name">String</span> mvc <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;MVC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> mvc<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="helloservice" tabindex="-1"><a class="header-anchor" href="#helloservice" aria-hidden="true">#</a> HelloService</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>

   <span class="token keyword">public</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService.....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Hello,&quot;</span><span class="token operator">+</span>name<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Receives notification that the web application initialization
     * process is starting.【翻译：在当前web应用启动以后（Tomcat把web应用加载了以后），调用contextInitialized方法】
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>All ServletContextListeners are notified of context
     * initialization before any filters or servlets in the web
     * application are initialized.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">sce</span> the ServletContextEvent containing the ServletContext
     * that is being initialized
     *
     * <span class="token keyword">@implSpec</span>
     * The default implementation takes no action.
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Receives notification that the ServletContext is about to be
     * shut down.
     *  
     * ......
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springmvc父子容器的启动过程" tabindex="-1"><a class="header-anchor" href="#springmvc父子容器的启动过程" aria-hidden="true">#</a> SpringMVC父子容器的启动过程</h2><h3 id="保存父子容器相关信息" tabindex="-1"><a class="header-anchor" href="#保存父子容器相关信息" aria-hidden="true">#</a> 保存父子容器相关信息</h3><h4 id="springservletcontainerinitializer-onstartup-1" tabindex="-1"><a class="header-anchor" href="#springservletcontainerinitializer-onstartup-1" aria-hidden="true">#</a> SpringServletContainerInitializer#onStartup()</h4><p><img src="`+S+`" alt="Alt text"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> webAppInitializerClasses<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span>
         <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">&gt;</span></span> initializers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>webAppInitializerClasses <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>webAppInitializerClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> waiClass <span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Be defensive: Some servlet containers provide us with invalid classes,</span>
            <span class="token comment">// no matter what @HandlesTypes says... 所有的非接口非抽象的WebApplicationInitializer实现类</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                  <span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">try</span> <span class="token punctuation">{</span>
                  initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">)</span> <span class="token comment">//集合负责保存满足上面条件的类</span>
                        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
               <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to instantiate WebApplicationInitializer class&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;No Spring WebApplicationInitializer types detected on classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//下面会遍历所有满足要求的WebApplicationInitializer，调用他们的onStartup</span>
      servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Spring WebApplicationInitializers detected on classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span> initializer <span class="token operator">:</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//所有的 WebApplicationInitializer 的 onStartup</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当initializer是咱们的QuickAppStarter时，F7进入方法。</p><h4 id="abstractdispatcherservletinitializer-onstartup" tabindex="-1"><a class="header-anchor" href="#abstractdispatcherservletinitializer-onstartup" aria-hidden="true">#</a> AbstractDispatcherServletInitializer#onStartup()</h4><p><img src="`+x+`" alt="Alt text"></p><p>因为咱们的QuickAppStarter没有onStarup()所以就调用了父类AbstractDispatcherServletInitializer的，没想到AbstractDispatcherServletInitializer也是继续调用父类的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="abstractcontextloaderinitializer-onstartup" tabindex="-1"><a class="header-anchor" href="#abstractcontextloaderinitializer-onstartup" aria-hidden="true">#</a> AbstractContextLoaderInitializer#onStartup()</h4><p><img src="`+y+`" alt="Alt text"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContextLoaderInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/** Logger available to subclasses. */</span>
   <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


   <span class="token annotation punctuation">@Override</span> <span class="token comment">//注册ContextLoaderListener；contextInitialized</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
      <span class="token function">registerContextLoaderListener</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    
   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerContextLoaderListener</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">WebApplicationContext</span> rootAppContext <span class="token operator">=</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个根容器</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rootAppContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">ContextLoaderListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span>rootAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
			listener<span class="token punctuation">.</span><span class="token function">setContextInitializers</span><span class="token punctuation">(</span><span class="token function">getRootApplicationContextInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;No ContextLoaderListener registered, as &quot;</span> <span class="token operator">+</span>
					<span class="token string">&quot;createRootApplicationContext() did not return an application context&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+C+`" alt="Alt text"></p><h4 id="abstractannotationconfigdispatcherservletinitializer-createrootapplicationcontext-创建spring-ioc父容器" tabindex="-1"><a class="header-anchor" href="#abstractannotationconfigdispatcherservletinitializer-createrootapplicationcontext-创建spring-ioc父容器" aria-hidden="true">#</a> AbstractAnnotationConfigDispatcherServletInitializer#createRootApplicationContext()创建Spring-IOC父容器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Nullable</span> <span class="token comment">//重写了爷爷类的创建根容器方法</span>
    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> configClasses <span class="token operator">=</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取根配置</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建了一个IOC容器并把配置类注册进来</span>
          <span class="token keyword">return</span> context<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+A+'" alt="Alt text"></p><p>getRootConfigClasses()正好是咱们QuickAppStarter这个子类重写的，debug F7进入</p><h4 id="quickappstarter-getrootconfigclasses-拿自定义的配置类" tabindex="-1"><a class="header-anchor" href="#quickappstarter-getrootconfigclasses-拿自定义的配置类" aria-hidden="true">#</a> QuickAppStarter#getRootConfigClasses()拿自定义的配置类</h4><p>果不其然，调用了QuickAppStarter#getRootConfigClasses()</p><p><img src="'+z+'" alt="Alt text"></p><p>继续往下走创建Web容器，这是Spring父容器，因为你看它getRootConfigClasses()获取的是父容器配置</p><p><img src="'+q+'" alt="Alt text"></p><p>然后返回</p><p><img src="'+I+`" alt="Alt text"></p><p>图片上面写错了。应该改为：<strong>保存了上面创建的Spring-IOC父容器</strong>。Web子容器的创建在下面</p><h4 id="contextloaderlistener创建一个监听器准备后续启动容器进行回调" tabindex="-1"><a class="header-anchor" href="#contextloaderlistener创建一个监听器准备后续启动容器进行回调" aria-hidden="true">#</a> ContextLoaderListener创建一个监听器准备后续启动容器进行回调</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">extends</span> <span class="token class-name">ContextLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
   <span class="token comment">//在当前web应用启动以后（Tomcat把web应用加载了以后），调用contextInitialized方法</span>
   <span class="token keyword">public</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token doc-comment comment">/**
    * Initialize the root web application context.
    */</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//根容器初始化</span>
      <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化webioc容器</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是利用Servlet标准</p><h4 id="返回到abstractdispatcherservletinitializer-onstartup" tabindex="-1"><a class="header-anchor" href="#返回到abstractdispatcherservletinitializer-onstartup" aria-hidden="true">#</a> 返回到AbstractDispatcherServletInitializer#onStartup()</h4><p>接着就继续返回</p><p><img src="`+j+`" alt="Alt text"></p><p>下面才是创建Web子容器（也叫做Servlet容器）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">String</span> servletName <span class="token operator">=</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> <span class="token string">&quot;getServletName() must not return null or empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">WebApplicationContext</span> servletAppContext <span class="token operator">=</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建Servlet容器</span>
       <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">,</span> <span class="token string">&quot;createServletApplicationContext() must not return null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">FrameworkServlet</span> dispatcherServlet <span class="token operator">=</span> <span class="token function">createDispatcherServlet</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span> <span class="token string">&quot;createDispatcherServlet(WebApplicationContext) must not return null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       dispatcherServlet<span class="token punctuation">.</span><span class="token function">setContextInitializers</span><span class="token punctuation">(</span><span class="token function">getServletApplicationContextInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> dispatcherServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>registration <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register servlet with name &#39;&quot;</span> <span class="token operator">+</span> servletName <span class="token operator">+</span> <span class="token string">&quot;&#39;. &quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;Check if there is another servlet registered under the same name.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据我们指定的DispatcherServlet的路径进行注册</span>
       registration<span class="token punctuation">.</span><span class="token function">setAsyncSupported</span><span class="token punctuation">(</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filters <span class="token operator">=</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span> filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token function">registerServletFilter</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
	   <span class="token comment">// 这个是留给我们自定义的方法，模板模式</span>
       <span class="token function">customizeRegistration</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+`" alt="Alt text"></p><h4 id="abstractannotationconfigdispatcherservletinitializer-createservletapplicationcontext-创建web子容器-servelt容器" tabindex="-1"><a class="header-anchor" href="#abstractannotationconfigdispatcherservletinitializer-createservletapplicationcontext-创建web子容器-servelt容器" aria-hidden="true">#</a> AbstractAnnotationConfigDispatcherServletInitializer#createServletApplicationContext()创建Web子容器(Servelt容器)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
       <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> configClasses <span class="token operator">=</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取web应用的配置</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> context<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+W+'" alt="Alt text"></p><p>这里又new了一个容器，和上面那个容器一样都没有初始化。这里也是调用咱们QuickAppStarter重写的方法，因为这里调用的是getServletConfigClasses()，所以很明显这里的容器是Web子容器</p><p><img src="'+D+'" alt="Alt text"></p><p>然后就一路往回返，走到这里</p><p><img src="'+L+'" alt="Alt text"></p><p>继续F7进入</p><p><img src="'+M+'" alt="Alt text"></p><p>这里就是保存咱们上面刚创建的Web子容器，然后再返回</p><h4 id="返回到springservletcontainerinitializer-onstartup" tabindex="-1"><a class="header-anchor" href="#返回到springservletcontainerinitializer-onstartup" aria-hidden="true">#</a> 返回到SpringServletContainerInitializer#onStartup()</h4><p><img src="'+E+'" alt="Alt text"></p><ol><li>这里应用就加载完了，接下来干嘛呢？</li><li>你往前看看，咱们的Spring容器和Web子容器都是只是创建完了，都还没有初始化，甚至都没有webloc.setParent(springloc)这样产生父子容器的关系</li><li>回想下前面讲的，是不是有一个监听器，那你说把容器保存到监听器里，它能是干嘛的？猜想一下不就是应用加载完之后，发送一个什么事件，然后根据这个事件触发监听器初始化两大容器等等。</li></ol><p>咱们就把那个监听器的初始化方法打个断点，然后F8放行试试呗</p><h3 id="contextloaderlistener回调-开始refresh刷新spring的根容器-父容器" tabindex="-1"><a class="header-anchor" href="#contextloaderlistener回调-开始refresh刷新spring的根容器-父容器" aria-hidden="true">#</a> ContextLoaderListener回调-开始refresh刷新Spring的根容器(父容器)</h3><h4 id="contextloaderlistener-contextinitialized" tabindex="-1"><a class="header-anchor" href="#contextloaderlistener-contextinitialized" aria-hidden="true">#</a> ContextLoaderListener#contextInitialized()</h4><p><img src="'+N+'" alt="Alt text"></p><h4 id="简单看一下tomcat里的调用源码" tabindex="-1"><a class="header-anchor" href="#简单看一下tomcat里的调用源码" aria-hidden="true">#</a> 简单看一下Tomcat里的调用源码</h4><p>然后真的走到了这里。tomcat里的代码位置是乱的，乱的意思就是比如说上面写的是4766行的调用，但实际上那里是个<code>}</code>大括号。也不知道是什么问题，所以我们就大致看下tomcat的代码，不细究。</p><p><img src="'+T+'" alt="Alt text"></p><p>这里的调用还是对的</p><p><img src="'+R+'" alt="Alt text"></p><p>应该就是类似这样的调用</p><p><img src="'+F+'" alt="Alt text"></p><p>走的应该是第一个if</p><p><img src="'+O+'" alt="Alt text"></p><p>大致就是tomcat里的一个监听器基于事件回调的原理，咱们就不深究了。</p><h4 id="contextloader-initwebapplicationcontext" tabindex="-1"><a class="header-anchor" href="#contextloader-initwebapplicationcontext" aria-hidden="true">#</a> ContextLoader#initWebApplicationContext()</h4><p><img src="'+H+'" alt="Alt text"></p><p>F7进入，这里因为我重新启动了一次，所以你看到根容器是@3661</p><p><img src="'+V+'" alt="Alt text"></p><p>终于要调用refresh了</p><p><img src="'+P+'" alt="Alt text"></p><p>这里直接放行到容器refresh完毕看下父容器</p><p><img src="'+B+'" alt="Alt text"></p><p>父容器只扫描了，springconfig和helloService，我们继续放行看下Web子容器.</p><h3 id="servlet初始化-进而开始refresh刷新spring的web子容器" tabindex="-1"><a class="header-anchor" href="#servlet初始化-进而开始refresh刷新spring的web子容器" aria-hidden="true">#</a> Servlet初始化-进而开始refresh刷新Spring的web子容器</h3><h4 id="httpservletbean-init-1" tabindex="-1"><a class="header-anchor" href="#httpservletbean-init-1" aria-hidden="true">#</a> HttpServletBean#init()</h4><p>跳到了这里，为什么会跳到这里呢？记不记得之前我们用DispatcherServlet保存了Web子容器，这里就要调用DispatcherServlet的相关初始化方法</p><p><img src="'+Q+'" alt="Alt text"></p><h4 id="frameworkservlet-initwebapplicationcontext" tabindex="-1"><a class="header-anchor" href="#frameworkservlet-initwebapplicationcontext" aria-hidden="true">#</a> FrameworkServlet#initWebApplicationContext()</h4><p>一路放行</p><p><img src="'+J+`" alt="Alt text"></p><p>上面父子容器关系形成了，并且父容器已经refresh完毕</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">WebApplicationContext</span> rootContext <span class="token operator">=</span>
             <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父容器</span>
       <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//先会获取之前的 WebApplicationContext（构建父子容器）</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// A context instance was injected at construction time -&gt; use it</span>
          wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext<span class="token punctuation">;</span> <span class="token comment">//当前的web-ioc容器</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> wac<span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// The context has not yet been refreshed -&gt; provide services such as</span>
                <span class="token comment">// setting the parent context, setting the application context id, etc</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   <span class="token comment">// The context instance was injected without an explicit parent -&gt; set</span>
                   <span class="token comment">// the root application context (if any; may be null) as the parent</span>
                   cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父子容器的体现，</span>
                <span class="token punctuation">}</span>
                <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//配置并且刷新容器</span>
             <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// No context instance was injected at construction time -&gt; see if one</span>
          <span class="token comment">// has been registered in the servlet context. If one exists, it is assumed</span>
          <span class="token comment">// that the parent context (if any) has already been set and that the</span>
          <span class="token comment">// user has performed any initialization such as setting the context id</span>
          wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// No context instance is defined for this servlet -&gt; create a local one</span>
          wac <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshEventReceived<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// Either the context is not a ConfigurableApplicationContext with refresh</span>
          <span class="token comment">// support or the context injected at construction time had already been</span>
          <span class="token comment">// refreshed -&gt; trigger initial onRefresh manually here.</span>
          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefreshMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token function">onRefresh</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>publishContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// Publish the context as a servlet context attribute.</span>
          <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token function">getServletContextAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       <span class="token keyword">return</span> wac<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="frameworkservlet-createwebapplicationcontext" tabindex="-1"><a class="header-anchor" href="#frameworkservlet-createwebapplicationcontext" aria-hidden="true">#</a> FrameworkServlet#createWebApplicationContext()</h4><p><img src="`+G+'" alt="Alt text"></p><p>再次来到Web子容器的刷新</p><p><img src="'+U+`" alt="Alt text"></p><ol><li>然后我们看到子容器只有它自己的东西</li><li>虽然子容器只有controller，但是因为它保存了父容器。所以它是可以拿到HelloService的，也就是我们可以在HelloController里装配HelloService</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Autowired</span>
	<span class="token class-name">HelloService</span> helloService<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>但是如果想在父容器里装配HelloController就会报错，父容器没有保存子容器。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Autowired</span>
	<span class="token class-name">HelloController</span> helloController<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>这样就很好的实现容器隔离，避免Service乱引用Controller</li><li>实现父子容器隔离的前提就是前面写的SpringConfig不扫描controller，交给Web子容器</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Spring不扫描controller组件
 */</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cn.imlql.web&quot;</span><span class="token punctuation">,</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>
	<span class="token comment">//Spring的父容器</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * SpringMVC只扫描controller组件，可以不指定父容器类，让MVC扫所有。@Component+@RequestMapping就生效了
 */</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cn.imlql.web&quot;</span><span class="token punctuation">,</span> includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token punctuation">{</span>
   <span class="token comment">//SpringMVC的子容器，能扫描的Spring容器中的组件</span>
   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意找组件的过程是先找自己的容器，自己没有再到父容器里找</p><blockquote><ol><li>总的来说Spring父容器和SpringMVC子容器启动过程是来自于tomcat的两个回调</li><li>Serlvet应用启动，监听器回调刷新Spring父容器</li><li>Servlet初始化，回调刷新SpringMVC子容器</li></ol></blockquote>`,196);function nn(sn,an){const a=e("ExternalLinkIcon");return p(),o("div",null,[K,Z,n("p",null,[s("根据"),n("a",X,[s("官方文档"),c(a)]),s("写咱们的测试类")]),$])}const en=t(Y,[["render",nn],["__file","08.di8zhang-SpringMVCzirongqiheSpringfurongqideqidongyuanli.html.vue"]]);export{en as default};
